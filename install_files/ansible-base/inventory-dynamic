#!/usr/bin/env python
"""
Dynamic inventory script for connecting to a Tor Hidden Service
for SSH. The THS must already be provisioned on the target host.
"""
import json
import os
import yaml


# Constant for storing SSH connection. This is reused for all hosts,
# but it's trivial to store the info in the primary dict to support
# per-host vars.
SSH_COMMON_ARGS = "-o ProxyCommand='nc -x 127.0.0.1:9050 %h %p'"

SECUREDROP_SITE_VARS = "group_vars/all/site-specific"
SECUREDROP_SUPPORTED_HOSTNAMES = ['app', 'mon']

try:
    with open(SECUREDROP_SITE_VARS, 'r') as f:
        site_vars = yaml.load(f)
        app_ip = site_vars['app_ip']
        monitor_ip = site_vars['monitor_ip']

except IOError:
    msg = "You must run the configure playbook."
    raise Exception(msg)


def lookup_local_ipv4_address(hostname):
    """
    Extract local IPv4 addresses from site vars for first-run config.
    After running the playbooks, SSH access is restricted to Authenticated
    Tor Hidden Services.
    """
    if hostname == "app":
        return app_ip
    elif hostname == "mon":
        return monitor_ip
    else:
        msg = "Unsupported hostname: '{}'".format(hostname)
        raise Exception(msg)


def lookup_tor_hostname(hostname):
    """Open local hostname file based on inventory name, return Onion URL."""

    aths_path = os.path.join('.', "{}-ssh-aths".format(hostname))
    with open(aths_path, 'r') as f:
        tor_config = f.readline().rstrip().split()
        try:
            # Regardless of THS/ATHS, Onion URL will be first item.
            # That's all we care about to get the address.
            return tor_config[0]
        except IndexError:
            msg = ("Tor config file for '{}' ",
                   "appears to be empty").format(hostname)
            raise Exception(msg=msg)


def lookup_ssh_address(hostname):
    """
    Wrapper function to first look up IPv4 address, then add ATHS
    for Tor over SSH only if configured.
    """
    ssh_address = lookup_local_ipv4_address(hostname)
    try:
        ssh_address = lookup_tor_hostname(hostname)
    except IndexError:
        pass

    return ssh_address


inventory = {
    "_meta": {
        "hostvars": {
            h: {
                "ansible_ssh_host": lookup_ssh_address(h),
                "ansible_ssh_common_args": SSH_COMMON_ARGS,
            } for h in SECUREDROP_SUPPORTED_HOSTNAMES
        },
        'securedrop': [SECUREDROP_SUPPORTED_HOSTNAMES],
        'securedrop_application_server': ['app'],
        'securedrop_monitor_server': ['mon'],
    }
}

if os.environ.get('ANSIBLE_SSH_OVER_TOR', None) in ('0',
                                                    'no',
                                                    'off',
                                                    'disabled'):
    inventory = {}

print(json.dumps(inventory, indent=2))
