#!/usr/bin/env python
"""
Dynamic inventory script for connecting to a Tor Hidden Service
for SSH. The THS must already be provisioned on the target host.
"""
import json
import os
import subprocess
import yaml


# Constant for storing SSH connection. This is reused for all hosts,
# but it's trivial to store the info in the primary dict to support
# per-host vars.
SSH_COMMON_ARGS = "-o ProxyCommand='nc -x 127.0.0.1:9050 %h %p'"

# Find absolute path to ansible-base directory.
SECUREDROP_ANSIBLE_DIRECTORY = os.path.abspath(os.path.join(__file__,
                                                            os.path.pardir))
SECUREDROP_SITE_VARS = os.path.join(SECUREDROP_ANSIBLE_DIRECTORY,
                                    "group_vars",
                                    "all",
                                    "site-specific")
SECUREDROP_SUPPORTED_HOSTNAMES = ['app', 'mon']


def lookup_local_ipv4_address(hostname):
    """
    Extract local IPv4 addresses from site vars for first-run config.
    After running the playbooks, SSH access is restricted to Authenticated
    Tor Hidden Services.
    """
    try:
        with open(SECUREDROP_SITE_VARS, 'r') as f:
            site_vars = yaml.load(f)
            app_ip = site_vars['app_ip']
            monitor_ip = site_vars['monitor_ip']

    except (IOError, KeyError):
        msg = "You must run the configure playbook."
        raise Exception(msg)

    if hostname == "app":
        return app_ip
    elif hostname == "mon":
        return monitor_ip
    else:
        msg = "Unsupported hostname: '{}'".format(hostname)
        raise Exception(msg)


def lookup_tor_hostname(hostname):
    """
    Extract Onion URL from HidServAuth file that was fetched back locally.
    Returns Onion URL for given inventory hostname.
    """
    aths_path = os.path.join(SECUREDROP_ANSIBLE_DIRECTORY,
                             "{}-ssh-aths".format(hostname))
    with open(aths_path, 'r') as f:
        tor_config = f.readline().rstrip().split()
        try:
            # Regardless of THS/ATHS, Onion URL will be first item.
            # That's all we care about to get the address.
            return tor_config[0]
        except IndexError:
            msg = ("Tor config file for '{}' ",
                   "appears to be empty").format(hostname)
            raise Exception(msg=msg)


def lookup_ssh_address(hostname):
    """
    Wrapper function to first look up IPv4 address, then add ATHS
    for Tor over SSH only if configured.
    """
    ssh_address = lookup_local_ipv4_address(hostname)
    try:
        ssh_address = lookup_tor_hostname(hostname)
    # Don't assume ATHS files are present; they won't be on first run.
    except IndexError:
        pass

    return ssh_address


def lookup_host_distro_id():
    """
    Returns output of `lsb_release --id --short`, to check
    whether host machine is Tails.
    """
    cmd = ["lsb_release", "--id", "--short"]
    p = subprocess.check_output(cmd)
    distro_id = p.rstrip()
    return distro_id


def host_is_tails():
    """
    Wrapper return True/False for whether script is executed
    within Tails. We don't want to add SSH extra args if True.
    """
    return lookup_host_distro_id() == "Tails"


def build_inventory():
    """
    Construct JSON dict of host information for use as inventory.
    """
    inventory = {
        "_meta": {
            "hostvars": {
                h: {
                    "ansible_ssh_host": lookup_ssh_address(h)
                } for h in SECUREDROP_SUPPORTED_HOSTNAMES
            },
            'securedrop': [SECUREDROP_SUPPORTED_HOSTNAMES],
            'securedrop_application_server': ['app'],
            'securedrop_monitor_server': ['mon'],
        }
    }

    # Append SSH extra args if NOT under Tails. Necessary for testing.
    if not host_is_tails():
        for host, hostvars in inventory["_meta"]["hostvars"].iteritems():
            (inventory["_meta"]
                      ["hostvars"]
                      [host]
                      ["ansible_ssh_common_args"]) = SSH_COMMON_ARGS
    return inventory


if __name__ == "__main__":
    inventory = build_inventory()
    print(json.dumps(inventory, indent=2))
