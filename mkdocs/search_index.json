{
    "docs": [
        {
            "location": "/", 
            "text": "SecureDrop is an open-source whistleblower submission system that media organizations can use to securely accept documents from and communicate with anonymous sources. It was originally created by the late Aaron Swartz and is currently managed by \nFreedom of the Press Foundation\n.\n\n\nFound an issue?\n\n\nIf you're here because you want to report an issue in SecureDrop, please observe the following protocol to report an issue responsibly:\n\n\n\n\nIf you want to report a \nsecurity issue\n, please use our \nbug bounty hosted by Bugcrowd\n.\n\n\nIf the issue does not have a security impact, just create a \nGithub Issue\n.\n\n\n\n\nTechnical Summary\n\n\nSecureDrop is a tool for sources to communicate securely with journalists. The SecureDrop application environment consists of three dedicated computers:\n\n\n\n\nSecure Viewing Station\n: An air-gapped laptop running the \nTails operating system\n from a USB stick that journalists use to decrypt and view submitted documents.\n\n\nApplication Server\n: Ubuntu server running two segmented Tor hidden services. The source connects to the \nSource Interface\n, a public-facing Tor hidden service, to send messages and documents to the journalist. The journalist connects to the \nDocument Interface\n, an \nauthenticated Tor hidden service\n, to download encrypted documents and respond to sources.\n\n\nMonitor server\n: Ubuntu server that monitors the \nApplication Server\n with \nOSSEC\n and sends email alerts.\n\n\n\n\nIn addition to these dedicated computers, the journalist will also use his or her normal workstation computer:\n\n\n\n\nJournalist Workstation\n: The every-day laptop that the journalist uses for his or her work. The journalist will use this computer to connect to the \nApplication Server\n to download encrypted documents that he or she will transfer to the \nSecure Viewing Station\n. The \nJournalist Workstation\n is also used to respond to sources via the \nDocument Interface\n.\n\n\n\n\nDepending on the news organizations's threat model, it is recommended that journalists always use the \nTails operating system\n on their \nJournalist Workstation\n when connecting to the \nApplication Server\n. Alternatively, this can also be its own dedicated computer.\n\n\nThese computers should all physically be in your organization's office.\n\n\nHow to Install SecureDrop\n\n\nSee the \nInstallation Guide\n.\n\n\nHow to Use SecureDrop\n\n\n\n\nHow to use SecureDrop as a source\n\n\nHow to use SecureDrop as a journalist\n\n\n\n\nHow to Contribute to SecureDrop\n\n\nSee the \nDevelopment Guide\n.\n\n\nLicense\n\n\nSecureDrop is open source and released under the \nGNU Affero General Public License v3\n.\n\n\nThe \nwordlist\n we use to generate source passphrases comes from \nDiceware\n, and is licensed under Creative Commons Attribution 3.0 Unported thanks to A G Reinhold.", 
            "title": "Home"
        }, 
        {
            "location": "/#found-an-issue", 
            "text": "If you're here because you want to report an issue in SecureDrop, please observe the following protocol to report an issue responsibly:   If you want to report a  security issue , please use our  bug bounty hosted by Bugcrowd .  If the issue does not have a security impact, just create a  Github Issue .", 
            "title": "Found an issue?"
        }, 
        {
            "location": "/#technical-summary", 
            "text": "SecureDrop is a tool for sources to communicate securely with journalists. The SecureDrop application environment consists of three dedicated computers:   Secure Viewing Station : An air-gapped laptop running the  Tails operating system  from a USB stick that journalists use to decrypt and view submitted documents.  Application Server : Ubuntu server running two segmented Tor hidden services. The source connects to the  Source Interface , a public-facing Tor hidden service, to send messages and documents to the journalist. The journalist connects to the  Document Interface , an  authenticated Tor hidden service , to download encrypted documents and respond to sources.  Monitor server : Ubuntu server that monitors the  Application Server  with  OSSEC  and sends email alerts.   In addition to these dedicated computers, the journalist will also use his or her normal workstation computer:   Journalist Workstation : The every-day laptop that the journalist uses for his or her work. The journalist will use this computer to connect to the  Application Server  to download encrypted documents that he or she will transfer to the  Secure Viewing Station . The  Journalist Workstation  is also used to respond to sources via the  Document Interface .   Depending on the news organizations's threat model, it is recommended that journalists always use the  Tails operating system  on their  Journalist Workstation  when connecting to the  Application Server . Alternatively, this can also be its own dedicated computer.  These computers should all physically be in your organization's office.", 
            "title": "Technical Summary"
        }, 
        {
            "location": "/#how-to-install-securedrop", 
            "text": "See the  Installation Guide .", 
            "title": "How to Install SecureDrop"
        }, 
        {
            "location": "/#how-to-use-securedrop", 
            "text": "How to use SecureDrop as a source  How to use SecureDrop as a journalist", 
            "title": "How to Use SecureDrop"
        }, 
        {
            "location": "/#how-to-contribute-to-securedrop", 
            "text": "See the  Development Guide .", 
            "title": "How to Contribute to SecureDrop"
        }, 
        {
            "location": "/#license", 
            "text": "SecureDrop is open source and released under the  GNU Affero General Public License v3 .  The  wordlist  we use to generate source passphrases comes from  Diceware , and is licensed under Creative Commons Attribution 3.0 Unported thanks to A G Reinhold.", 
            "title": "License"
        }, 
        {
            "location": "/installation/intro/", 
            "text": "Before you begin\n\n\nWhen running commands or editing configuration files that include filenames, version numbers, userames, and hostnames or IP addresses, make sure it all matches your setup. This guide contains several words and phrases associated with SecureDrop that you may not be familiar with. A basic familiarity with Linux, the GNU core utilities and Bash shell is highly advantageous. It's recommended that you read our \nTerminology Guide\n once before starting and keep it open in another tab to refer back to.\n\n\nYou will also need the inventory of hardware items for the installation listed in our \nHardware Guide\n.", 
            "title": "Getting started"
        }, 
        {
            "location": "/installation/intro/#before-you-begin", 
            "text": "When running commands or editing configuration files that include filenames, version numbers, userames, and hostnames or IP addresses, make sure it all matches your setup. This guide contains several words and phrases associated with SecureDrop that you may not be familiar with. A basic familiarity with Linux, the GNU core utilities and Bash shell is highly advantageous. It's recommended that you read our  Terminology Guide  once before starting and keep it open in another tab to refer back to.  You will also need the inventory of hardware items for the installation listed in our  Hardware Guide .", 
            "title": "Before you begin"
        }, 
        {
            "location": "/installation/setup_tails_usb_sticks/", 
            "text": "Set up Tails USB sticks\n\n\nBefore installing the SecureDrop application, the first thing you need to do is set up several USB sticks with the Tails operating system. Tails is a privacy-enhancing live operating system that runs on removable media, such as a DVD or a USB stick. It sends all your Internet traffic through Tor, does not touch your computer's hard drive, and securely wipes unsaved work on shutdown.\n\n\nYou'll need to install Tails onto at least four USB sticks and enable persistent storage, which is an encrypted volume that allows you to save information even when Tails securely wipes everything else:\n\n\n\n\n\n\noffline Tails USB\n\n\n\n\n\n\nadmin Tails USB\n\n\n\n\n\n\njournalist Tails USB\n.\n\n\n\n\n\n\nlong-term storage Tails USB\n\n\n\n\n\n\nYou will need one Tails USB for each journalist, so if you have more than one journalist checking SecureDrop, you'll need to create even more. It's a good idea to label or color-code these in order to tell them apart.\n\n\nInstalling Tails\n\n\nWe recommend creating an initial Tails Live DVD or USB, and then using that to create additional Tails Live USBs with the \nTails Installer\n, a special program that is only available from inside Tails. \nYou will only be able to create persistent volumes on USB sticks that had Tails installed via the Tails Installer\n.\n\n\nThe \nTails website\n has detailed and up-to-date instructions on how to download and verify Tails, and how to create a bootable Tails USB stick. Follow the instructions at these links and then return to this page:\n\n\n\n\nDownload and verify the Tails .iso\n\n\nInstall onto a USB stick or SD card\n\n\n\n\nNote that this process will take some time because once you have one copy of Tails, you have to create each additional Tails USB, shut down, and boot into each one to complete the next step.\n\n\nAlso, you should be aware that Tails doesn't always completely shut down and reboot properly when you click \"restart\", so if you notice a signficant delay, you may have to manually power off and restart your computer for it to work properly.\n\n\nEnabling Persistence Storage on Tails\n\n\nCreating an encrypted persistent volume will allow you to securely save information and settings in the free space that is left on your Tails USB. This information will remain available to you even if you reboot Tails. (Tails securely erases all other data on every shutdown.)\n\n\nYou will need to create a persistent storage on each Tails USB, with a unique password for each.\n\n\nPlease use the instructions on the \nTails website\n to make the persistent volume on each Tails USB stick you create.\n\n\nWhen creating the persistence volume, you will be asked to select from a list of features, such as 'Personal Data'. We recommend that you enable \nall\n features.\n\n\nSome other things to keep in mind:\n\n\n\n\n\n\nYou will want to create a persistent volume for all three main Tails USBs: the \noffline Tails USB\n, the \nadmin Tails USB\n, and the \njournalist Tails USB\n.\n\n\n\n\n\n\nThe admin and the journalist should create separate passwords for their own USBs.\n\n\n\n\n\n\nOnly the journalist should have access to the \noffline Tails USB password\n, though during the initial installation, often the admin will create their own password to facilitate setup and then the journalist can change it afterwards.\n\n\n\n\n\n\nUnlike many of the other passphrases for SecureDrop, the persistence volume passwords must be remembered by the admin and journalist. So after creating each passphrase, you should write it down until you can memorize it, and then destroy the paper you wrote it on.\n\n\n\n\n\n\nNOTE: Make sure that you never use the \noffline Tails USB\n on a computer connected to the Internet or a local network. This USB will be used on the air-gapped \nSecure Viewing Station\n only.", 
            "title": "Set up Tails USB Sticks"
        }, 
        {
            "location": "/installation/setup_tails_usb_sticks/#set-up-tails-usb-sticks", 
            "text": "Before installing the SecureDrop application, the first thing you need to do is set up several USB sticks with the Tails operating system. Tails is a privacy-enhancing live operating system that runs on removable media, such as a DVD or a USB stick. It sends all your Internet traffic through Tor, does not touch your computer's hard drive, and securely wipes unsaved work on shutdown.  You'll need to install Tails onto at least four USB sticks and enable persistent storage, which is an encrypted volume that allows you to save information even when Tails securely wipes everything else:    offline Tails USB    admin Tails USB    journalist Tails USB .    long-term storage Tails USB    You will need one Tails USB for each journalist, so if you have more than one journalist checking SecureDrop, you'll need to create even more. It's a good idea to label or color-code these in order to tell them apart.", 
            "title": "Set up Tails USB sticks"
        }, 
        {
            "location": "/installation/setup_tails_usb_sticks/#installing-tails", 
            "text": "We recommend creating an initial Tails Live DVD or USB, and then using that to create additional Tails Live USBs with the  Tails Installer , a special program that is only available from inside Tails.  You will only be able to create persistent volumes on USB sticks that had Tails installed via the Tails Installer .  The  Tails website  has detailed and up-to-date instructions on how to download and verify Tails, and how to create a bootable Tails USB stick. Follow the instructions at these links and then return to this page:   Download and verify the Tails .iso  Install onto a USB stick or SD card   Note that this process will take some time because once you have one copy of Tails, you have to create each additional Tails USB, shut down, and boot into each one to complete the next step.  Also, you should be aware that Tails doesn't always completely shut down and reboot properly when you click \"restart\", so if you notice a signficant delay, you may have to manually power off and restart your computer for it to work properly.", 
            "title": "Installing Tails"
        }, 
        {
            "location": "/installation/setup_tails_usb_sticks/#enabling-persistence-storage-on-tails", 
            "text": "Creating an encrypted persistent volume will allow you to securely save information and settings in the free space that is left on your Tails USB. This information will remain available to you even if you reboot Tails. (Tails securely erases all other data on every shutdown.)  You will need to create a persistent storage on each Tails USB, with a unique password for each.  Please use the instructions on the  Tails website  to make the persistent volume on each Tails USB stick you create.  When creating the persistence volume, you will be asked to select from a list of features, such as 'Personal Data'. We recommend that you enable  all  features.  Some other things to keep in mind:    You will want to create a persistent volume for all three main Tails USBs: the  offline Tails USB , the  admin Tails USB , and the  journalist Tails USB .    The admin and the journalist should create separate passwords for their own USBs.    Only the journalist should have access to the  offline Tails USB password , though during the initial installation, often the admin will create their own password to facilitate setup and then the journalist can change it afterwards.    Unlike many of the other passphrases for SecureDrop, the persistence volume passwords must be remembered by the admin and journalist. So after creating each passphrase, you should write it down until you can memorize it, and then destroy the paper you wrote it on.    NOTE: Make sure that you never use the  offline Tails USB  on a computer connected to the Internet or a local network. This USB will be used on the air-gapped  Secure Viewing Station  only.", 
            "title": "Enabling Persistence Storage on Tails"
        }, 
        {
            "location": "/installation/setup_svs/", 
            "text": "Set up the Secure Viewing Station\n\n\nThe \nSecure Viewing Station (SVS)\n is a computer that is kept offline and only ever used together with the \noffline Tails USB\n. Since this machine will never touch the Internet or run an operating system other than Tails on a USB, it does not need a hard drive or network device.\n\n\nWe recommend that you physically remove the hard drive and networking cards, such as wireless and Bluetooth, from this machine. If you are unable to remove a card, place tape over the port or otherwise physically disable it. If you have questions about using an older machine for this purpose, please contact us at securedrop@freedom.press.\n\n\nAt this point, you should have created a Tails Live USB with persistence on the \noffline Tails USB\n. If you haven't, follow the instructions in the first half of our \nTails Guide\n.\n\n\nBoot your \noffline Tails USB\n on the \nSecure Viewing Station\n.\n\n\nAfter it loads, you should see a \"Welcome to Tails\" screen with two options. Select \nYes\n to enable the persistent volume and enter your password, but do NOT click Login yet. Under 'More Options,' select \nYes\n and click \nForward\n.\n\n\nEnter an \nAdministration password\n for use with this specific Tails session and click \nLogin\n. (NOTE: the \nAdministration password\n is a one-time password. It will reset every time you shut down Tails.)\n\n\nCreate a GPG key for the SecureDrop application\n\n\nWhen a document or message is submitted to SecureDrop by a source, it is automatically encrypted with the SecureDrop Application GPG key. You will need to create that key now before you continue with the installation.\n\n\nAfter booting up Tails, you will need to manually set the system time before you create the GPG key. To set the system time, right-click the time in the top menu bar and select \nAdjust Date \n Time.\n\n\nClick \nUnlock\n in the top-right corner of the dialog window and enter your \nAdministration password.\n Set the correct time, region and city.\n\n\nThen click \nLock\n, enter your password one more time and wait for the system time to update in the top panel.\n\n\nOnce that's done, follow the steps below to create a GPG key.\n\n\n\n\nOpen a terminal \n and run \ngpg --gen-key\n\n\nWhen it says, \nPlease select what kind of key you want\n, choose \n(1) RSA and RSA (default)\n\n\nWhen it asks, \nWhat keysize do you want?\n type \n4096\n\n\nWhen it asks, \nKey is valid for?\n press Enter to keep the default\n\n\nWhen it asks, \nIs this correct?\n verify that you've entered everything correctly so far, and type \ny\n\n\nFor \nReal name\n type: \nSecureDrop\n\n\nFor \nEmail address\n, leave the field blank and press Enter\n\n\nFor \nComment\n type \n[Your Organization's Name] SecureDrop Application GPG Key\n\n\nVerify that everything is correct so far, and type \no\n for \n(O)kay\n\n\nIt will pop up a box asking you to type a passphrase, but it's safe to click okay without typing one (since your persistent volume is encrypted, this GPG key is already protected)\n\n\nWait for your GPG key to finish generating\n\n\n\n\nTo manage GPG keys using the graphical interface (a program called Seahorse), click the clipboard icon \n in the top right corner and select \"Manage Keys\". You should see the key that you just generated under \"GnuPG Keys.\"\n\n\n\n\nSelect the key you just generated and click \"File\" then \"Export\". Save the key to the \nTransfer Device\n as \nSecureDrop.pgp\n, and make sure you change the file type from \"PGP keys\" to \"Armored PGP keys\" which can be switched right above the 'Export' button. Click the 'Export' button after switching to armored keys.\n\n\nNOTE: This is the public key only.\n\n\n\n\n\n\nYou'll need to verify the fingerprint for this new key during the \nApp Server\n installation. Double-click on the newly generated key and change to the \nDetails\n tab. Write down the 40 hexadecimal digits under \nFingerprint\n. (Your GPG key fingerprint will be different than what's in this photo.)\n\n\n\n\nImport GPG keys for journalists with access to SecureDrop\n\n\nWhile working on a story, journalists may need to transfer some documents or notes from the \nSecure Viewing Station\n to the journalist's work computer on the corporate network. To do this, the journalists should re-encrypt them with their own keys. If a journalist does not already have a personal GPG key, he or she can follow the same steps above to create one. The journalist should store the private key somewhere safe; the public key should be stored on the \nSecure Viewing Station\n.\n\n\nIf the journalist does have a key, transfer their public key from wherever it is located to the \nSecure Viewing Station\n, using the \nTransfer Device\n. Open the file manager \n and double-click on the public key to import it. If the public key is not importing, rename the file to end in \".asc\" and try again.\n\n\n\n\nAt this point, you are done with the \nSecure Viewing Station\n for now. You can shut down Tails, grab the \nadmin Tails USB\n and move over to your regular workstation.", 
            "title": "Set up Secure Viewing Station"
        }, 
        {
            "location": "/installation/setup_svs/#set-up-the-secure-viewing-station", 
            "text": "The  Secure Viewing Station (SVS)  is a computer that is kept offline and only ever used together with the  offline Tails USB . Since this machine will never touch the Internet or run an operating system other than Tails on a USB, it does not need a hard drive or network device.  We recommend that you physically remove the hard drive and networking cards, such as wireless and Bluetooth, from this machine. If you are unable to remove a card, place tape over the port or otherwise physically disable it. If you have questions about using an older machine for this purpose, please contact us at securedrop@freedom.press.  At this point, you should have created a Tails Live USB with persistence on the  offline Tails USB . If you haven't, follow the instructions in the first half of our  Tails Guide .  Boot your  offline Tails USB  on the  Secure Viewing Station .  After it loads, you should see a \"Welcome to Tails\" screen with two options. Select  Yes  to enable the persistent volume and enter your password, but do NOT click Login yet. Under 'More Options,' select  Yes  and click  Forward .  Enter an  Administration password  for use with this specific Tails session and click  Login . (NOTE: the  Administration password  is a one-time password. It will reset every time you shut down Tails.)", 
            "title": "Set up the Secure Viewing Station"
        }, 
        {
            "location": "/installation/setup_svs/#create-a-gpg-key-for-the-securedrop-application", 
            "text": "When a document or message is submitted to SecureDrop by a source, it is automatically encrypted with the SecureDrop Application GPG key. You will need to create that key now before you continue with the installation.  After booting up Tails, you will need to manually set the system time before you create the GPG key. To set the system time, right-click the time in the top menu bar and select  Adjust Date   Time.  Click  Unlock  in the top-right corner of the dialog window and enter your  Administration password.  Set the correct time, region and city.  Then click  Lock , enter your password one more time and wait for the system time to update in the top panel.  Once that's done, follow the steps below to create a GPG key.   Open a terminal   and run  gpg --gen-key  When it says,  Please select what kind of key you want , choose  (1) RSA and RSA (default)  When it asks,  What keysize do you want?  type  4096  When it asks,  Key is valid for?  press Enter to keep the default  When it asks,  Is this correct?  verify that you've entered everything correctly so far, and type  y  For  Real name  type:  SecureDrop  For  Email address , leave the field blank and press Enter  For  Comment  type  [Your Organization's Name] SecureDrop Application GPG Key  Verify that everything is correct so far, and type  o  for  (O)kay  It will pop up a box asking you to type a passphrase, but it's safe to click okay without typing one (since your persistent volume is encrypted, this GPG key is already protected)  Wait for your GPG key to finish generating   To manage GPG keys using the graphical interface (a program called Seahorse), click the clipboard icon   in the top right corner and select \"Manage Keys\". You should see the key that you just generated under \"GnuPG Keys.\"   Select the key you just generated and click \"File\" then \"Export\". Save the key to the  Transfer Device  as  SecureDrop.pgp , and make sure you change the file type from \"PGP keys\" to \"Armored PGP keys\" which can be switched right above the 'Export' button. Click the 'Export' button after switching to armored keys.  NOTE: This is the public key only.    You'll need to verify the fingerprint for this new key during the  App Server  installation. Double-click on the newly generated key and change to the  Details  tab. Write down the 40 hexadecimal digits under  Fingerprint . (Your GPG key fingerprint will be different than what's in this photo.)", 
            "title": "Create a GPG key for the SecureDrop application"
        }, 
        {
            "location": "/installation/setup_svs/#import-gpg-keys-for-journalists-with-access-to-securedrop", 
            "text": "While working on a story, journalists may need to transfer some documents or notes from the  Secure Viewing Station  to the journalist's work computer on the corporate network. To do this, the journalists should re-encrypt them with their own keys. If a journalist does not already have a personal GPG key, he or she can follow the same steps above to create one. The journalist should store the private key somewhere safe; the public key should be stored on the  Secure Viewing Station .  If the journalist does have a key, transfer their public key from wherever it is located to the  Secure Viewing Station , using the  Transfer Device . Open the file manager   and double-click on the public key to import it. If the public key is not importing, rename the file to end in \".asc\" and try again.   At this point, you are done with the  Secure Viewing Station  for now. You can shut down Tails, grab the  admin Tails USB  and move over to your regular workstation.", 
            "title": "Import GPG keys for journalists with access to SecureDrop"
        }, 
        {
            "location": "/installation/setup_admin_workstation/", 
            "text": "Set up Admin Tails USB and Workstation\n\n\nEarlier, you should have created the \nadmin Tails USB\n along with a persistence volume for it. Now, we are going to add a couple more features to the \nadmin Tails USB\n to facilitate SecureDrop's setup.\n\n\nIf you have not switched to and booted the \nadmin Tails USB\n on your regular workstation, do so now.\n\n\nStart Tails and enable the persistent volume\n\n\nAfter you boot the \nadmin Tails USB\n on your normal workstation, you should see a \nWelcome to Tails\n screen with two options. Select \nYes\n to enable the persistent volume and enter your password, but do NOT click Login yet. Under 'More Options,\" select \nYes\n and click \nForward\n.\n\n\nEnter an \nAdministration password\n for use with this specific Tails session and click \nLogin\n. (NOTE: the \nAdministration password\n is a one-time password. It will reset every time you shut down Tails.)\n\n\nAfter Tails is fully booted, make sure you're connected to the Internet \n and that the Tor's Vidalia indicator onion \n is green, using the icons in the upper right corner.\n\n\nDownload the SecureDrop repository\n\n\nThe rest of the SecureDrop-specific configuration is assisted by files stored in the SecureDrop Git repository. We're going to be using this again once SecureDrop is installed, but you should download it now. To get started, open a terminal \n. You will use this Terminal throughout the rest of the install process.\n\n\nStart by running the following commands to download the git repository.\n\n\nNOTE: Since the repository is fairly large and Tor can be slow, this may take a few minutes.\n\n\ncd ~/Persistent\ngit clone https://github.com/freedomofpress/securedrop.git\n\n\n\n\nBefore proceeding, verify the signed git tag for this release.\n\n\nFirst, download the \nFreedom of the Press Foundation Master Signing Key\n and verify the fingerprint.\n\n\ngpg --keyserver pool.sks-keyservers.net --recv-key B89A29DB2128160B8E4B1B4CBADDE0C7FC9F6818\ngpg --fingerprint B89A29DB2128160B8E4B1B4CBADDE0C7FC9F6818\n\n\n\nThe Freedom of the Press Foundation Master Signing Key should have a fingerprint of \"B89A 29DB 2128 160B 8E4B  1B4C BADD E0C7 FC9F 6818\". If the fingerprint does not match, fingerprint verification has failed and you \nshould not\n proceed with the installation. If this happens, please contact us at securedrop@freedom.press.\n\n\nVerify that the current release tag was signed with the master signing key.\n\n\ncd securedrop/\ngit checkout 0.3.4\ngit tag -v 0.3.4\n\n\n\nYou should see 'Good signature from \"Freedom of the Press Foundation Master Signing Key\"' in the output of \ngit tag\n. If you do not, signature verification has failed and you \nshould not\n proceed with the installation. If this happens, please contact us at securedrop@freedom.press.\n\n\nPassphrase Database\n\n\nWe provide a KeePassX password database template to make it easier for admins and journalists to generate strong, unique passphrases and store them securely. Once you have set up Tails with persistence and have cloned the repo, you can set up your personal password database using this template.\n\n\nYou can find the template in \n/Persistent/securedrop/tails_files/securedrop-keepassx.xml\n within the SecureDrop repository. Note that you will not be able to access your passwords if you forget the master password or the location of the key file used to protect the database.\n\n\nTo use the template:\n\n\n\n\nOpen the KeePassX program \n which is already installed on Tails\n\n\nSelect \nFile\n, \nImport from...\n, and \nKeePassX XML (*.xml)\n\n\nNavigate to the location of \nsecuredrop-keepassx.xml\n, select it, and click \nOpen\n\n\nSet a strong master password to protect the password database (you will have to write this down/memorize it)\n\n\nClick \nFile\n and \nSave Database As\n\n\nSave the database in the Persistent folder", 
            "title": "Set up Admin Workstation"
        }, 
        {
            "location": "/installation/setup_admin_workstation/#set-up-admin-tails-usb-and-workstation", 
            "text": "Earlier, you should have created the  admin Tails USB  along with a persistence volume for it. Now, we are going to add a couple more features to the  admin Tails USB  to facilitate SecureDrop's setup.  If you have not switched to and booted the  admin Tails USB  on your regular workstation, do so now.", 
            "title": "Set up Admin Tails USB and Workstation"
        }, 
        {
            "location": "/installation/setup_admin_workstation/#start-tails-and-enable-the-persistent-volume", 
            "text": "After you boot the  admin Tails USB  on your normal workstation, you should see a  Welcome to Tails  screen with two options. Select  Yes  to enable the persistent volume and enter your password, but do NOT click Login yet. Under 'More Options,\" select  Yes  and click  Forward .  Enter an  Administration password  for use with this specific Tails session and click  Login . (NOTE: the  Administration password  is a one-time password. It will reset every time you shut down Tails.)  After Tails is fully booted, make sure you're connected to the Internet   and that the Tor's Vidalia indicator onion   is green, using the icons in the upper right corner.", 
            "title": "Start Tails and enable the persistent volume"
        }, 
        {
            "location": "/installation/setup_admin_workstation/#download-the-securedrop-repository", 
            "text": "The rest of the SecureDrop-specific configuration is assisted by files stored in the SecureDrop Git repository. We're going to be using this again once SecureDrop is installed, but you should download it now. To get started, open a terminal  . You will use this Terminal throughout the rest of the install process.  Start by running the following commands to download the git repository.  NOTE: Since the repository is fairly large and Tor can be slow, this may take a few minutes.  cd ~/Persistent\ngit clone https://github.com/freedomofpress/securedrop.git  Before proceeding, verify the signed git tag for this release.  First, download the  Freedom of the Press Foundation Master Signing Key  and verify the fingerprint.  gpg --keyserver pool.sks-keyservers.net --recv-key B89A29DB2128160B8E4B1B4CBADDE0C7FC9F6818\ngpg --fingerprint B89A29DB2128160B8E4B1B4CBADDE0C7FC9F6818  The Freedom of the Press Foundation Master Signing Key should have a fingerprint of \"B89A 29DB 2128 160B 8E4B  1B4C BADD E0C7 FC9F 6818\". If the fingerprint does not match, fingerprint verification has failed and you  should not  proceed with the installation. If this happens, please contact us at securedrop@freedom.press.  Verify that the current release tag was signed with the master signing key.  cd securedrop/\ngit checkout 0.3.4\ngit tag -v 0.3.4  You should see 'Good signature from \"Freedom of the Press Foundation Master Signing Key\"' in the output of  git tag . If you do not, signature verification has failed and you  should not  proceed with the installation. If this happens, please contact us at securedrop@freedom.press.", 
            "title": "Download the SecureDrop repository"
        }, 
        {
            "location": "/installation/setup_admin_workstation/#passphrase-database", 
            "text": "We provide a KeePassX password database template to make it easier for admins and journalists to generate strong, unique passphrases and store them securely. Once you have set up Tails with persistence and have cloned the repo, you can set up your personal password database using this template.  You can find the template in  /Persistent/securedrop/tails_files/securedrop-keepassx.xml  within the SecureDrop repository. Note that you will not be able to access your passwords if you forget the master password or the location of the key file used to protect the database.  To use the template:   Open the KeePassX program   which is already installed on Tails  Select  File ,  Import from... , and  KeePassX XML (*.xml)  Navigate to the location of  securedrop-keepassx.xml , select it, and click  Open  Set a strong master password to protect the password database (you will have to write this down/memorize it)  Click  File  and  Save Database As  Save the database in the Persistent folder", 
            "title": "Passphrase Database"
        }, 
        {
            "location": "/installation/network_firewall/", 
            "text": "Network Firewall Setup Guide\n\n\nUnfortunately, due to the wide variety of firewalls that may be used, we do not provide specific instructions to cover every type or variation in software or hardware.\n\n\nThis guide will focus on pfSense, and assumes your firewall has at least three interfaces: WAN, LAN, and OPT1. These are the default interfaces on the recommended Netgate firewall, and it should be easy to configure any pfSense firewall with 3 or more NICs this way.\n\n\nTo avoid duplication, this guide refers to sections of the \npfSense Guide\n, so you will want to have that handy.\n\n\nBefore you begin\n\n\nFirst, consider how the firewall will be connected to the Internet. You need to be able to provision two unique subnets for SecureDrop: the app subnet and the monitor subnet. There are a number of possible ways to configure this, and the best way will depend on the network that you are connecting to.\n\n\nNote that many firewalls, including the recommended Netgate pfSense, automatically set up the LAN interface on 192.168.1.1/24. The \n/24\n subnet is a very common choice for home routers. If you are connecting the firewall to a router with the same subnet (common in a small office, home, or testing environment), you will probably be unable to connect to the network at first. However, you will be able to connect from the LAN to the pfSense WebGUI configuration wizard, and from there you will be able to configure the network so it is working correctly.\n\n\nThe app subnet will need at least three IP addresses: one for the gateway, one for the app server, and one for the admin workstation. The monitor subnet will need at least two IP addresses: one for the gateway and one for the monitor server.\n\n\nWe assume that you have examined your network configuration and have selected two appropriate subnets. We will refer to your chosen subnets as \"App Subnet\" and \"Monitor Subnet\" throughout the rest of the documentation. For the examples in the documentation, we have chosen:\n\n\n\n\nApp Subnet: 10.20.1.0/24\n\n\nApp Gateway: 10.20.1.1\n\n\nApp Server: 10.20.1.2\n\n\n\n\nAdmin Workstation: 10.20.1.3\n\n\n\n\n\n\nMonitor Subnet: 10.20.2.0/24\n\n\n\n\nMonitor Gateway: 10.20.2.1\n\n\nMonitor Server: 10.20.2.2\n\n\n\n\nInitial Setup\n\n\nUnpack the firewall, connect power, and power on.\n\n\nAssign interfaces\n\n\nSection 3.2.3, \"Assigning Interfaces\", of the pfSense Guide. Some firewalls, like the Netgate recommended in the Hardware Guide, have this set up already, in which case you can skip this step.\n\n\nInitial configuration\n\n\nWe will use the pfSense WebGUI to do the initial configuration of the network firewall.\n\n\nConnect to the pfSense WebGUI\n\n\n\n\n\n\nBoot the Admin Workstation into Tails from the Admin Live USB.\n\n\n\n\n\n\nConnect the Admin Workstation to the switch on the LAN.\n\n\n\n\n\n\nLaunch the \nUnsafe Browser\n, \nApplications \u2192 Internet \u2192 Unsafe Browser\n.\n\n\n\n\n\n\n\n\n1. Note that the *Unsafe Browser* is, as the name suggests, **unsafe** (its\n   traffic is not routed through Tor). However, it is the only option in\n   this context because Tails [intentionally][tails_issue_7976] disables\n   LAN access in the *Tor Browser*.\n\n2. A dialog will ask \"Do you really want to launch the Unsafe Browser?\". Click **Launch**.\n\n   ![You really want to launch the Unsafe Browser](../images/firewall/unsafe_browser_confirmation_dialog.png)\n\n3. You will see a pop-up notification that says \"Starting the Unsafe Browser...\"\n\n   ![Pop-up notification](../images/firewall/starting_the_unsafe_browser.png)\n\n4. After a few seconds, the Unsafe Browser should launch. The window has a\n   bright red border to remind you to be careful when using it. You should\n   close it once you're done configuring the firewall and use the Tor\n   Browser for any other web browsing you might do on the Admin\n   Workstation.\n\n   ![Unsafe Browser Homepage](../images/firewall/unsafe_browser.png)\n\n\n\n\n\n\n\nNavigate to the pfSense GUI in the \nUnsafe Browser\n: \nhttps://192.168.1.1\n\n\n\n\n\n\nThe firewall uses a self-signed certificate, so you will see a \"This Connection Is Untrusted\" warning when you connect. This is expected (see Section 4.5.6 of the pfSense Guide). You can safely continue by clicking \"I Understand the Risks\", \"Add Exception...\", and \"Confirm Security Exception.\"\n\n\n\n\n\n\nYou should see the login page for the pfSense GUI. Log in with the default username and password (admin / pfsense).\n\n\n\n\n\n\nSetup Wizard\n\n\nIf you're setting up a brand new (or recently factory reset) router, pfSense will start you on the Setup Wizard. Click next, then next again. Don't sign up for a pfSense Gold subscription.\n\n\nOn the \"General Information\" page, we recommend leaving your hostname as the default (pfSense). There is no relevant domain for SecureDrop, so we recommend setting this to \"securedrop.local\" or something similar. Use whatever DNS servers you wish. If you don't know what DNS servers to use, we recommend using Google's DNS servers: \n8.8.8.8\n and \n8.8.4.4\n. Click Next.\n\n\nLeave the defaults for \"Time Server Information\". Click Next.\n\n\nOn \"Configure WAN Interface\", enter the appropriate configuration for your network. Consult your local sysadmin if you are unsure what to enter here. For many environments, the default of DHCP will work and the rest of the fields can be left blank. Click Next.\n\n\nFor \"Configure LAN Interface\", set the IP address and subnet mask of the Application Subnet for the LAN interface.  Be sure that the CIDR prefix correctly corresponds to your subnet mask-- pfsense should automatically calculate this for you, but you should always check. In most cases, your CIDR prefix should be \n/24\n.  Click Next.\n\n\nSet a strong admin password. We recommend generating a random password with KeePassX, and saving it in the Tails Persistent folder using the provided KeePassX database template. Click Next.\n\n\nClick Reload.\n\n\nIf you changed the LAN Interface settings, you will no longer be able to connect after reloading the firewall and the next request will probably time out. This is not a problem - the firewall has reloaded and is working correctly. To connect to the new LAN interface, unplug and reconnect your network cable to have a new network address assigned to you via DHCP. Note that if you used a subnet with fewer addresses than \n/24\n, the default DHCP configuration in pfSense may not work. In this case, you should assign the Admin Workstation a static IP address that is known to be in the subnet to continue.\n\n\nNow the WebGUI will be available on the App Gateway address. Navigate to \nhttps://\nApp Gateway IP\n in the \nUnsafe Browser\n, and do the same dance as before to log in to the pfSense WebGUI and continue configuring the firewall.\n\n\nConnect Interfaces and Test Connectivity\n\n\nNow that the initial configuration is completed, you can connect the WAN port without potentially conflicting with the default LAN settings (as explained earlier). Connect the WAN port to the external network. You can watch the WAN entry in the Interfaces table on the pfSense WebGUI homepage to see as it changes from down (red arrow pointing down) to up (green arrow pointing up). The WAN's IP address will be shown once it comes up.\n\n\nFinally, test connectivity to make sure you are able to connect to the Internet through the WAN. The easiest way to do this is to use ping (Diagnostics \u2192 Ping in the WebGUI).\n\n\nSecureDrop-specific Configuration\n\n\nSecureDrop uses the firewall to achieve two primary goals:\n\n\n\n\nIsolating SecureDrop from the existing network, which may be compromised (especially if it is a venerable network in a large organization like a newsroom).\n\n\nIsolating the app and the monitor servers from each other as much as possible, to reduce attack surface.\n\n\n\n\nIn order to use the firewall to isolate the app and monitor servers from each other, we need to connect them to separate interfaces, and then set up firewall rules that allow them to communicate.\n\n\nSet up OPT1\n\n\nWe set up the LAN interface during the initial configuration. We now need to set up the OPT1 interface. Start by connecting the Monitor Server to the OPT1 port. Then use the WebGUI to configure the OPT1 interface. Go to \nInterfaces \u2192 OPT1\n, and check the box to \"Enable Interface\". Use these settings:\n\n\n\n\nIPv4 Configuration Type: Static IPv4\n\n\nIPv4 Address: Monitor Gateway\n\n\n\n\nOnce again, be sure that the CIDR prefix correctly corresponds to your subnet mask (and should be \n/24\n in most cases). Pfsense should automatically calculate this for you, but you should always check.  Leave everything else as the default. Save and Apply Changes.\n\n\nDisable DHCP on the LAN\n\n\npfSense runs a DHCP server on the LAN interface by default. At this stage in the documentation, the Admin Workstation has an IP address assigned via that DHCP server. You can easily check your current IP address by \nright-clicking\n the networking icon (a blue cable going in to a white jack) in the top right of the menu bar, and choosing \"Connection Information\".\n\n\n\n\nIn order to tighten the firewall rules as much as possible, we recommend disabling the DHCP server and assigning a static IP address to the Admin Workstation instead.\n\n\nDisabling DHCP\n\n\nTo disable DHCP, navigate to \"Services \u2192 DHCP Server\". Uncheck the box to \"Enable DHCP servers on LAN interface\", scroll down, and click the Save button.\n\n\nAssigning a static IP address to the Admin Workstation\n\n\nNow you will need to assign a static IP to the Admin Workstation. Use the \nAdmin Workstation IP\n that you selected earlier, and make sure you use the same IP when setting up the firewall rules later.\n\n\nStart by \nright-clicking\n the networking icon in the top right of the menu bar, and choosing \"Edit Connections...\".\n\n\n\n\nSelect \"Wired connection\" from the list and click the \"Edit...\" button.\n\n\n\n\nChange to the \"IPv4 Settings\" tab. Change \"Method:\" from \"Automatic (DHCP)\" to \"Manual\". Click the Add button and fill in the static networking information for the Admin Workstation.\n\n\n\n\nClick \"Save...\". If the network does not come up within 15 seconds or so, try disconnecting and reconnecting your network cable to trigger the change. You will need you have succeeded in connecting with your new static IP when you see a pop-up notification that says \"Tor is ready. You can now access the Internet\".\n\n\nSet up the network firewall rules\n\n\nSince there are a variety of firewalls with different configuration interfaces and underlying sets of software, we cannot provide a set of network firewall rules to match every use case. Instead, we provide a firewall rules template in \ninstall_files/network_firewall/rules\n. This template is written in the iptables format, which you will need to manually translate for your firewall and preferred configuration method.\n\n\nFor pfSense, see Section 6 of the pfSense Guide for information on setting up firewall rules through the WebGUI. Here are some tips on interpreting the rules template for pfSense:\n\n\n\n\nCreate aliases for the repeated values (IPs and ports).\n\n\npfSense is a stateful firewall, which means that you don't need corresponding rules for the iptables rules that allow incoming traffic in response to outgoing traffic (\n--state ESTABLISHED,RELATED\n). pfSense does this for you automatically.\n\n\n\n\nYou should create the rules on the interface where the traffic originates from. The easy way to do this is look at the sources (\n-s\n) of each of the iptables rules, and create that rule on the corresponding interface:\n\n\n\n\n\n\n-s APP_IP\n \u2192 \nLAN\n\n\n\n\n\n\n-s MONITOR_IP\n \u2192 \nOPT1\n\n\n\n\n\n\nMake sure you delete the default \"allow all\" rule on the LAN interface. Leave the \"Anti-Lockout\" rule enabled.\n\n\n\n\nAny traffic that is not explicitly passed is logged and dropped by default in pfSense, so you don't need to add explicit rules (\nLOGNDROP\n) for that.\n\n\nSince some of the rules are almost identical except for whether they allow traffic from the App Server or the Monitor Server (\n-s MONITOR_IP,APP_IP\n), you can use the \"add a new rule based on this one\" button to save time creating a copy of the rule on the other interface.\n\n\nIf you are having trouble with connections, the firewall logs can be very helpful. You can find them in the WebGUI in \nStatus \u2192 System Logs \u2192 Firewall\n.\n\n\n\n\nWe recognize that this process is cumbersome and may be difficult for people inexperienced in managing networks to understand. We are working on automating much of this for the next SecureDrop release.  If you're unsure how to set up your firewall, use the screenshots in the next section as your guide.\n\n\nExample Screenshots\n\n\nHere are some example screenshots of a working pfSense firewall configuration.\n\n\n\n\n\n\n\n\n\n\nOnce you've set up the firewall, \nexit the Unsafe Browser\n, and continue with the instructions in the \nInstall Guide\n.", 
            "title": "Network Firewall"
        }, 
        {
            "location": "/installation/network_firewall/#network-firewall-setup-guide", 
            "text": "Unfortunately, due to the wide variety of firewalls that may be used, we do not provide specific instructions to cover every type or variation in software or hardware.  This guide will focus on pfSense, and assumes your firewall has at least three interfaces: WAN, LAN, and OPT1. These are the default interfaces on the recommended Netgate firewall, and it should be easy to configure any pfSense firewall with 3 or more NICs this way.  To avoid duplication, this guide refers to sections of the  pfSense Guide , so you will want to have that handy.", 
            "title": "Network Firewall Setup Guide"
        }, 
        {
            "location": "/installation/network_firewall/#before-you-begin", 
            "text": "First, consider how the firewall will be connected to the Internet. You need to be able to provision two unique subnets for SecureDrop: the app subnet and the monitor subnet. There are a number of possible ways to configure this, and the best way will depend on the network that you are connecting to.  Note that many firewalls, including the recommended Netgate pfSense, automatically set up the LAN interface on 192.168.1.1/24. The  /24  subnet is a very common choice for home routers. If you are connecting the firewall to a router with the same subnet (common in a small office, home, or testing environment), you will probably be unable to connect to the network at first. However, you will be able to connect from the LAN to the pfSense WebGUI configuration wizard, and from there you will be able to configure the network so it is working correctly.  The app subnet will need at least three IP addresses: one for the gateway, one for the app server, and one for the admin workstation. The monitor subnet will need at least two IP addresses: one for the gateway and one for the monitor server.  We assume that you have examined your network configuration and have selected two appropriate subnets. We will refer to your chosen subnets as \"App Subnet\" and \"Monitor Subnet\" throughout the rest of the documentation. For the examples in the documentation, we have chosen:   App Subnet: 10.20.1.0/24  App Gateway: 10.20.1.1  App Server: 10.20.1.2   Admin Workstation: 10.20.1.3    Monitor Subnet: 10.20.2.0/24   Monitor Gateway: 10.20.2.1  Monitor Server: 10.20.2.2", 
            "title": "Before you begin"
        }, 
        {
            "location": "/installation/network_firewall/#initial-setup", 
            "text": "Unpack the firewall, connect power, and power on.  Assign interfaces  Section 3.2.3, \"Assigning Interfaces\", of the pfSense Guide. Some firewalls, like the Netgate recommended in the Hardware Guide, have this set up already, in which case you can skip this step.  Initial configuration  We will use the pfSense WebGUI to do the initial configuration of the network firewall.  Connect to the pfSense WebGUI    Boot the Admin Workstation into Tails from the Admin Live USB.    Connect the Admin Workstation to the switch on the LAN.    Launch the  Unsafe Browser ,  Applications \u2192 Internet \u2192 Unsafe Browser .     1. Note that the *Unsafe Browser* is, as the name suggests, **unsafe** (its\n   traffic is not routed through Tor). However, it is the only option in\n   this context because Tails [intentionally][tails_issue_7976] disables\n   LAN access in the *Tor Browser*.\n\n2. A dialog will ask \"Do you really want to launch the Unsafe Browser?\". Click **Launch**.\n\n   ![You really want to launch the Unsafe Browser](../images/firewall/unsafe_browser_confirmation_dialog.png)\n\n3. You will see a pop-up notification that says \"Starting the Unsafe Browser...\"\n\n   ![Pop-up notification](../images/firewall/starting_the_unsafe_browser.png)\n\n4. After a few seconds, the Unsafe Browser should launch. The window has a\n   bright red border to remind you to be careful when using it. You should\n   close it once you're done configuring the firewall and use the Tor\n   Browser for any other web browsing you might do on the Admin\n   Workstation.\n\n   ![Unsafe Browser Homepage](../images/firewall/unsafe_browser.png)    Navigate to the pfSense GUI in the  Unsafe Browser :  https://192.168.1.1    The firewall uses a self-signed certificate, so you will see a \"This Connection Is Untrusted\" warning when you connect. This is expected (see Section 4.5.6 of the pfSense Guide). You can safely continue by clicking \"I Understand the Risks\", \"Add Exception...\", and \"Confirm Security Exception.\"    You should see the login page for the pfSense GUI. Log in with the default username and password (admin / pfsense).    Setup Wizard  If you're setting up a brand new (or recently factory reset) router, pfSense will start you on the Setup Wizard. Click next, then next again. Don't sign up for a pfSense Gold subscription.  On the \"General Information\" page, we recommend leaving your hostname as the default (pfSense). There is no relevant domain for SecureDrop, so we recommend setting this to \"securedrop.local\" or something similar. Use whatever DNS servers you wish. If you don't know what DNS servers to use, we recommend using Google's DNS servers:  8.8.8.8  and  8.8.4.4 . Click Next.  Leave the defaults for \"Time Server Information\". Click Next.  On \"Configure WAN Interface\", enter the appropriate configuration for your network. Consult your local sysadmin if you are unsure what to enter here. For many environments, the default of DHCP will work and the rest of the fields can be left blank. Click Next.  For \"Configure LAN Interface\", set the IP address and subnet mask of the Application Subnet for the LAN interface.  Be sure that the CIDR prefix correctly corresponds to your subnet mask-- pfsense should automatically calculate this for you, but you should always check. In most cases, your CIDR prefix should be  /24 .  Click Next.  Set a strong admin password. We recommend generating a random password with KeePassX, and saving it in the Tails Persistent folder using the provided KeePassX database template. Click Next.  Click Reload.  If you changed the LAN Interface settings, you will no longer be able to connect after reloading the firewall and the next request will probably time out. This is not a problem - the firewall has reloaded and is working correctly. To connect to the new LAN interface, unplug and reconnect your network cable to have a new network address assigned to you via DHCP. Note that if you used a subnet with fewer addresses than  /24 , the default DHCP configuration in pfSense may not work. In this case, you should assign the Admin Workstation a static IP address that is known to be in the subnet to continue.  Now the WebGUI will be available on the App Gateway address. Navigate to  https:// App Gateway IP  in the  Unsafe Browser , and do the same dance as before to log in to the pfSense WebGUI and continue configuring the firewall.  Connect Interfaces and Test Connectivity  Now that the initial configuration is completed, you can connect the WAN port without potentially conflicting with the default LAN settings (as explained earlier). Connect the WAN port to the external network. You can watch the WAN entry in the Interfaces table on the pfSense WebGUI homepage to see as it changes from down (red arrow pointing down) to up (green arrow pointing up). The WAN's IP address will be shown once it comes up.  Finally, test connectivity to make sure you are able to connect to the Internet through the WAN. The easiest way to do this is to use ping (Diagnostics \u2192 Ping in the WebGUI).", 
            "title": "Initial Setup"
        }, 
        {
            "location": "/installation/network_firewall/#securedrop-specific-configuration", 
            "text": "SecureDrop uses the firewall to achieve two primary goals:   Isolating SecureDrop from the existing network, which may be compromised (especially if it is a venerable network in a large organization like a newsroom).  Isolating the app and the monitor servers from each other as much as possible, to reduce attack surface.   In order to use the firewall to isolate the app and monitor servers from each other, we need to connect them to separate interfaces, and then set up firewall rules that allow them to communicate.  Set up OPT1  We set up the LAN interface during the initial configuration. We now need to set up the OPT1 interface. Start by connecting the Monitor Server to the OPT1 port. Then use the WebGUI to configure the OPT1 interface. Go to  Interfaces \u2192 OPT1 , and check the box to \"Enable Interface\". Use these settings:   IPv4 Configuration Type: Static IPv4  IPv4 Address: Monitor Gateway   Once again, be sure that the CIDR prefix correctly corresponds to your subnet mask (and should be  /24  in most cases). Pfsense should automatically calculate this for you, but you should always check.  Leave everything else as the default. Save and Apply Changes.  Disable DHCP on the LAN  pfSense runs a DHCP server on the LAN interface by default. At this stage in the documentation, the Admin Workstation has an IP address assigned via that DHCP server. You can easily check your current IP address by  right-clicking  the networking icon (a blue cable going in to a white jack) in the top right of the menu bar, and choosing \"Connection Information\".   In order to tighten the firewall rules as much as possible, we recommend disabling the DHCP server and assigning a static IP address to the Admin Workstation instead.  Disabling DHCP  To disable DHCP, navigate to \"Services \u2192 DHCP Server\". Uncheck the box to \"Enable DHCP servers on LAN interface\", scroll down, and click the Save button.  Assigning a static IP address to the Admin Workstation  Now you will need to assign a static IP to the Admin Workstation. Use the  Admin Workstation IP  that you selected earlier, and make sure you use the same IP when setting up the firewall rules later.  Start by  right-clicking  the networking icon in the top right of the menu bar, and choosing \"Edit Connections...\".   Select \"Wired connection\" from the list and click the \"Edit...\" button.   Change to the \"IPv4 Settings\" tab. Change \"Method:\" from \"Automatic (DHCP)\" to \"Manual\". Click the Add button and fill in the static networking information for the Admin Workstation.   Click \"Save...\". If the network does not come up within 15 seconds or so, try disconnecting and reconnecting your network cable to trigger the change. You will need you have succeeded in connecting with your new static IP when you see a pop-up notification that says \"Tor is ready. You can now access the Internet\".  Set up the network firewall rules  Since there are a variety of firewalls with different configuration interfaces and underlying sets of software, we cannot provide a set of network firewall rules to match every use case. Instead, we provide a firewall rules template in  install_files/network_firewall/rules . This template is written in the iptables format, which you will need to manually translate for your firewall and preferred configuration method.  For pfSense, see Section 6 of the pfSense Guide for information on setting up firewall rules through the WebGUI. Here are some tips on interpreting the rules template for pfSense:   Create aliases for the repeated values (IPs and ports).  pfSense is a stateful firewall, which means that you don't need corresponding rules for the iptables rules that allow incoming traffic in response to outgoing traffic ( --state ESTABLISHED,RELATED ). pfSense does this for you automatically.   You should create the rules on the interface where the traffic originates from. The easy way to do this is look at the sources ( -s ) of each of the iptables rules, and create that rule on the corresponding interface:    -s APP_IP  \u2192  LAN    -s MONITOR_IP  \u2192  OPT1    Make sure you delete the default \"allow all\" rule on the LAN interface. Leave the \"Anti-Lockout\" rule enabled.   Any traffic that is not explicitly passed is logged and dropped by default in pfSense, so you don't need to add explicit rules ( LOGNDROP ) for that.  Since some of the rules are almost identical except for whether they allow traffic from the App Server or the Monitor Server ( -s MONITOR_IP,APP_IP ), you can use the \"add a new rule based on this one\" button to save time creating a copy of the rule on the other interface.  If you are having trouble with connections, the firewall logs can be very helpful. You can find them in the WebGUI in  Status \u2192 System Logs \u2192 Firewall .   We recognize that this process is cumbersome and may be difficult for people inexperienced in managing networks to understand. We are working on automating much of this for the next SecureDrop release.  If you're unsure how to set up your firewall, use the screenshots in the next section as your guide.  Example Screenshots  Here are some example screenshots of a working pfSense firewall configuration.      Once you've set up the firewall,  exit the Unsafe Browser , and continue with the instructions in the  Install Guide .", 
            "title": "SecureDrop-specific Configuration"
        }, 
        {
            "location": "/installation/ubuntu_config/", 
            "text": "Ubuntu Install Guide\n\n\nThe \nApplication Server\n and the \nMonitor Server\n specifically require the 64-bit version of \nUbuntu Server 14.04.2 LTS (Trusty Tahr)\n. The image you want to get is named \nubuntu-14.04.2-server-amd64.iso\n. In order to verify the installation media, you should also download the files named \nSHA256SUMS\n and \nSHA256SUMS.gpg\n.\n\n\nVerify the Ubuntu installation media\n\n\nFirst you should make sure that the Ubuntu image you downloaded hasn't been modified by a malicious attacker by checking its integrity with cryptographic signatures and hashes  \u2014 which might sound complex but it's relatively easy to do. Before you can verify the Ubuntu installation media, you will need to download the associated public key.\n\n\ngpg --keyserver pool.sks-keyservers.net --recv-key C5986B4F1257FFA86632CBA746181433FBB75451\ngpg --fingerprint C5986B4F1257FFA86632CBA746181433FBB75451\n\n\n\n\nThe Ubuntu CD Image Automatic Signing Key should have a fingerprint of \"C598 6B4F 1257 FFA8 6632  CBA7 4618 1433 FBB7 5451\". If the fingerprint does not match what you see here, please get in touch at securedrop@freedom.press.\n\n\nVerify the \nSHA256SUMS\n file and move on to the next step if you see \"Good Signature\" in the output.\n\n\ngpg --verify SHA256SUMS.gpg SHA256SUMS\n\n\n\n\nThe next and final step is to verify the Ubuntu image. If you are using Linux, use the following command.\n\n\nsha256sum -c \n(grep ubuntu-14.04.2-server-amd64.iso SHA256SUMS)\n\n\n\n\nIf you are using OS X, use the command below.\n\n\nshasum -a 256 -c \n(grep ubuntu-14.04.2-server-amd64.iso SHA256SUMS)\n\n\n\n\nIf the final verification step is successful, you should see the following output in your terminal.\n\n\nubuntu-14.04.2-server-amd64.iso: OK\n\n\n\n\nCreate the Ubuntu installation media\n\n\nTo create the Ubuntu installation media, you can either burn the ISO image to a CD-R or create a bootable USB stick (see instructions for doing this on \nOS X\n, \nUbuntu\n and \nWindows\n). As a reliable method we recommend using the \ndd\n command to copy the hybrid ISO directly to a USB drive rather than a utility like UNetbootin which can result in errors. Once you have a CD or USB with an ISO image of Ubuntu on it, you may begin the Ubuntu installation on both SecureDrop servers.\n\n\nStart installation\n\n\nThe steps below are the same for both the \nApplication Server\n and the \nMonitor Server\n.\n\n\nStart by inserting the Ubuntu installation media into the server. Boot or reboot the server with the installation media inserted, and enter the boot menu. To enter the boot menu, you need to press a key as soon as you turn the server on. This key varies depending on server model, but common choices are Esc, F2, F10, and F12. Often, the server will briefly display a message on boot that shows which key should be pressed to enter the boot menu. Once you've entered the boot menu, select the installation media (USB or CD) and press Enter to boot it.\n\n\nAfter booting the Ubuntu image, select \nInstall Ubuntu Server\n.\n\n\n\n\nFollow the steps to select your language, country and keyboard settings. Once that's done, let the installation process continue.\n\n\nConfigure the network manually\n\n\nThe Ubuntu installer will try to autoconfigure networking for the server you are setting up; however, SecureDrop 0.3 requires manual network configuration. You can hit \nCancel\n at any point during network autoconfiguration to be given the choice to \nConfigure the network manually\n.\n\n\nIf network autoconfiguration completes before you can do this, the next window will ask for your hostname. To get back to the choice of configuring the network manually, \nCancel\n the step that asks you to set a hostname and choose the manu option that says \nConfigure the network manually\n instead.\n\n\nFor a production install with a pfSense network firewall in place, the \nApplication Server\n and the \nMonitor Server\n are on separate networks. You may choose your own network settings at this point, but make sure the settings you choose are unique on the firewall's network and remember to propagate your choices through the rest of the installation process.\n\n\nBelow is the configuration you should enter, assuming you used the network settings from the network firewall guide. If you did not, adjust these settings accordingly.\n\n\n\n\nApplication Server\n:\n\n\nServer IP address: 10.20.1.2\n\n\nNetmask (default is fine): 255.255.255.0\n\n\nGateway: 10.20.1.1\n\n\nFor DNS, use Google's name servers: 8.8.8.8\n\n\nHostname: app\n\n\nDomain name should be left blank\n\n\n\n\n\n\nMonitor Server\n:\n\n\nServer IP address: 10.20.2.2\n\n\nNetmask (default is fine): 255.255.255.0\n\n\nGateway: 10.20.2.1\n\n\nFor DNS, use Google's name servers: 8.8.8.8\n\n\nHostname: mon\n\n\nDomain name should be left blank\n\n\n\n\n\n\n\n\nContinue the installation\n\n\nYou can choose whatever username and password you would like. To make things easier later you should use the same username and password on both servers. Make sure to save this password in your admin KeePassX database afterwards.\n\n\nClick 'no' when asked to encrypt the home directory. Then configure your time zone.\n\n\nPartition the disks\n\n\nBefore setting up the server's disk partitions and filesystems in the next step, you will need to decide if you would like to enable \nFull Disk Encryption (FDE)\n. If the servers are ever powered down, FDE will ensure all of the information on them stays private in case they are seized or stolen.\n\n\nWhile FDE can be useful in some cases, we currently do not recommend that you enable it because there are not many scenarios where it will be a net security benefit for SecureDrop operators. Doing so will introduce the need for more passwords and add even more responsibility on the administrator of the system (see \nthis GitHub issue\n for more information).\n\n\nIf you wish to proceed without FDE as recommended, choose the installation option that says \nGuided - use entire disk and set up LVM\n.\n\n\nHowever, if you decide to go ahead and enable FDE, please note that doing so means SecureDrop will become unreachable after an automatic reboot. An administrator will need to be on hand to enter the password in order to decrypt the disks and complete the startup process, which will occur anytime there is an automatic software update, and also several times during SecureDrop's installation. We recommend that the servers be integrated with a monitoring solution that so that you receive an alert when the system becomes unavailable.\n\n\nTo enable FDE, select \nGuided - use entire disk and set up encrypted LVM\n during the disk partitioning step and write the changes to disk. Follow the recommendations as to choosing a strong password. As the administrator, you will be responsible for keeping this passphrase safe. Write it down somewhere and memorize it if you can. \nIf inadvertently lost it could result in total loss of the SecureDrop system.\n\n\nAfter selecting either of those options you may be asked a few questions about overwriting anything currently on the server you are using. Select yes. You do not need an HTTP proxy, so when asked, you can just click continue.\n\n\nFinish the installation\n\n\nWait for the base system to finish installing. When you get to the \nConfigure tasksel\n screen, choose \nNo automatic updates\n. The subsequent SecureDrop installation will include a task that handles regular software updates.\n\n\nWhen you get to the software selection screen, only choose \nOpenSSH server\n by hitting the space bar (Note: hitting enter before the space bar will force you to start the installation process over).\n\n\nOnce \nOpenSSH Server\n is selected, hit \nContinue\n.\n\n\nYou will then have to wait for the packages to finish installing.\n\n\nWhen the packages are finished installing, Ubuntu will automatically install the bootloader (GRUB). If it asks to install the bootloader to the Master Boot Record, choose \nYes\n. When everything is done, reboot.\n\n\nYou can now return to where you left off in the main SecureDrop install guide \nby clicking here\n.", 
            "title": "Server Config"
        }, 
        {
            "location": "/installation/ubuntu_config/#ubuntu-install-guide", 
            "text": "The  Application Server  and the  Monitor Server  specifically require the 64-bit version of  Ubuntu Server 14.04.2 LTS (Trusty Tahr) . The image you want to get is named  ubuntu-14.04.2-server-amd64.iso . In order to verify the installation media, you should also download the files named  SHA256SUMS  and  SHA256SUMS.gpg .", 
            "title": "Ubuntu Install Guide"
        }, 
        {
            "location": "/installation/ubuntu_config/#verify-the-ubuntu-installation-media", 
            "text": "First you should make sure that the Ubuntu image you downloaded hasn't been modified by a malicious attacker by checking its integrity with cryptographic signatures and hashes  \u2014 which might sound complex but it's relatively easy to do. Before you can verify the Ubuntu installation media, you will need to download the associated public key.  gpg --keyserver pool.sks-keyservers.net --recv-key C5986B4F1257FFA86632CBA746181433FBB75451\ngpg --fingerprint C5986B4F1257FFA86632CBA746181433FBB75451  The Ubuntu CD Image Automatic Signing Key should have a fingerprint of \"C598 6B4F 1257 FFA8 6632  CBA7 4618 1433 FBB7 5451\". If the fingerprint does not match what you see here, please get in touch at securedrop@freedom.press.  Verify the  SHA256SUMS  file and move on to the next step if you see \"Good Signature\" in the output.  gpg --verify SHA256SUMS.gpg SHA256SUMS  The next and final step is to verify the Ubuntu image. If you are using Linux, use the following command.  sha256sum -c  (grep ubuntu-14.04.2-server-amd64.iso SHA256SUMS)  If you are using OS X, use the command below.  shasum -a 256 -c  (grep ubuntu-14.04.2-server-amd64.iso SHA256SUMS)  If the final verification step is successful, you should see the following output in your terminal.  ubuntu-14.04.2-server-amd64.iso: OK", 
            "title": "Verify the Ubuntu installation media"
        }, 
        {
            "location": "/installation/ubuntu_config/#create-the-ubuntu-installation-media", 
            "text": "To create the Ubuntu installation media, you can either burn the ISO image to a CD-R or create a bootable USB stick (see instructions for doing this on  OS X ,  Ubuntu  and  Windows ). As a reliable method we recommend using the  dd  command to copy the hybrid ISO directly to a USB drive rather than a utility like UNetbootin which can result in errors. Once you have a CD or USB with an ISO image of Ubuntu on it, you may begin the Ubuntu installation on both SecureDrop servers.", 
            "title": "Create the Ubuntu installation media"
        }, 
        {
            "location": "/installation/ubuntu_config/#start-installation", 
            "text": "The steps below are the same for both the  Application Server  and the  Monitor Server .  Start by inserting the Ubuntu installation media into the server. Boot or reboot the server with the installation media inserted, and enter the boot menu. To enter the boot menu, you need to press a key as soon as you turn the server on. This key varies depending on server model, but common choices are Esc, F2, F10, and F12. Often, the server will briefly display a message on boot that shows which key should be pressed to enter the boot menu. Once you've entered the boot menu, select the installation media (USB or CD) and press Enter to boot it.  After booting the Ubuntu image, select  Install Ubuntu Server .   Follow the steps to select your language, country and keyboard settings. Once that's done, let the installation process continue.", 
            "title": "Start installation"
        }, 
        {
            "location": "/installation/ubuntu_config/#configure-the-network-manually", 
            "text": "The Ubuntu installer will try to autoconfigure networking for the server you are setting up; however, SecureDrop 0.3 requires manual network configuration. You can hit  Cancel  at any point during network autoconfiguration to be given the choice to  Configure the network manually .  If network autoconfiguration completes before you can do this, the next window will ask for your hostname. To get back to the choice of configuring the network manually,  Cancel  the step that asks you to set a hostname and choose the manu option that says  Configure the network manually  instead.  For a production install with a pfSense network firewall in place, the  Application Server  and the  Monitor Server  are on separate networks. You may choose your own network settings at this point, but make sure the settings you choose are unique on the firewall's network and remember to propagate your choices through the rest of the installation process.  Below is the configuration you should enter, assuming you used the network settings from the network firewall guide. If you did not, adjust these settings accordingly.   Application Server :  Server IP address: 10.20.1.2  Netmask (default is fine): 255.255.255.0  Gateway: 10.20.1.1  For DNS, use Google's name servers: 8.8.8.8  Hostname: app  Domain name should be left blank    Monitor Server :  Server IP address: 10.20.2.2  Netmask (default is fine): 255.255.255.0  Gateway: 10.20.2.1  For DNS, use Google's name servers: 8.8.8.8  Hostname: mon  Domain name should be left blank", 
            "title": "Configure the network manually"
        }, 
        {
            "location": "/installation/ubuntu_config/#continue-the-installation", 
            "text": "You can choose whatever username and password you would like. To make things easier later you should use the same username and password on both servers. Make sure to save this password in your admin KeePassX database afterwards.  Click 'no' when asked to encrypt the home directory. Then configure your time zone.", 
            "title": "Continue the installation"
        }, 
        {
            "location": "/installation/ubuntu_config/#partition-the-disks", 
            "text": "Before setting up the server's disk partitions and filesystems in the next step, you will need to decide if you would like to enable  Full Disk Encryption (FDE) . If the servers are ever powered down, FDE will ensure all of the information on them stays private in case they are seized or stolen.  While FDE can be useful in some cases, we currently do not recommend that you enable it because there are not many scenarios where it will be a net security benefit for SecureDrop operators. Doing so will introduce the need for more passwords and add even more responsibility on the administrator of the system (see  this GitHub issue  for more information).  If you wish to proceed without FDE as recommended, choose the installation option that says  Guided - use entire disk and set up LVM .  However, if you decide to go ahead and enable FDE, please note that doing so means SecureDrop will become unreachable after an automatic reboot. An administrator will need to be on hand to enter the password in order to decrypt the disks and complete the startup process, which will occur anytime there is an automatic software update, and also several times during SecureDrop's installation. We recommend that the servers be integrated with a monitoring solution that so that you receive an alert when the system becomes unavailable.  To enable FDE, select  Guided - use entire disk and set up encrypted LVM  during the disk partitioning step and write the changes to disk. Follow the recommendations as to choosing a strong password. As the administrator, you will be responsible for keeping this passphrase safe. Write it down somewhere and memorize it if you can.  If inadvertently lost it could result in total loss of the SecureDrop system.  After selecting either of those options you may be asked a few questions about overwriting anything currently on the server you are using. Select yes. You do not need an HTTP proxy, so when asked, you can just click continue.", 
            "title": "Partition the disks"
        }, 
        {
            "location": "/installation/ubuntu_config/#finish-the-installation", 
            "text": "Wait for the base system to finish installing. When you get to the  Configure tasksel  screen, choose  No automatic updates . The subsequent SecureDrop installation will include a task that handles regular software updates.  When you get to the software selection screen, only choose  OpenSSH server  by hitting the space bar (Note: hitting enter before the space bar will force you to start the installation process over).  Once  OpenSSH Server  is selected, hit  Continue .  You will then have to wait for the packages to finish installing.  When the packages are finished installing, Ubuntu will automatically install the bootloader (GRUB). If it asks to install the bootloader to the Master Boot Record, choose  Yes . When everything is done, reboot.  You can now return to where you left off in the main SecureDrop install guide  by clicking here .", 
            "title": "Finish the installation"
        }, 
        {
            "location": "/installation/securedrop_app/", 
            "text": "Install the SecureDrop application\n\n\nInstall Ansible\n\n\nYou should still be on your admin workstation with your \nadmin Tails USB\n.\n\n\nNext you need to install Ansible. To do this, you first need to update your package manager's package lists to be sure you get the latest version of Ansible. It should take a couple minutes.\n\n\nsudo apt-get update\n\n\n\nNow, install Ansible by entering this command:\n\n\nsudo apt-get install ansible\n\n\n\nSet up SSH keys for the Admin\n\n\nNow that you've verified the code that's needed for installation, you need to create an SSH key on the Admin Workstation. Initially, Ubuntu has SSH configured to authenticate users with their password. This new key will be copied to the \nApplication Server\n and the \nMonitor Server\n, and will replace the use of the password for authentication. Since the Admin Live USB was set up with \nSSH Client persistence\n, this key will be saved on the Admin Live USB and can be used in the future to authenticate to the servers in order to perform administrative tasks.\n\n\nFirst, generate the new SSH keypair:\n\n\n$ ssh-keygen -t rsa -b 4096\n\n\n\nYou'll be asked to \"enter file in which to save the key.\" Here you can just keep the default, so type enter. \n\n\nIf you choose to passphrase-protect this key, you must use a strong, diceword-generated, passphrase that you can manually type (as Tails' pinentry will not allow you to copy and paste a passphrase).  It is also acceptable to leave the passphrase blank in this case.\n\n\nOnce the key has finished generating, you need to copy the public key to both servers. Use \nssh-copy-id\n to copy the public key to each server in turn. Use the user name and password that you set up during Ubuntu installation.\n\n\n$ ssh-copy-id \nusername\n@\nApp IP address\n\n$ ssh-copy-id \nusername\n@\nMon IP address\n\n\n\n\nVerify that you are able to authenticate to both servers by running the below commands (you will be prompted for the SSH password you just created).\n\n\nssh \nusername\n@\nApp IP address\n hostname\nssh \nusername\n@\nMontior IP address\n hostname\n\n\n\n\nMake sure to run the 'exit' command after testing each one.\n\n\nGather the required information\n\n\nMake sure you have the following information and files before continuing:\n\n\n\n\nThe \nApp Server\n IP address\n\n\nThe \nMonitor Server\n IP address\n\n\nThe SecureDrop application's GPG public key (from the \nTransfer Device\n)\n\n\nThe SecureDrop application's GPG key fingerprint\n\n\nThe email address that will receive alerts from OSSEC\n\n\nThe GPG public key and fingerprint for the email address that will receive the alerts\n\n\nConnection information for the SMTP relay that handles OSSEC alerts. For more information, see the \nOSSEC Alerts Guide\n.\n\n\nThe first username of a journalist who will be using SecureDrop (you can add more later)\n\n\nThe username of the system administrator\n\n\n(Optional) An image to replace the SecureDrop logo on the \nSource Interface\n and \nDocument Interface\n\n\nRecommended size: \n500px x 450px\n\n\nRecommended format: PNG\n\n\n\n\n\n\n\n\nInstall SecureDrop\n\n\nFrom the base of the SecureDrop repo, change into the \nansible-base\n directory:\n\n\n$ cd install_files/ansible-base\n\n\n\nYou will have to copy the following required files to \ninstall_files/ansible-base\n:\n\n\n\n\nSecureDrop Application GPG public key file\n\n\nAdmin GPG public key file (for encrypting OSSEC alerts)\n\n\n(Optional) Custom header image file\n\n\n\n\nThe SecureDrop application GPG key should be located on your \nTransfer Device\n from earlier. It will depend on the location where the USB stick is mounted, but for example, if you are already in the ansible-base directory, you can just run:\n\n\n$ cp /media/[USB folder]/SecureDrop.asc .\n\n\n\nOr you may use the copy and paste capabilities of the file manager. Repeat this step for the Admin GPG key and custom header image.\n\n\nNow you must edit a couple configuration files. You can do so using gedit, vim, or nano. Double-clicking will suffice to open them.\n\n\nEdit the inventory file, \ninventory\n, and update the default IP addresses with the ones you chose for app and mon. When you're done, save the file.\n\n\nEdit the file \nprod-specific.yml\n and fill it out with values that match your environment. At a minimum, you will need to provide the following:\n\n\n\n\nUser allowed to connect to both servers with SSH: \nssh_users\n\n\nIP address of the Monitor Server: \nmonitor_ip\n\n\nHostname of the Monitor Server: \nmonitor_hostname\n\n\nHostname of the Application Server: \napp_hostname\n\n\nIP address of the Application Server: \napp_ip\n\n\nThe SecureDrop application's GPG public key: \nsecuredrop_app_gpg_public_key\n\n\nThe SecureDrop application's GPG key fingerprint: \nsecuredrop_app_gpg_fingerprint\n\n\nGPG public key used when encrypting OSSEC alerts: \nossec_alert_gpg_public_key\n\n\nFingerprint for key used when encrypting OSSEC alerts: \nossec_gpg_fpr\n\n\nThe email address that will receive alerts from OSSEC: \nossec_alert_email\n\n\nThe reachable hostname of your SMTP relay: \nsmtp_relay\n\n\nThe secure SMTP port of your SMTP relay: \nsmtp_relay_port\n (typically 25, 587, or 465. Must support TLS encryption)\n\n\nEmail username to authenticate to the SMTP relay: \nsasl_username\n\n\nDomain name of the email used to send OSSEC alerts: \nsasl_domain\n\n\nPassword of the email used to send OSSEC alerts: \nsasl_password\n\n\nThe fingerprint of your SMTP relay (optional): \nsmtp_relay_fingerprint\n\n\n\n\nWhen you're done, save the file and quit the editor.\n\n\nNow you are ready to run the playbook! This will automatically configure the servers and install SecureDrop and all of its dependencies. \nusername\n below is the user you created during the Ubuntu installation, and should be the same user you copied the SSH public keys to.\n\n\n$ ansible-playbook -i inventory -u \nusername\n -K --sudo securedrop-prod.yml\n\n\n\nYou will be prompted to enter the sudo password for the app and monitor servers (which should be the same).\n\n\nThe Ansible playbook will run, installing SecureDrop plus configuring and hardening the servers. This will take some time, and it will return the terminal to you when it is complete. If an error occurs while running the playbook, please submit a detailed \nGitHub issue\n or send an email to securedrop@freedom.press.\n\n\nOnce the installation is complete, the addresses for each Tor Hidden Service will be available in the following files in \ninstall_files/ansible-base\n:\n\n\n\n\napp-source-ths\n: This is the .onion address of the Source Interface\n\n\napp-document-aths\n: This is the \nHidServAuth\n configuration line for the Document Interface. During a later step, this will be automatically added to your Tor configuration file in order to exclusively connect to the hidden service.\n\n\napp-ssh-aths\n: Same as above, for SSH access to the Application Server.\n\n\nmon-ssh-aths\n: Same as above, for SSH access to the Monitor Server.\n\n\n\n\nUpdate the inventory, replacing the IP addresses with the corresponding onion addresses from \napp-ssh-aths\n and \nmon-ssh-aths\n. This will allow you to re-run the Ansible playbooks in the future, even though part of SecureDrop's hardening restricts SSH to only being over the specific authenticated Tor Hidden Services.\n\n\nSet up access to the authenticated hidden services\n\n\nTo complete setup of the Admin Workstation, we recommend using the scripts in \ntails_files\n to easily and persistently configure Tor to access these hidden services.\n\n\nNavigate to the directory with these scripts and type these commands into the terminal:\n\n\ncd ~/Persistent/securedrop/tails_files/\nsudo ./install.sh\n\n\n\n\nType the administration password that you selected when starting Tails and hit enter. The installation process will download additional software and then open a text editor with a file called \ntorrc_additions\n.\n\n\nEdit this file, inserting the \nHidServAuth\n information for the three authenticated hidden services that you just received. You can double-click or use the 'cat' command to read the values from \napp-document-aths\n, \napp-ssh-aths\n and \nmon-ssh-aths\n. This information includes the address of the Document Interface, each server's SSH daemon and your personal authentication strings, like in the example below:\n\n\n# add HidServAuth lines here\nHidServAuth gu6yn2ml6ns5qupv.onion Us3xMTN85VIj5NOnkNWzW # client: user\nHidServAuth fsrrszf5qw7z2kjh.onion xW538OvHlDUo5n4LGpQTNh # client: admin\nHidServAuth yt4j52ajfvbmvtc7.onion vNN33wepGtGCFd5HHPiY1h # client: admin\n\n\n\n\nAn easy way to do this is to run \ncat *-aths\n from the \ninstall_files/ansible-base\n folder in a terminal window, and copy/paste the output into the opened text editor.\n\n\nWhen you are done, click \nSave\n and \nclose\n the text editor. Once the editor is closed, the install script will automatically resume.\n\n\nRunning \ninstall.sh\n sets up an initialization script that automatically updates Tor's configuration to work with the authenticated hidden services every time you login to Tails. As long as Tails is booted with the persistent volume enabled then you can open the Tor Browser and reach the Document Interface as normal, as well as connect to both servers via secure shell. Tor's \nhidden service authentication\n restricts access to only those who have the 'HidServAuth' values.\n\n\nSet up SSH host aliases\n\n\nThis step is optional but makes it much easier to connect to and administer the servers. Create the file \n/home/amnesia/.ssh/config\n and add a configuration following the scheme below, but replace \nHostname\n and \nUser\n with the values specific to your setup:\n\n\nHost app\n  Hostname fsrrszf5qw7z2kjh.onion\n  User \nssh_user\n\nHost mon\n  Hostname yt4j52ajfvbmvtc7.onion\n  User \nssh_user\n\n\n\n\n\nNow you can simply use \nssh app\n and \nssh mon\n to connect to each server, and it will be stored in the Tails Dotfiles persistence.\n\n\nSet up two-factor authentication for the Admin\n\n\nAs part of the SecureDrop installation process, you will need to set up two-factor authentication on the App Server and Monitor Server using the Google Authenticator mobile app.\n\n\nAfter your torrc has been updated with the HidServAuth values, connect to the App Server using \nssh\n and run \ngoogle-authenticator\n. Follow the instructions in \nour Google Authenticator guide\n to set up the app on your Android or iOS device.\n\n\nTo disconnect enter the command \nexit\n. Now do the same thing on the Monitor Server. You'll end up with an account for each server in the Google Authenticator app that generates two-factor codes needed for logging in.\n\n\nCreate users for the web application\n\n\nNow SSH to the App Server, \nsudo su\n, cd to /var/www/securedrop, and run \n./manage.py add_admin\n to create the first admin user for yourself. Make a password and store it in your KeePassX database. This admin user is for the SecureDrop Admin + Document Interface and will allow you to create accounts for the journalists.\n\n\nThe \nadd_admin\n command will require you to keep another two-factor authentication code. Once that's done, you should open the Tor Browser \n and navigate to the Document Interface's .onion address.\n\n\nFor adding journalist users, please refer now to our \nAdmin Interface Guide\n.", 
            "title": "Install SecureDrop Application"
        }, 
        {
            "location": "/installation/securedrop_app/#install-the-securedrop-application", 
            "text": "", 
            "title": "Install the SecureDrop application"
        }, 
        {
            "location": "/installation/securedrop_app/#install-ansible", 
            "text": "You should still be on your admin workstation with your  admin Tails USB .  Next you need to install Ansible. To do this, you first need to update your package manager's package lists to be sure you get the latest version of Ansible. It should take a couple minutes.  sudo apt-get update  Now, install Ansible by entering this command:  sudo apt-get install ansible", 
            "title": "Install Ansible"
        }, 
        {
            "location": "/installation/securedrop_app/#set-up-ssh-keys-for-the-admin", 
            "text": "Now that you've verified the code that's needed for installation, you need to create an SSH key on the Admin Workstation. Initially, Ubuntu has SSH configured to authenticate users with their password. This new key will be copied to the  Application Server  and the  Monitor Server , and will replace the use of the password for authentication. Since the Admin Live USB was set up with  SSH Client persistence , this key will be saved on the Admin Live USB and can be used in the future to authenticate to the servers in order to perform administrative tasks.  First, generate the new SSH keypair:  $ ssh-keygen -t rsa -b 4096  You'll be asked to \"enter file in which to save the key.\" Here you can just keep the default, so type enter.   If you choose to passphrase-protect this key, you must use a strong, diceword-generated, passphrase that you can manually type (as Tails' pinentry will not allow you to copy and paste a passphrase).  It is also acceptable to leave the passphrase blank in this case.  Once the key has finished generating, you need to copy the public key to both servers. Use  ssh-copy-id  to copy the public key to each server in turn. Use the user name and password that you set up during Ubuntu installation.  $ ssh-copy-id  username @ App IP address \n$ ssh-copy-id  username @ Mon IP address   Verify that you are able to authenticate to both servers by running the below commands (you will be prompted for the SSH password you just created).  ssh  username @ App IP address  hostname\nssh  username @ Montior IP address  hostname  Make sure to run the 'exit' command after testing each one.", 
            "title": "Set up SSH keys for the Admin"
        }, 
        {
            "location": "/installation/securedrop_app/#gather-the-required-information", 
            "text": "Make sure you have the following information and files before continuing:   The  App Server  IP address  The  Monitor Server  IP address  The SecureDrop application's GPG public key (from the  Transfer Device )  The SecureDrop application's GPG key fingerprint  The email address that will receive alerts from OSSEC  The GPG public key and fingerprint for the email address that will receive the alerts  Connection information for the SMTP relay that handles OSSEC alerts. For more information, see the  OSSEC Alerts Guide .  The first username of a journalist who will be using SecureDrop (you can add more later)  The username of the system administrator  (Optional) An image to replace the SecureDrop logo on the  Source Interface  and  Document Interface  Recommended size:  500px x 450px  Recommended format: PNG", 
            "title": "Gather the required information"
        }, 
        {
            "location": "/installation/securedrop_app/#install-securedrop", 
            "text": "From the base of the SecureDrop repo, change into the  ansible-base  directory:  $ cd install_files/ansible-base  You will have to copy the following required files to  install_files/ansible-base :   SecureDrop Application GPG public key file  Admin GPG public key file (for encrypting OSSEC alerts)  (Optional) Custom header image file   The SecureDrop application GPG key should be located on your  Transfer Device  from earlier. It will depend on the location where the USB stick is mounted, but for example, if you are already in the ansible-base directory, you can just run:  $ cp /media/[USB folder]/SecureDrop.asc .  Or you may use the copy and paste capabilities of the file manager. Repeat this step for the Admin GPG key and custom header image.  Now you must edit a couple configuration files. You can do so using gedit, vim, or nano. Double-clicking will suffice to open them.  Edit the inventory file,  inventory , and update the default IP addresses with the ones you chose for app and mon. When you're done, save the file.  Edit the file  prod-specific.yml  and fill it out with values that match your environment. At a minimum, you will need to provide the following:   User allowed to connect to both servers with SSH:  ssh_users  IP address of the Monitor Server:  monitor_ip  Hostname of the Monitor Server:  monitor_hostname  Hostname of the Application Server:  app_hostname  IP address of the Application Server:  app_ip  The SecureDrop application's GPG public key:  securedrop_app_gpg_public_key  The SecureDrop application's GPG key fingerprint:  securedrop_app_gpg_fingerprint  GPG public key used when encrypting OSSEC alerts:  ossec_alert_gpg_public_key  Fingerprint for key used when encrypting OSSEC alerts:  ossec_gpg_fpr  The email address that will receive alerts from OSSEC:  ossec_alert_email  The reachable hostname of your SMTP relay:  smtp_relay  The secure SMTP port of your SMTP relay:  smtp_relay_port  (typically 25, 587, or 465. Must support TLS encryption)  Email username to authenticate to the SMTP relay:  sasl_username  Domain name of the email used to send OSSEC alerts:  sasl_domain  Password of the email used to send OSSEC alerts:  sasl_password  The fingerprint of your SMTP relay (optional):  smtp_relay_fingerprint   When you're done, save the file and quit the editor.  Now you are ready to run the playbook! This will automatically configure the servers and install SecureDrop and all of its dependencies.  username  below is the user you created during the Ubuntu installation, and should be the same user you copied the SSH public keys to.  $ ansible-playbook -i inventory -u  username  -K --sudo securedrop-prod.yml  You will be prompted to enter the sudo password for the app and monitor servers (which should be the same).  The Ansible playbook will run, installing SecureDrop plus configuring and hardening the servers. This will take some time, and it will return the terminal to you when it is complete. If an error occurs while running the playbook, please submit a detailed  GitHub issue  or send an email to securedrop@freedom.press.  Once the installation is complete, the addresses for each Tor Hidden Service will be available in the following files in  install_files/ansible-base :   app-source-ths : This is the .onion address of the Source Interface  app-document-aths : This is the  HidServAuth  configuration line for the Document Interface. During a later step, this will be automatically added to your Tor configuration file in order to exclusively connect to the hidden service.  app-ssh-aths : Same as above, for SSH access to the Application Server.  mon-ssh-aths : Same as above, for SSH access to the Monitor Server.   Update the inventory, replacing the IP addresses with the corresponding onion addresses from  app-ssh-aths  and  mon-ssh-aths . This will allow you to re-run the Ansible playbooks in the future, even though part of SecureDrop's hardening restricts SSH to only being over the specific authenticated Tor Hidden Services.", 
            "title": "Install SecureDrop"
        }, 
        {
            "location": "/installation/securedrop_app/#set-up-access-to-the-authenticated-hidden-services", 
            "text": "To complete setup of the Admin Workstation, we recommend using the scripts in  tails_files  to easily and persistently configure Tor to access these hidden services.  Navigate to the directory with these scripts and type these commands into the terminal:  cd ~/Persistent/securedrop/tails_files/\nsudo ./install.sh  Type the administration password that you selected when starting Tails and hit enter. The installation process will download additional software and then open a text editor with a file called  torrc_additions .  Edit this file, inserting the  HidServAuth  information for the three authenticated hidden services that you just received. You can double-click or use the 'cat' command to read the values from  app-document-aths ,  app-ssh-aths  and  mon-ssh-aths . This information includes the address of the Document Interface, each server's SSH daemon and your personal authentication strings, like in the example below:  # add HidServAuth lines here\nHidServAuth gu6yn2ml6ns5qupv.onion Us3xMTN85VIj5NOnkNWzW # client: user\nHidServAuth fsrrszf5qw7z2kjh.onion xW538OvHlDUo5n4LGpQTNh # client: admin\nHidServAuth yt4j52ajfvbmvtc7.onion vNN33wepGtGCFd5HHPiY1h # client: admin  An easy way to do this is to run  cat *-aths  from the  install_files/ansible-base  folder in a terminal window, and copy/paste the output into the opened text editor.  When you are done, click  Save  and  close  the text editor. Once the editor is closed, the install script will automatically resume.  Running  install.sh  sets up an initialization script that automatically updates Tor's configuration to work with the authenticated hidden services every time you login to Tails. As long as Tails is booted with the persistent volume enabled then you can open the Tor Browser and reach the Document Interface as normal, as well as connect to both servers via secure shell. Tor's  hidden service authentication  restricts access to only those who have the 'HidServAuth' values.", 
            "title": "Set up access to the authenticated hidden services"
        }, 
        {
            "location": "/installation/securedrop_app/#set-up-ssh-host-aliases", 
            "text": "This step is optional but makes it much easier to connect to and administer the servers. Create the file  /home/amnesia/.ssh/config  and add a configuration following the scheme below, but replace  Hostname  and  User  with the values specific to your setup:  Host app\n  Hostname fsrrszf5qw7z2kjh.onion\n  User  ssh_user \nHost mon\n  Hostname yt4j52ajfvbmvtc7.onion\n  User  ssh_user   Now you can simply use  ssh app  and  ssh mon  to connect to each server, and it will be stored in the Tails Dotfiles persistence.", 
            "title": "Set up SSH host aliases"
        }, 
        {
            "location": "/installation/securedrop_app/#set-up-two-factor-authentication-for-the-admin", 
            "text": "As part of the SecureDrop installation process, you will need to set up two-factor authentication on the App Server and Monitor Server using the Google Authenticator mobile app.  After your torrc has been updated with the HidServAuth values, connect to the App Server using  ssh  and run  google-authenticator . Follow the instructions in  our Google Authenticator guide  to set up the app on your Android or iOS device.  To disconnect enter the command  exit . Now do the same thing on the Monitor Server. You'll end up with an account for each server in the Google Authenticator app that generates two-factor codes needed for logging in.", 
            "title": "Set up two-factor authentication for the Admin"
        }, 
        {
            "location": "/installation/securedrop_app/#create-users-for-the-web-application", 
            "text": "Now SSH to the App Server,  sudo su , cd to /var/www/securedrop, and run  ./manage.py add_admin  to create the first admin user for yourself. Make a password and store it in your KeePassX database. This admin user is for the SecureDrop Admin + Document Interface and will allow you to create accounts for the journalists.  The  add_admin  command will require you to keep another two-factor authentication code. Once that's done, you should open the Tor Browser   and navigate to the Document Interface's .onion address.  For adding journalist users, please refer now to our  Admin Interface Guide .", 
            "title": "Create users for the web application"
        }, 
        {
            "location": "/installation/final_steps/", 
            "text": "Finalizing the Installation\n\n\nSome of the final configuration is included in these testing steps, so \ndo not skip them!\n\n\nTest the web application and connectivity\n\n\n\n\nSSH to both servers over Tor\n\n\nAs an admin running Tails with the proper HidServAuth values in your \n/etc/torrc\n file, you should be able to SSH directly to the App Server and Monitor Server.\n\n\nPost-install you can now SSH \nonly\n over Tor, so use the onion URLs from app-ssh-aths and mon-ssh-aths and the user created during the Ubuntu installation i.e. \nssh \nusername\n@m5apx3p7eazqj3fp.onion\n.\n\n\nMake sure the Source Interface is available, and that you can make a submission.\n\n\nDo this by opening the Tor Browser and navigating to the onion URL from \napp-source-ths\n. Proceed through the codename generation (copy this down somewhere) and you can submit a message or attach any random unimportant file.\n\n\nUsage of the Source Interface is covered by our \nSource User Manual\n.\n\n\nTest that you can access the Document Interface, and that you can log in as the admin user you just created.\n\n\nOpen the Tor Browser and navigate to the onion URL from app-document-aths. Enter your password and two-factor authentication code to log in.\n\n\nIf you have problems logging in to the Admin/Document Interface, SSH to the App Server and restart the ntp daemon to synchronize the time: \nsudo service ntp restart\n. Also check that your smartphone's time is accurate and set to network time in its device settings.\n\n\nTest replying to the test submission.\n\n\nWhile logged in as an admin, you can send a reply to the test source submission you made earlier.\n\n\nUsage of the Document Interface is covered by our \nJournalist User Manual\n.\n\n\nTest that the source received the reply.\n\n\nWithin Tor Browser, navigate back to the app-source-ths URL and use your previous test source codename to log in (or reload the page if it's still open) and check that the reply you just made is present.\n\n\nWe highly recommend that you create persistent bookmarks for the Source and Document Interface addresses within Tor Browser.\n\n\nRemove the test submissions you made prior to putting SecureDrop to real use. On the main Document Interface page, select all sources and click 'Delete selected'.\n\n\n\n\nOnce you've tested the installation and verified that everything is working, see \nHow to Use SecureDrop\n.\n\n\nAdditional testing\n\n\n\n\nOn each server, check that you can execute privileged commands by running \nsudo su\n.\n\n\nRun \nuname -r\n to verify you are booted into grsecurity kernel. The string \ngrsec\n should be in the output.\n\n\nCheck the AppArmor status on each server with \nsudo aa-status\n. On a production instance all profiles should be in enforce mode.\n\n\nCheck the current applied iptables rules with \niptables-save\n. It should output \napproximately\n 50 lines.\n\n\nYou should have received an email alert from OSSEC when it first started. If not, review our \nOSSEC Alerts Guide\n.\n\n\n\n\nIf you have any feedback on the installation process, please let us know! We're always looking for ways to improve, automate and make things easier.", 
            "title": "Finalizing the Installation"
        }, 
        {
            "location": "/installation/final_steps/#finalizing-the-installation", 
            "text": "Some of the final configuration is included in these testing steps, so  do not skip them!", 
            "title": "Finalizing the Installation"
        }, 
        {
            "location": "/installation/final_steps/#test-the-web-application-and-connectivity", 
            "text": "SSH to both servers over Tor  As an admin running Tails with the proper HidServAuth values in your  /etc/torrc  file, you should be able to SSH directly to the App Server and Monitor Server.  Post-install you can now SSH  only  over Tor, so use the onion URLs from app-ssh-aths and mon-ssh-aths and the user created during the Ubuntu installation i.e.  ssh  username @m5apx3p7eazqj3fp.onion .  Make sure the Source Interface is available, and that you can make a submission.  Do this by opening the Tor Browser and navigating to the onion URL from  app-source-ths . Proceed through the codename generation (copy this down somewhere) and you can submit a message or attach any random unimportant file.  Usage of the Source Interface is covered by our  Source User Manual .  Test that you can access the Document Interface, and that you can log in as the admin user you just created.  Open the Tor Browser and navigate to the onion URL from app-document-aths. Enter your password and two-factor authentication code to log in.  If you have problems logging in to the Admin/Document Interface, SSH to the App Server and restart the ntp daemon to synchronize the time:  sudo service ntp restart . Also check that your smartphone's time is accurate and set to network time in its device settings.  Test replying to the test submission.  While logged in as an admin, you can send a reply to the test source submission you made earlier.  Usage of the Document Interface is covered by our  Journalist User Manual .  Test that the source received the reply.  Within Tor Browser, navigate back to the app-source-ths URL and use your previous test source codename to log in (or reload the page if it's still open) and check that the reply you just made is present.  We highly recommend that you create persistent bookmarks for the Source and Document Interface addresses within Tor Browser.  Remove the test submissions you made prior to putting SecureDrop to real use. On the main Document Interface page, select all sources and click 'Delete selected'.   Once you've tested the installation and verified that everything is working, see  How to Use SecureDrop .", 
            "title": "Test the web application and connectivity"
        }, 
        {
            "location": "/installation/final_steps/#additional-testing", 
            "text": "On each server, check that you can execute privileged commands by running  sudo su .  Run  uname -r  to verify you are booted into grsecurity kernel. The string  grsec  should be in the output.  Check the AppArmor status on each server with  sudo aa-status . On a production instance all profiles should be in enforce mode.  Check the current applied iptables rules with  iptables-save . It should output  approximately  50 lines.  You should have received an email alert from OSSEC when it first started. If not, review our  OSSEC Alerts Guide .   If you have any feedback on the installation process, please let us know! We're always looking for ways to improve, automate and make things easier.", 
            "title": "Additional testing"
        }, 
        {
            "location": "/support/source_user_manual/", 
            "text": "How To Use SecureDrop As A Source\n\n\nSecureDrop Depends on the Tor Browser\n\n\nSources submitting documents or messages to SecureDrop must connect to the SecureDrop Interface using the Tor network, free software that makes users' internet activity much more difficult to trace. The easiest and most secure way to use Tor is to download the Tor Browser Bundle from https://www.torproject.org/. This bundle installs the Tor browser, as well as an application that is used to connect to the Tor network.\n\n\nThe Tor Browser can be used to access Tor \nhidden service URLs\n, which have domain names that end in \".onion\". Media organizations will provide links to the .onion URLs of their SecureDrop pages, and we \nmaintain a list\n of official pages as well. Sources can and should use the \nTails operating system\n for a higher level of security.\n\n\nUsing SecureDrop As a Source\n\n\nOpen the Tor Browser and navigate to the .onion hidden service URL provided by the media organization whose SecureDrop page you would like to visit. The page should look similar to the screenshot below. If this is the first time you're using the Tor browser, it's likely that you have Javascript enabled. If you do, you will see the red warning below which will explain that this is a security risk. If you don't have Javascript enabled, you can skip the next step.\n\n\n\n\nClick the \nLearn how to disable it\n link on the Javascript warning and a message will pop up explaining how to disable Javascript. Follow the instructions and refresh the page if it does not happen automatically.\n\n\n\n\nThe page should now look similar to the screenshot below. If this is the first time you are using SecureDrop, click the \nSubmit Documents\n button.\n\n\n\n\nYou should now see a screen that shows the unique codename that SecureDrop has generated for you. In the example screenshot below the codename is \nsink los radium bcd nab privy nadir\n, but yours will be different. It is extremely important that you both remember this code and keep it secret. After submitting documents, you will need to provide this code to log back in and check for responses.\n\n\nThe best way to protect your codename is to memorize it. If you cannot memorize it right away, we recommend writing it down and keeping it in a safe place at first, and gradually working to memorize it over time. Once you have memorized it, you should destroy the written copy.\n\n\nSecureDrop allows you to choose the length of your codename, in case you want to create a longer codename for extra security. Once you have generated a codename and put it somewhere safe, click \nContinue\n.\n\n\n\n\nYou will next be brought to the submission interface, where you may upload a document, enter a message to send to journalists, or both. You can only submit one document at a time, so you may want to combine several files into a zip archive if necessary. The maximum submission size is currently 500MB. If the files you wish to upload are over that limit, we recommend that you send a message to the journalist explaining this, so that they can set up another method for transferring the documents.\n\n\nWhen your submission is ready, click \nSubmit\n.\n\n\n\n\nAfter clicking \nSubmit\n, a confirmation page should appear, showing that your message and/or documents have been sent successfully. On this page you can make another submission or view responses to your previous messages.\n\n\n\n\nIf you have already submitted a document and would like to check for responses, click the \nCheck for a Response\n button on the media organization's SecureDrop homepage.\n\n\n\n\nThe next page will ask for your secret codename. Enter it and click \nContinue\n.\n\n\n\n\nIf a journalist has responded, his or her message will appear on the next page. This page also allows you to upload another document or send another message to the journalist. Be sure to delete any messages here before navigating away.\n\n\n\n\nAfter you delete the message from the journalist, make sure you see the below message.\n\n\n\n\nIf the server experiences a large number of new sources signing up at once and is overloaded with submissions, the journalist will flag your message on their end and you will see the message below. They can't write a reply to you until you've seen this message for security reasons. This will only happen the first time a journalist replies and with subsequent replies you will skip this step. Click \nRefresh\n or log in again to see if a journalist has responded.\n\n\n\n\nRepeat these steps to continue communicating with the journalist.", 
            "title": "Source User Manual"
        }, 
        {
            "location": "/support/source_user_manual/#how-to-use-securedrop-as-a-source", 
            "text": "", 
            "title": "How To Use SecureDrop As A Source"
        }, 
        {
            "location": "/support/source_user_manual/#securedrop-depends-on-the-tor-browser", 
            "text": "Sources submitting documents or messages to SecureDrop must connect to the SecureDrop Interface using the Tor network, free software that makes users' internet activity much more difficult to trace. The easiest and most secure way to use Tor is to download the Tor Browser Bundle from https://www.torproject.org/. This bundle installs the Tor browser, as well as an application that is used to connect to the Tor network.  The Tor Browser can be used to access Tor  hidden service URLs , which have domain names that end in \".onion\". Media organizations will provide links to the .onion URLs of their SecureDrop pages, and we  maintain a list  of official pages as well. Sources can and should use the  Tails operating system  for a higher level of security.", 
            "title": "SecureDrop Depends on the Tor Browser"
        }, 
        {
            "location": "/support/source_user_manual/#using-securedrop-as-a-source", 
            "text": "Open the Tor Browser and navigate to the .onion hidden service URL provided by the media organization whose SecureDrop page you would like to visit. The page should look similar to the screenshot below. If this is the first time you're using the Tor browser, it's likely that you have Javascript enabled. If you do, you will see the red warning below which will explain that this is a security risk. If you don't have Javascript enabled, you can skip the next step.   Click the  Learn how to disable it  link on the Javascript warning and a message will pop up explaining how to disable Javascript. Follow the instructions and refresh the page if it does not happen automatically.   The page should now look similar to the screenshot below. If this is the first time you are using SecureDrop, click the  Submit Documents  button.   You should now see a screen that shows the unique codename that SecureDrop has generated for you. In the example screenshot below the codename is  sink los radium bcd nab privy nadir , but yours will be different. It is extremely important that you both remember this code and keep it secret. After submitting documents, you will need to provide this code to log back in and check for responses.  The best way to protect your codename is to memorize it. If you cannot memorize it right away, we recommend writing it down and keeping it in a safe place at first, and gradually working to memorize it over time. Once you have memorized it, you should destroy the written copy.  SecureDrop allows you to choose the length of your codename, in case you want to create a longer codename for extra security. Once you have generated a codename and put it somewhere safe, click  Continue .   You will next be brought to the submission interface, where you may upload a document, enter a message to send to journalists, or both. You can only submit one document at a time, so you may want to combine several files into a zip archive if necessary. The maximum submission size is currently 500MB. If the files you wish to upload are over that limit, we recommend that you send a message to the journalist explaining this, so that they can set up another method for transferring the documents.  When your submission is ready, click  Submit .   After clicking  Submit , a confirmation page should appear, showing that your message and/or documents have been sent successfully. On this page you can make another submission or view responses to your previous messages.   If you have already submitted a document and would like to check for responses, click the  Check for a Response  button on the media organization's SecureDrop homepage.   The next page will ask for your secret codename. Enter it and click  Continue .   If a journalist has responded, his or her message will appear on the next page. This page also allows you to upload another document or send another message to the journalist. Be sure to delete any messages here before navigating away.   After you delete the message from the journalist, make sure you see the below message.   If the server experiences a large number of new sources signing up at once and is overloaded with submissions, the journalist will flag your message on their end and you will see the message below. They can't write a reply to you until you've seen this message for security reasons. This will only happen the first time a journalist replies and with subsequent replies you will skip this step. Click  Refresh  or log in again to see if a journalist has responded.   Repeat these steps to continue communicating with the journalist.", 
            "title": "Using SecureDrop As a Source"
        }, 
        {
            "location": "/support/journalist_user_manual/", 
            "text": "How to Use SecureDrop As a Journalist\n\n\nJournalists viewing documents on SecureDrop must connect to the respective Source or Document Interface using the \nTails operating system\n, which your administrator should have already set up for you.\n\n\nUsing SecureDrop As a Journalist\n\n\nCreate GPG key for the journalist\n\n\nEach journalist must have a personal GPG key that they use for encrypting files transferred from the Secure Viewing Station to their Journalist Workstation. The private key, used for decryption, stays on their Journalist Workstation. The public key, used for encryption, gets copied to the Secure Viewing Station.\n\n\nIf a journalist does not yet have a GPG key, they can follow these instructions to set one up with GnuPG (GPG).\n\n\n\n\nGNU/Linux\n\n\nWindows\n\n\nMac OS X\n\n\n\n\nConnect to the Document Interface\n\n\nEach journalist has their own authenticated Tor hidden service URL to login to the \nDocument Interface\n. The journalist needs to use the browser in the Tails operating system to connect to the \nDocument Interface\n. This will take an extra few steps each time you want to login, but after practicing a few times, it will become automatic.\n\n\nSee our guide on setting up \nTails for the Admin and Journalist Workstation\n before continuing. We recommend that you create bookmarks for the Source and Document Interfaces.\n\n\nAfter clicking on the SecureDrop \nDocument Interface\n link, you can log in with your username, password, and two-factor authentication token, as shown in the first screenshot below.\n\n\n\n\nIf any sources have uploaded documents or sent you message, they will be listed on the homepage by a codename. \nNote: The codename the journalists see is different than the codename that sources see.\n\n\n\n\nMove Documents to the Secure Viewing Station\n\n\nYou will only be able to view the documents the source has sent you on the \nSecure Viewing Station\n. After clicking on an individual source you will see the page below with the messages that source has sent you. Click on a document or message name to save it, or select a number of documents and save them at once by clicking \"Download Selected\".\n\n\n\n\n\n\nIn order to protect you from malware, the browser only allows you to download documents to a special sandbox folder, located at \n/home/amnesia/Tor Browser\n.\n\n\n\n\nOnce downloaded to the sandbox folder, move the document to the designated USB stick you will use to transfer the documents from your Tails \nJournalist Workstation\n to the \nSecure Viewing Station\n. This will be known as your \nTransfer Device\n.\n\n\n\n\n\n\nEject your \nTransfer Device\n from your \nJournalist Workstation\n.\n\n\nNext, boot up the \nSecure Viewing Station\n using Tails (remember, you must use a different Tails USB than you use your normal \nJournalist Workstation\n) and enter the password for the \nSecure Viewing Station\n the persistent volume. Once you have logged in, plug in the \nTransfer Device\n.\n\n\nCopy these documents to the Persistent folder before decrypting them. This an important step. Otherwise you might accidentally decrypt the documents on the USB stick, and they could be recoverable in the future.\n You can do this by clicking on the \nComputer\n icon on your desk top, clicking on the \nTransfer Device\n, and then you can drag and drop the file into your Persistent folder.\n\n\n\n\nMake sure to then return to your \nTransfer Device\n folder, right click on the file, and then click \"Wipe\" to securely wipe the file from your device.\n\n\nDecrypt and work on the Secure Viewing Station\n\n\nTo decrypt documents, return to your Persistent folder and double-click on zipped file folder. After you extract the files, click on each file individually, and it will prompt you for the application PGP key passphrase to decrypt the document.\n\n\n\n\nWhen you decrypt the file it will have the same filename, but without the .gpg at the end.\n\n\n\n\nYou can double-click on the decrypted document to open it in its default application.\n\n\n\n\nIf the default application doesn't work, you can right-click on the document and choose \nOpen with Other Application...\n to try opening the document with OpenOffice Writer, or Document Viewer. You can right-click on a file and choose \nRename...\n to rename a document and give it a file extension.\n\n\nInteract With Sources\n\n\nClick on the codename to see the page specifically for that source. You will see all of the messages that they have written and documents that they have uploaded. Documents and messages are encrypted to the application's GPG public key. In order to read the messages or look at the documents you will need to transfer them to the \nSecure Viewing Station\n.\nBut first, if you'd like to reply to the source, write your message in the text field and click \nSubmit\n.\n\n\n\n\nOnce your reply has been successfully submitted, you will be returned to the source page and see a message confirming that the reply was stored. The source will see your reply the next time they log in with their unique codename. To minimize sensitive data retention, the source interface UI encourages the source to delete the reply after reading it. If you notice one or more replies disappear from the list of documents, you may infer that the source read and deleted them. You may also delete replies if you change your mind after sending them.\n\n\nFlag for reply\n\n\nIf the server experiences a large number of new sources signing up at once and is overloaded with submissions, you will need to flag sources for reply before you can communicate with them. Click the \nFlag this source for reply\n button.\n\n\n\n\nAfter clicking the \nFlag this source for reply\n button, you'll see this confirmation page. Click through to get back to the page that displays that source's documents and replies.\n\n\n\n\nYou will not be able to reply until after the source logs in again and sees that you would like to talk to him or her. So you may have to sit and wait. After the source sees that you'd like to reply, a GPG key pair will automatically be generated and you can log back in and send a reply.\n\n\nWork with Documents\n\n\nAs long as you're using the latest version of Tails, you should be able to open any document that gets submitted to you without the risk of malicious documents compromising the \nSecure Viewing Station\n. However, if they do compromise it, Tails is designed so that the next time you reboot the malware will be gone.\n\n\nTails comes with lots of applications that will help you securely work with documents, including an office suite, graphics tools, desktop publishing tools, audio tools, and printing and scanning tools. For more information, visit \nWork on sensitive documents\n on the Tails website.\n\n\nTails also comes with the \nMetadata Anonymization Toolkit\n (MAT) that is used to help strip metadata from a variety of types of files, including png, jpg, OpenOffice/LibreOffice documents, Microsoft Office documents, pdf, tar, tar.bz2, tar.gz, zip, mp3, mp2, mp1, mpa, ogg, and flac. You can open MAT by clicking \nApplications\n in the top left corner, Accessories, Metadata Anonymisation Toolkit.\n\n\nWe recommend that you do as much work as you can inside of Tails before copying these documents back to your \nJournalist Workstation\n, including stripping metadata with MAT.\n\n\nWhen you no longer need documents you can right-click on them and choose Wipe to delete them.\n\n\n\n\nEncrypt and move documents to Journalist Workstation\n\n\nBefore you move documents back to the \nTransfer Device\n to copy them to your workstation you should encrypt them to your personal GPG public key that you imported when setting up the \nSecure Viewing Station\n to begin with.\n\n\nRight-click on the document you want to encrypt and choose \nEncrypt...\n\n\n\n\nThen choose the public keys of the journalist you want to encrypt the documents to and click \nOK\n.\n\n\n\n\nWhen you are done you will have another document with the same filename but ending in .gpg that is encrypted to the GPG keys you selected. You can copy the encrypted documents to the \nTransfer Device\n to transfer them to your workstation.\n\n\n\n\nDecrypt and prepare to publish\n\n\nPlug the \nTransfer Device\n into your workstation computer and copy the encrypted documents to it. Decrypt them with \ngnupg\n.\n\n\nWrite articles and blog posts, edit video and audio, and publish. Expose crimes and corruption, and change the world.", 
            "title": "Journalist User Manual"
        }, 
        {
            "location": "/support/journalist_user_manual/#how-to-use-securedrop-as-a-journalist", 
            "text": "Journalists viewing documents on SecureDrop must connect to the respective Source or Document Interface using the  Tails operating system , which your administrator should have already set up for you.", 
            "title": "How to Use SecureDrop As a Journalist"
        }, 
        {
            "location": "/support/journalist_user_manual/#using-securedrop-as-a-journalist", 
            "text": "Create GPG key for the journalist  Each journalist must have a personal GPG key that they use for encrypting files transferred from the Secure Viewing Station to their Journalist Workstation. The private key, used for decryption, stays on their Journalist Workstation. The public key, used for encryption, gets copied to the Secure Viewing Station.  If a journalist does not yet have a GPG key, they can follow these instructions to set one up with GnuPG (GPG).   GNU/Linux  Windows  Mac OS X   Connect to the Document Interface  Each journalist has their own authenticated Tor hidden service URL to login to the  Document Interface . The journalist needs to use the browser in the Tails operating system to connect to the  Document Interface . This will take an extra few steps each time you want to login, but after practicing a few times, it will become automatic.  See our guide on setting up  Tails for the Admin and Journalist Workstation  before continuing. We recommend that you create bookmarks for the Source and Document Interfaces.  After clicking on the SecureDrop  Document Interface  link, you can log in with your username, password, and two-factor authentication token, as shown in the first screenshot below.   If any sources have uploaded documents or sent you message, they will be listed on the homepage by a codename.  Note: The codename the journalists see is different than the codename that sources see.   Move Documents to the Secure Viewing Station  You will only be able to view the documents the source has sent you on the  Secure Viewing Station . After clicking on an individual source you will see the page below with the messages that source has sent you. Click on a document or message name to save it, or select a number of documents and save them at once by clicking \"Download Selected\".    In order to protect you from malware, the browser only allows you to download documents to a special sandbox folder, located at  /home/amnesia/Tor Browser .   Once downloaded to the sandbox folder, move the document to the designated USB stick you will use to transfer the documents from your Tails  Journalist Workstation  to the  Secure Viewing Station . This will be known as your  Transfer Device .    Eject your  Transfer Device  from your  Journalist Workstation .  Next, boot up the  Secure Viewing Station  using Tails (remember, you must use a different Tails USB than you use your normal  Journalist Workstation ) and enter the password for the  Secure Viewing Station  the persistent volume. Once you have logged in, plug in the  Transfer Device .  Copy these documents to the Persistent folder before decrypting them. This an important step. Otherwise you might accidentally decrypt the documents on the USB stick, and they could be recoverable in the future.  You can do this by clicking on the  Computer  icon on your desk top, clicking on the  Transfer Device , and then you can drag and drop the file into your Persistent folder.   Make sure to then return to your  Transfer Device  folder, right click on the file, and then click \"Wipe\" to securely wipe the file from your device.  Decrypt and work on the Secure Viewing Station  To decrypt documents, return to your Persistent folder and double-click on zipped file folder. After you extract the files, click on each file individually, and it will prompt you for the application PGP key passphrase to decrypt the document.   When you decrypt the file it will have the same filename, but without the .gpg at the end.   You can double-click on the decrypted document to open it in its default application.   If the default application doesn't work, you can right-click on the document and choose  Open with Other Application...  to try opening the document with OpenOffice Writer, or Document Viewer. You can right-click on a file and choose  Rename...  to rename a document and give it a file extension.  Interact With Sources  Click on the codename to see the page specifically for that source. You will see all of the messages that they have written and documents that they have uploaded. Documents and messages are encrypted to the application's GPG public key. In order to read the messages or look at the documents you will need to transfer them to the  Secure Viewing Station .\nBut first, if you'd like to reply to the source, write your message in the text field and click  Submit .   Once your reply has been successfully submitted, you will be returned to the source page and see a message confirming that the reply was stored. The source will see your reply the next time they log in with their unique codename. To minimize sensitive data retention, the source interface UI encourages the source to delete the reply after reading it. If you notice one or more replies disappear from the list of documents, you may infer that the source read and deleted them. You may also delete replies if you change your mind after sending them.  Flag for reply  If the server experiences a large number of new sources signing up at once and is overloaded with submissions, you will need to flag sources for reply before you can communicate with them. Click the  Flag this source for reply  button.   After clicking the  Flag this source for reply  button, you'll see this confirmation page. Click through to get back to the page that displays that source's documents and replies.   You will not be able to reply until after the source logs in again and sees that you would like to talk to him or her. So you may have to sit and wait. After the source sees that you'd like to reply, a GPG key pair will automatically be generated and you can log back in and send a reply.  Work with Documents  As long as you're using the latest version of Tails, you should be able to open any document that gets submitted to you without the risk of malicious documents compromising the  Secure Viewing Station . However, if they do compromise it, Tails is designed so that the next time you reboot the malware will be gone.  Tails comes with lots of applications that will help you securely work with documents, including an office suite, graphics tools, desktop publishing tools, audio tools, and printing and scanning tools. For more information, visit  Work on sensitive documents  on the Tails website.  Tails also comes with the  Metadata Anonymization Toolkit  (MAT) that is used to help strip metadata from a variety of types of files, including png, jpg, OpenOffice/LibreOffice documents, Microsoft Office documents, pdf, tar, tar.bz2, tar.gz, zip, mp3, mp2, mp1, mpa, ogg, and flac. You can open MAT by clicking  Applications  in the top left corner, Accessories, Metadata Anonymisation Toolkit.  We recommend that you do as much work as you can inside of Tails before copying these documents back to your  Journalist Workstation , including stripping metadata with MAT.  When you no longer need documents you can right-click on them and choose Wipe to delete them.   Encrypt and move documents to Journalist Workstation  Before you move documents back to the  Transfer Device  to copy them to your workstation you should encrypt them to your personal GPG public key that you imported when setting up the  Secure Viewing Station  to begin with.  Right-click on the document you want to encrypt and choose  Encrypt...   Then choose the public keys of the journalist you want to encrypt the documents to and click  OK .   When you are done you will have another document with the same filename but ending in .gpg that is encrypted to the GPG keys you selected. You can copy the encrypted documents to the  Transfer Device  to transfer them to your workstation.   Decrypt and prepare to publish  Plug the  Transfer Device  into your workstation computer and copy the encrypted documents to it. Decrypt them with  gnupg .  Write articles and blog posts, edit video and audio, and publish. Expose crimes and corruption, and change the world.", 
            "title": "Using SecureDrop As a Journalist"
        }, 
        {
            "location": "/support/admin_interface/", 
            "text": "Admin Interface Guide\n\n\nAt this point, you (the administrator) should have your own username and password, plus two-factor authentication through either the Google Authenticator app on your smartphone or a YubiKey.\n\n\nAdding Users\n\n\nNow you can add new logins for the journalists at your news organization who will be checking the system for submissions. Make sure the journalist is physically in the same room as you when you do this, as they will have to create a password and scan a barcode for their two-factor authentication. Since you\u2019re logged in, this is the screen you should see now:\n\n\n\n\nIn the top right corner click the \u201cAdmin\u201d link, which should bring you to this page:\n\n\n\n\nOnce there, click \u2018Add User\u2019 button, which will take you to this page:\n\n\n\n\nHere, you will hand the keyboard over to the journalist so they can create their own username and password. Once they\u2019re done entering a username and password for themselves, select whether you would like them to also be an administrator (this allows them to add or delete other journalist accounts), and whether they will be using Google Authenticator or a YubiKey for two-factor authentication.\n\n\nGoogle Authenticator\n\n\nIf they are using Google Authenticator for their two-factor, they can just proceed to the next page:\n\n\n\n\nAt this point, the journalist should make sure they have downloaded the Google Authenticator app to their smartphone. It can be installed from the Apple Store for an iPhone or from the Google Play store for an Android phone. Once you download it and open it, the app does not require setup. It should prompt you to scan a barcode. The journalist should use their phone's camera to scan the barcode on the screen.\n\n\nIf they have difficulty scanning the barcode, they can use the \"Manual Entry\" option and use their phone's keyboard to input the random characters that are highlighted in yellow.\n\n\nInside the Google Authenticator app, a new entry for this account will appear on the main screen, with a six digit number that recycles to a new number every thirty seconds. Enter the six digit number under \u201cVerification code\u201d at the bottom of the SecureDrop screen here, and hit enter:\n\n\n\n\nIf Google Authenticator was set up correctly, you will be redirected back to the Admin Interface and will see a flashed message that says \"Two factor token successfully verified for user \nnew username\n!\".\n\n\nYubiKey\n\n\nIf the journalist wishes to use a YubiKey for two-factor authentication, check the box next to \"I'm using a YubiKey\". You will then need to enter the OATH-HOTP Secret Key that your YubiKey is configured with. For more information, read the \nYubiKey Setup Guide\n.\n\n\n\n\nOnce you've configured your YubiKey and entered the Secret Key, click \nAdd user\n. On the next page, enter a code from your YubiKey by inserting it into the workstation and pressing the button.\n\n\n\n\nIf everything was set up correctly, you will be redirected back to the Admin Interface, where you should see a flashed message that says \"Two factor token successfully verified for user \nnew username\n!\".\n\n\nCongratulations! You have successfully set up a journalist on SecureDrop. Make sure the journalist remembers their username and password and always has their 2 factor authentication device in their possession when they attempt to log in to SecureDrop.", 
            "title": "Admin User Manual"
        }, 
        {
            "location": "/support/admin_interface/#admin-interface-guide", 
            "text": "At this point, you (the administrator) should have your own username and password, plus two-factor authentication through either the Google Authenticator app on your smartphone or a YubiKey.", 
            "title": "Admin Interface Guide"
        }, 
        {
            "location": "/support/admin_interface/#adding-users", 
            "text": "Now you can add new logins for the journalists at your news organization who will be checking the system for submissions. Make sure the journalist is physically in the same room as you when you do this, as they will have to create a password and scan a barcode for their two-factor authentication. Since you\u2019re logged in, this is the screen you should see now:   In the top right corner click the \u201cAdmin\u201d link, which should bring you to this page:   Once there, click \u2018Add User\u2019 button, which will take you to this page:   Here, you will hand the keyboard over to the journalist so they can create their own username and password. Once they\u2019re done entering a username and password for themselves, select whether you would like them to also be an administrator (this allows them to add or delete other journalist accounts), and whether they will be using Google Authenticator or a YubiKey for two-factor authentication.  Google Authenticator  If they are using Google Authenticator for their two-factor, they can just proceed to the next page:   At this point, the journalist should make sure they have downloaded the Google Authenticator app to their smartphone. It can be installed from the Apple Store for an iPhone or from the Google Play store for an Android phone. Once you download it and open it, the app does not require setup. It should prompt you to scan a barcode. The journalist should use their phone's camera to scan the barcode on the screen.  If they have difficulty scanning the barcode, they can use the \"Manual Entry\" option and use their phone's keyboard to input the random characters that are highlighted in yellow.  Inside the Google Authenticator app, a new entry for this account will appear on the main screen, with a six digit number that recycles to a new number every thirty seconds. Enter the six digit number under \u201cVerification code\u201d at the bottom of the SecureDrop screen here, and hit enter:   If Google Authenticator was set up correctly, you will be redirected back to the Admin Interface and will see a flashed message that says \"Two factor token successfully verified for user  new username !\".  YubiKey  If the journalist wishes to use a YubiKey for two-factor authentication, check the box next to \"I'm using a YubiKey\". You will then need to enter the OATH-HOTP Secret Key that your YubiKey is configured with. For more information, read the  YubiKey Setup Guide .   Once you've configured your YubiKey and entered the Secret Key, click  Add user . On the next page, enter a code from your YubiKey by inserting it into the workstation and pressing the button.   If everything was set up correctly, you will be redirected back to the Admin Interface, where you should see a flashed message that says \"Two factor token successfully verified for user  new username !\".  Congratulations! You have successfully set up a journalist on SecureDrop. Make sure the journalist remembers their username and password and always has their 2 factor authentication device in their possession when they attempt to log in to SecureDrop.", 
            "title": "Adding Users"
        }, 
        {
            "location": "/support/tails_guide/", 
            "text": "Setting up the Admin and Journalist Tails USB\n\n\nTo log-in SecureDrop and retreived messages sent by sources, the journalist must be using the Tails operating system. The admin must also use Tails to access the \nDocument Interface\n and create new users.\n\n\nIf you followed the \nSecureDrop Installation instructions\n correctly, you should have already created a \njournalist Tails USB\n and an \nadmin Tails USB\n and enabled the persistence volume on each. If you have not, or need to create another \njournalist Tails USB\n for a second journalist, follow the steps below.\n\n\nIf you already know how to boot the \nadmin Tails USB\n or the \njournalist Tails USB\n with persistence, you can skip down to the step 'download the repository'.\n\n\nNote that for all of these instructions to work, you should have already installed the main SecureDrop application.\n\n\nInstalling Tails on USB sticks\n\n\nTails is a live operating system that is run from removable media, such as a DVD or a USB stick. For SecureDrop, you'll need to install Tails onto USB sticks and enable persistent storage.\n\n\nWe recommend creating an initial Tails Live USB or DVD, and then using that to create additional Tails Live USBs with the \nTails Installer\n, a special program that is only available from inside Tails. \nYou will only be able to create persistent volumes on USB sticks that had Tails installed via the Tails Installer\n.\n\n\nThe \nTails website\n has detailed and up-to-date instructions on how to download and verify Tails, and how to create a Tails USB stick. Here are some links to help you out:\n\n\n\n\nDownload and verify the Tails .iso\n\n\nInstall onto a USB stick or SD card\n\n\nCreate \n configure the persistent volume\n\n\n\n\nNote for Mac OS X users manually installing Tails\n\n\nThe Tails documentation for \nmanually installing Tails onto a USB device on Mac OS X\n describes how to copy the downloaded .iso image to a USB stick in Section 4, \"Do the copy\". This section includes the following \ndd\n invocation to copy the .iso to the USB:\n\n\ndd if=[tails.iso] of=/dev/diskX\n\n\n\n\nThis command is \nvery slow\n. In our testing, it took about 18 minutes to copy the .iso to a USB 2.0 drive. You can speed it up by changing the arguments to \ndd\n like so:\n\n\ndd if=[tails.iso] of=/dev/rdiskX bs=1m\n\n\n\n\nNote the change from \ndiskX\n to \nrdiskX\n. This reduced the copy time to 3 minutes for us.\n\n\nConfigure Tails for use with SecureDrop\n\n\nPersistence\n\n\nCreating an encrypted persistent volume will allow you to securely save information in the free space that is left on the Transfer Device. This information will remain available to you even if you reboot Tails. Instructions on how to create and use this volume can be found on the \nTails website\n. You will be asked to select from a list of persistence features, such as personal data. We require that you enable \nall\n features.\n\n\nStart Tails and enable the persistent volume\n\n\nWhen starting Tails, you should see a \"Welcome to Tails\" screen with two options. Select \nYes\n to enable the persistent volume and enter your password. Select \nYes\n to show more options and click \nForward\n. Enter an \nAdministration password\n for use with this specific Tails session and click \nLogin\n.\n\n\nDownload the repository\n\n\nThe rest of the SecureDrop-specific configuration is assisted by files stored in the SecureDrop git repository. To get started, open a terminal and run the following commands to download the git repository. Note that since the repository is fairly large and Tor can be slow, this may take a few minutes.\n\n\ncd ~/Persistent\ngit clone https://github.com/freedomofpress/securedrop.git\n\n\n\n\nPassphrase Database\n\n\nAs mentioned in the installation documentation, we provide a KeePassX password database template to make it easier for admins and journalists to generate strong, unique passphrases and store the securely. Once you have set up Tails with persistence and have cloned the repo, you can set up your personal password database using this template.\n\n\nYou can find the template in \ntails_files/securedrop-keepassx.xml\n inside the securedrop repository. Note that you will not be able to access your passwords if you forget the master password or the location of the key file used to protect the database.\n\n\nTo use the template:\n\n\n\n\nOpen the KeePassX program\n\n\nSelect \nFile\n, \nImport from...\n, and \nKeePassX XML (*.xml)\n\n\nNavigate to the location of \nsecuredrop-keepassx.xml\n, select it, and click \nOpen\n\n\nSet a strong master password or choose a key file to protect the password database\n\n\nClick \nFile\n and \nSave Database As\n\n\nSave the database in the Tails Persistent folder\n\n\n\n\nSet up easy access to the Document Interface\n\n\nTo complete setup of the Admin Workstation or Journalist Workstation, we recommend using the scripts in \ntails_files\n to easily configure Tor to access the \nDocument Interface\n.\n\n\nNavigate to the directory with the setup scripts and begin the installation by typing these commands into the terminal:\n\n\ncd securedrop/tails_files/\nsudo ./install.sh\n\n\n\n\nType the administration password that you selected when starting Tails and hit enter. The installation process will download additional software and then open a text editor with a file called \ntorrc_additions\n.\n\n\nEdit the file, inserting the \nHidServAuth\n information for your SecureDrop instance that you received during the installation process. The values can be found in \ninstall_files/ansible-base/app-document-aths\n. This information includes the address to the Document Interface and your personal authentication string, as seen in the example below:\n\n\n# add HidServAuth lines here\nHidServAuth gu6yn2ml6ns5qupv.onion Us3xMTN85VIj5NOnkNWzW # client: bob\n\n\n\n\nIf you're working on the Admin Workstation, you should also insert the lines found in \napp-ssh-aths\n and \nmon-ssh-aths\n, which will allow you to connect using a secure shell over Tor to the App and Monitor Servers. When you are done, click \nSave\n and close the text editor.\n\n\nThe preceding steps are taken so that no one but the journalist will be able to access to the \nDocument Interface\n, even if they manage to steal the journalist's username, password, and two-factor authentication token.\n\n\nOur \ninstall.sh\n sets up an initialization script that automatically updates Tor's configuration to work with SecureDrop every time you login to Tails. As long as Tails is booted with the persistent volume enabled then you can open the Tor Browser and connect to the Document Interface as normal.\n\n\nCreate bookmarks for Source and Document Interfaces\n\n\nIf you want, you can open the browser and create bookmarks for the Source and Document Interfaces. Navigate to the site you wish to bookmark, select \nBookmarks\n and \nBookmark This Page\n, give the site a useful name (e.g. \nSource Interface\n), and click \nDone\n. Tails will remember the bookmarks even if you reboot.", 
            "title": "Using Tails"
        }, 
        {
            "location": "/support/tails_guide/#setting-up-the-admin-and-journalist-tails-usb", 
            "text": "To log-in SecureDrop and retreived messages sent by sources, the journalist must be using the Tails operating system. The admin must also use Tails to access the  Document Interface  and create new users.  If you followed the  SecureDrop Installation instructions  correctly, you should have already created a  journalist Tails USB  and an  admin Tails USB  and enabled the persistence volume on each. If you have not, or need to create another  journalist Tails USB  for a second journalist, follow the steps below.  If you already know how to boot the  admin Tails USB  or the  journalist Tails USB  with persistence, you can skip down to the step 'download the repository'.  Note that for all of these instructions to work, you should have already installed the main SecureDrop application.", 
            "title": "Setting up the Admin and Journalist Tails USB"
        }, 
        {
            "location": "/support/tails_guide/#installing-tails-on-usb-sticks", 
            "text": "Tails is a live operating system that is run from removable media, such as a DVD or a USB stick. For SecureDrop, you'll need to install Tails onto USB sticks and enable persistent storage.  We recommend creating an initial Tails Live USB or DVD, and then using that to create additional Tails Live USBs with the  Tails Installer , a special program that is only available from inside Tails.  You will only be able to create persistent volumes on USB sticks that had Tails installed via the Tails Installer .  The  Tails website  has detailed and up-to-date instructions on how to download and verify Tails, and how to create a Tails USB stick. Here are some links to help you out:   Download and verify the Tails .iso  Install onto a USB stick or SD card  Create   configure the persistent volume", 
            "title": "Installing Tails on USB sticks"
        }, 
        {
            "location": "/support/tails_guide/#note-for-mac-os-x-users-manually-installing-tails", 
            "text": "The Tails documentation for  manually installing Tails onto a USB device on Mac OS X  describes how to copy the downloaded .iso image to a USB stick in Section 4, \"Do the copy\". This section includes the following  dd  invocation to copy the .iso to the USB:  dd if=[tails.iso] of=/dev/diskX  This command is  very slow . In our testing, it took about 18 minutes to copy the .iso to a USB 2.0 drive. You can speed it up by changing the arguments to  dd  like so:  dd if=[tails.iso] of=/dev/rdiskX bs=1m  Note the change from  diskX  to  rdiskX . This reduced the copy time to 3 minutes for us.", 
            "title": "Note for Mac OS X users manually installing Tails"
        }, 
        {
            "location": "/support/tails_guide/#configure-tails-for-use-with-securedrop", 
            "text": "", 
            "title": "Configure Tails for use with SecureDrop"
        }, 
        {
            "location": "/support/tails_guide/#persistence", 
            "text": "Creating an encrypted persistent volume will allow you to securely save information in the free space that is left on the Transfer Device. This information will remain available to you even if you reboot Tails. Instructions on how to create and use this volume can be found on the  Tails website . You will be asked to select from a list of persistence features, such as personal data. We require that you enable  all  features.", 
            "title": "Persistence"
        }, 
        {
            "location": "/support/tails_guide/#start-tails-and-enable-the-persistent-volume", 
            "text": "When starting Tails, you should see a \"Welcome to Tails\" screen with two options. Select  Yes  to enable the persistent volume and enter your password. Select  Yes  to show more options and click  Forward . Enter an  Administration password  for use with this specific Tails session and click  Login .", 
            "title": "Start Tails and enable the persistent volume"
        }, 
        {
            "location": "/support/tails_guide/#download-the-repository", 
            "text": "The rest of the SecureDrop-specific configuration is assisted by files stored in the SecureDrop git repository. To get started, open a terminal and run the following commands to download the git repository. Note that since the repository is fairly large and Tor can be slow, this may take a few minutes.  cd ~/Persistent\ngit clone https://github.com/freedomofpress/securedrop.git", 
            "title": "Download the repository"
        }, 
        {
            "location": "/support/tails_guide/#passphrase-database", 
            "text": "As mentioned in the installation documentation, we provide a KeePassX password database template to make it easier for admins and journalists to generate strong, unique passphrases and store the securely. Once you have set up Tails with persistence and have cloned the repo, you can set up your personal password database using this template.  You can find the template in  tails_files/securedrop-keepassx.xml  inside the securedrop repository. Note that you will not be able to access your passwords if you forget the master password or the location of the key file used to protect the database.  To use the template:   Open the KeePassX program  Select  File ,  Import from... , and  KeePassX XML (*.xml)  Navigate to the location of  securedrop-keepassx.xml , select it, and click  Open  Set a strong master password or choose a key file to protect the password database  Click  File  and  Save Database As  Save the database in the Tails Persistent folder", 
            "title": "Passphrase Database"
        }, 
        {
            "location": "/support/tails_guide/#set-up-easy-access-to-the-document-interface", 
            "text": "To complete setup of the Admin Workstation or Journalist Workstation, we recommend using the scripts in  tails_files  to easily configure Tor to access the  Document Interface .  Navigate to the directory with the setup scripts and begin the installation by typing these commands into the terminal:  cd securedrop/tails_files/\nsudo ./install.sh  Type the administration password that you selected when starting Tails and hit enter. The installation process will download additional software and then open a text editor with a file called  torrc_additions .  Edit the file, inserting the  HidServAuth  information for your SecureDrop instance that you received during the installation process. The values can be found in  install_files/ansible-base/app-document-aths . This information includes the address to the Document Interface and your personal authentication string, as seen in the example below:  # add HidServAuth lines here\nHidServAuth gu6yn2ml6ns5qupv.onion Us3xMTN85VIj5NOnkNWzW # client: bob  If you're working on the Admin Workstation, you should also insert the lines found in  app-ssh-aths  and  mon-ssh-aths , which will allow you to connect using a secure shell over Tor to the App and Monitor Servers. When you are done, click  Save  and close the text editor.  The preceding steps are taken so that no one but the journalist will be able to access to the  Document Interface , even if they manage to steal the journalist's username, password, and two-factor authentication token.  Our  install.sh  sets up an initialization script that automatically updates Tor's configuration to work with SecureDrop every time you login to Tails. As long as Tails is booted with the persistent volume enabled then you can open the Tor Browser and connect to the Document Interface as normal.  Create bookmarks for Source and Document Interfaces  If you want, you can open the browser and create bookmarks for the Source and Document Interfaces. Navigate to the site you wish to bookmark, select  Bookmarks  and  Bookmark This Page , give the site a useful name (e.g.  Source Interface ), and click  Done . Tails will remember the bookmarks even if you reboot.", 
            "title": "Set up easy access to the Document Interface"
        }, 
        {
            "location": "/support/upgrade/", 
            "text": "Upgrading SecureDrop\n\n\nLook up the version you wish to upgrade \nto\n below.\n\n\n0.3.x\n\n\nThere are two upgrade paths to the SecureDrop 0.3.x version. Upgrading a\nrunning 0.2.1 version is a little different than upgrading a 0.3-pre version of\nSecureDrop. Upgrading a 0.2.1 version will require backing up the existing\ninstance, performing a clean install (including re-installing Ubuntu) and then\nrestoring the backup. Upgrading a 0.3-pre version does not require\nre-installing Ubuntu and has a helper script to perform the backup and restore.\n\n\nIf a networked Admin tails workstation is not provisioned please follow this\n\nguide\n.\n\n\nChoose the correct guide below, depending on the version of SecureDrop you are\ncurrently running:\n\n\n\n\nUpgrade from 0.2.1\n\n\nUpgrade from 0.3pre", 
            "title": "Upgrading SecureDrop"
        }, 
        {
            "location": "/support/upgrade/#upgrading-securedrop", 
            "text": "Look up the version you wish to upgrade  to  below.", 
            "title": "Upgrading SecureDrop"
        }, 
        {
            "location": "/support/upgrade/#03x", 
            "text": "There are two upgrade paths to the SecureDrop 0.3.x version. Upgrading a\nrunning 0.2.1 version is a little different than upgrading a 0.3-pre version of\nSecureDrop. Upgrading a 0.2.1 version will require backing up the existing\ninstance, performing a clean install (including re-installing Ubuntu) and then\nrestoring the backup. Upgrading a 0.3-pre version does not require\nre-installing Ubuntu and has a helper script to perform the backup and restore.  If a networked Admin tails workstation is not provisioned please follow this guide .  Choose the correct guide below, depending on the version of SecureDrop you are\ncurrently running:   Upgrade from 0.2.1  Upgrade from 0.3pre", 
            "title": "0.3.x"
        }, 
        {
            "location": "/support/tails_printing_guide/", 
            "text": "Because Tails is supposed to be as \"amnesiac\" as possible, you want to shield your Tails stick from any extra inputs from, and outputs to, a potentially untrusted network.  This is why \nwe strongly recommend using a printer that does not have WiFi or Bluetooth\n, and hooking up to it using a regular USB cable to print.\n\n\nNormally, any printer should work with Tails \"out of the box.\"  Most difficulties stem from not selecting the right driver (extra software needed for the printer and computer to communicate).  Luckily, Tails has a large number of drivers for just about any popularly manufactured printer on hand, without even having to download new drivers from the web.\n\n\nSetting up a printer with Tails\n\n\nBoot up Tails with both your persistant volume, and an admin passphrase.\n\n\n\n\n\nMake sure your computer is NOT connected to the internet.  This will make sure that your printer set-up is never influenced by a network connection.\n\n\n\n\nPlug in your printer and navigate to Printing.  \"Applications -\n System Tools -\n Administration -\n Printing\".  You will need to authenticate this action with the admin passphrase you set when booting up Tails.\n\n\n\n\n\n\nSelect \"Add\".\n\n\n\n\nImmediately, Tails will recongize the plugged-in printer, and make the best suggestion from its on-board database of printer drivers.\n\n\n\n\nTails will guide you through a default set-up, suggesting the best match for the printer you have.  These choices come from Tails' pre-installed driver database.\n\n\n\n\n\n\nThe recommended driver does not always match the actual make and model of your printer, but starting with the recommendations is a good idea.  Sometimes you get lucky, and Tails suggests a perfect match.  Click forward, and apply your settings.\n\n\n\n\nYou'll notice that the printer is now listed in your Printing Configurations in your persistent storage.\n\n\n\n\nThe only way to be sure you have the right driver is by doing a test print.  Right-click on your new printer config and select \"Properties\" to open its settings, and click \"Print Test Page\".\n\n\n\n\n\n\nIn this initial test, the recommended driver was wrong!  My test page came out garbled, and my printer gave me a warning that I had to manually clear before the page printed.\n\n\n\n\n\n\nDon't worry if this happens to you; you can edit the printer configuration to point it to the correct driver for your model.  Select \"Properties\" again and choose \"Change...\" next to the \"Make and Model\" directive.\n\n\n\n\nTo fix this problem, I selected the CUPS + Gutenprint driver, even though it wasn't recommended.  Click \"Forward\" to save your changes.\n\n\n\n\nDo another test print, checking your printer for indicators that it's working or not.  This time, printing works perfectly.  If you still experience garbled text, try another driver from your selections.  It is a process of trial-and-error.", 
            "title": "Printing with Tails"
        }, 
        {
            "location": "/support/tails_printing_guide/#setting-up-a-printer-with-tails", 
            "text": "Boot up Tails with both your persistant volume, and an admin passphrase.   Make sure your computer is NOT connected to the internet.  This will make sure that your printer set-up is never influenced by a network connection.   Plug in your printer and navigate to Printing.  \"Applications -  System Tools -  Administration -  Printing\".  You will need to authenticate this action with the admin passphrase you set when booting up Tails.    Select \"Add\".   Immediately, Tails will recongize the plugged-in printer, and make the best suggestion from its on-board database of printer drivers.   Tails will guide you through a default set-up, suggesting the best match for the printer you have.  These choices come from Tails' pre-installed driver database.    The recommended driver does not always match the actual make and model of your printer, but starting with the recommendations is a good idea.  Sometimes you get lucky, and Tails suggests a perfect match.  Click forward, and apply your settings.   You'll notice that the printer is now listed in your Printing Configurations in your persistent storage.   The only way to be sure you have the right driver is by doing a test print.  Right-click on your new printer config and select \"Properties\" to open its settings, and click \"Print Test Page\".    In this initial test, the recommended driver was wrong!  My test page came out garbled, and my printer gave me a warning that I had to manually clear before the page printed.    Don't worry if this happens to you; you can edit the printer configuration to point it to the correct driver for your model.  Select \"Properties\" again and choose \"Change...\" next to the \"Make and Model\" directive.   To fix this problem, I selected the CUPS + Gutenprint driver, even though it wasn't recommended.  Click \"Forward\" to save your changes.   Do another test print, checking your printer for indicators that it's working or not.  This time, printing works perfectly.  If you still experience garbled text, try another driver from your selections.  It is a process of trial-and-error.", 
            "title": "Setting up a printer with Tails"
        }, 
        {
            "location": "/support/terminology/", 
            "text": "Terminology\n\n\nA number of terms used in this guide, and in the \nSecureDrop workflow diagram\n, are specific to SecureDrop. The list below attempts to enumerate and define these terms.\n\n\nApp Server\n\n\nThe \nApplication Server\n (or \nApp Server\n for short) runs the SecureDrop application. This server hosts both the website that sources access (\nSource Interface\n) and the website that journalists access (\nDocument Interface\n). You may only connect to this server using Tor.\n\n\nMonitor Server\n\n\nThe \nMonitor Server\n keeps track of the \nApp Server\n and sends out an email alert if something seems wrong. You may only connect to this server using Tor.\n\n\nSource Interface\n\n\nThe \nSource Interface\n is the website that sources will access when submitting documents and communicating with journalists. This site is hosted on the \nApp Server\n and can only be accessed over Tor.\n\n\nDocument Interface\n\n\nThe \nDocument Interface\n is the website that journalists will access when downloading new documents and communicating with sources. This site is hosted on the \nApp Server\n and can only be accessed over Tor.\n\n\nJournalist Workstation\n\n\nThe \nJournalist Workstation\n is a machine that is online and used together with the Tails operating system on the \nonline\n USB stick. This machine will be used to connect to the \nDocument Interface\n, download documents, and move them to the \nSecure Viewing Station\n using the \nTransfer Device\n.\n\n\nAdmin Workstation\n\n\nThe \nAdmin Workstation\n is a machine that the system administrator can use to connect to the \nApp Server\n and the \nMonitor Server\n using Tor and SSH. The administrator will also need to have an Android or iOS device with the Google Authenticator app installed.\n\n\nSecure Viewing Station\n\n\nThe \nSecure Viewing Station\n (or \nSVS\n for short) is a machine that is kept offline and only ever used together with the Tails operating system on the \noffline\n USB stick. This machine will be used to generate GPG keys for all journalists with access to SecureDrop, as well as to decrypt and view submitted documents.\n\n\nSince this machine will never touch the Internet or run an operating system other than Tails on a USB, it does not need a hard drive or network device. We recommend physically removing the drive and any networking cards (wireless, Bluetooth, etc.) from this machine.\n\n\nThis is also referred to as the \"airgapped computer,\" meaning there is a gap between it and a computer connected to the Internet.\n\n\nTwo-Factor Authenticator\n\n\nThere are several places in the SecureDrop architecture where two-factor authentication is used to protect access to sensitive information or systems. These instances use the standard TOTP and/or HOTP algorithms, and so a variety of devices can be used to provide two factor authentication for devices. We recommend using one of:\n\n\n\n\nAn Android or iOS device with \nGoogle Authenticator\n installed\n\n\nA \nYubiKey\n\n\n\n\nTransfer Device\n\n\nThe \nTransfer Device\n is the physical media used to transfer encrypted documents from the \nJournalist Workstation\n to the \nSecure Viewing Station\n. Examples: a dedicated USB stick, CD-R, DVD-R, or SD card.\n\n\nIf you use a USB stick for the transfer device, we recommend using a small one (4GB or less). You will want to securely wipe the entire device at times, and this process takes longer for larger devices.\n\n\nDepending on your threat model, you may wish to only use one-time use media (such as CD-R or DVD-R) for transferring files to and from the SVS. While doing so is cumbersome, it reduces the risk of malware (that could be run simply by opening a malicious submission) exfiltrating sensitive data, such as the private key used to decrypt submissions or the content of decrypted submissions.\n\n\nWhen we use the phrase \"sneakernet\" we mean physically moving documents on the Transfer Device from one computer to another.\n\n\nHardware\n\n\nComputers\n\n\n\n\nApplication Server\n\n\nMonitor Server\n\n\nAdmin Workstation (any spare computer that can be connected to the firewall and can run Tails)\n\n\nFirewall\n\n\n\n\nUSBs/DVDs/CDs\n\n\n\n\nCD, DVD, or USB to use when \ninstalling Ubuntu on the Application Server and the Monitor Server\n.\n\n\nCD, DVD, or USB to use when \nsetting up Tails Live with persistence\n.\n\n\nBrand new USB, marked \ntransfer\n, to use as the \nTransfer Device\n.\n\n\n\n\nAdditionally, you will need a minimum of 4 USB sticks which will become Tails Live USBs with persistence. You should mark two \noffline\n, one \nonline\n, and one \nadmin\n. This is enough to set up a system with one admin and one journalist (note that the same person can perform both of these roles). To add more administrators or journalists, you will need more USB sticks.\n\n\nFinally, each user, whether admin or journalist, will need a \nTwo-Factor Authenticator\n.\n\n\nEach journalist will also need a \nTransfer Device\n for transferring files between the \nSecure Viewing Station\n and their \nJournalist Workstation\n, and a personal GPG key. Make sure you \ncreate GPG keys\n for journalists who do not already have one.\n\n\nThe second \noffline\n Tails Live USB with persistence will be used as the encrypted offline backup. This device will be a copy of the main \nSVS\n Tails Live USB with persistence.\n\n\nRoles and Passphrases\n\n\nThere are several roles for SecureDrop and each requires knowing a unique set of passphrases.\n\n\nPassphrases\n\n\nA SecureDrop installation will require at least two roles, an admin and a journalist, and each role will require a number of strong, unique passphrases. The Secure Viewing Station, which will be used by the journalist, also requires secure and unique passphrases. The list below is meant to be an overview of the accounts, passphrases and two-factor secrets that are required by SecureDrop.\n\n\nWe have created a KeePassX password database template that both the admin and the journalist can use on Tails to ensure they not only generate strong passphrases, but also store them safely. By using KeePassX to generate strong, unique passphrases, you will be able to achieve excellent security while also maintaining usability, since you will only have to personally memorize a small number of strong passphrases. More information about using the password database template on Tails is included in the \nTails Setup Guide\n.\n\n\nAdmin\n\n\nThe admin will be using the \nAdmin Workstation\n with Tails to connect to the App Server and the Monitor Server using Tor and SSH. The tasks performed by the admin will require the following set of passphrases:\n\n\n\n\nA password for the persistent volume on the Admin Live USB.\n\n\nA master password for the KeePassX password manager, which unlocks passphrases to:\n\n\nThe App Server and the Monitor Server (required to be the same).\n\n\nThe network firewall.\n\n\nThe SSH private key and, if set, the key's passphrase.\n\n\nThe GPG key that OSSEC will encrypt alerts to.\n\n\nThe admin's personal GPG key.\n\n\nThe credentials for the email account that OSSEC will send alerts to.\n\n\nThe Hidden Services values required to connect to the App and Monitor Server.\n\n\n\n\n\n\n\n\nThe admin will also need to have an Android or iOS device with the Google Authenticator app installed. This means the admin will also have the following two credentials:\n\n\n\n\nThe secret code for the App Server's two-factor authentication.\n\n\nThe secret code for the Monitor Server's two-factor authentication.\n\n\n\n\nJournalist\n\n\nThe journalist will be using the \nJournalist Workstation\n with Tails to connect to the Document Interface. The tasks performed by the journalist will require the following set of passphrases:\n\n\n\n\nA master password for the persistent volume on the Tails device.\n\n\nA master password for the KeePassX password manager, which unlocks passphrases to:\n\n\nThe Hidden Service value required to connect to the Document Interface.\n\n\nThe Document Interface.\n\n\nThe journalist's personal GPG key.\n\n\n\n\n\n\n\n\nThe journalist will also need to have a two-factor authenticator, such as an Android or iOS device with Google Authenticator installed, or a YubiKey. This means the journalist will also have the following credential:\n\n\n\n\nThe secret code for the Document Interface's two-factor authentication.\n\n\n\n\nSecure Viewing Station\n\n\nThe journalist will be using the \nSecure Viewing Station\n with Tails to decrypt and view submitted documents. The tasks performed by the journalist will require the following passphrases:\n\n\n\n\nA master password for the persistent volume on the Tails device.\n\n\n\n\nThe backup that is created during the installation of SecureDrop is also encrypted with the application's GPG key. The backup is stored on the persistent volume of the Admin Live USB.", 
            "title": "Terminology"
        }, 
        {
            "location": "/support/terminology/#terminology", 
            "text": "A number of terms used in this guide, and in the  SecureDrop workflow diagram , are specific to SecureDrop. The list below attempts to enumerate and define these terms.  App Server  The  Application Server  (or  App Server  for short) runs the SecureDrop application. This server hosts both the website that sources access ( Source Interface ) and the website that journalists access ( Document Interface ). You may only connect to this server using Tor.  Monitor Server  The  Monitor Server  keeps track of the  App Server  and sends out an email alert if something seems wrong. You may only connect to this server using Tor.  Source Interface  The  Source Interface  is the website that sources will access when submitting documents and communicating with journalists. This site is hosted on the  App Server  and can only be accessed over Tor.  Document Interface  The  Document Interface  is the website that journalists will access when downloading new documents and communicating with sources. This site is hosted on the  App Server  and can only be accessed over Tor.  Journalist Workstation  The  Journalist Workstation  is a machine that is online and used together with the Tails operating system on the  online  USB stick. This machine will be used to connect to the  Document Interface , download documents, and move them to the  Secure Viewing Station  using the  Transfer Device .  Admin Workstation  The  Admin Workstation  is a machine that the system administrator can use to connect to the  App Server  and the  Monitor Server  using Tor and SSH. The administrator will also need to have an Android or iOS device with the Google Authenticator app installed.  Secure Viewing Station  The  Secure Viewing Station  (or  SVS  for short) is a machine that is kept offline and only ever used together with the Tails operating system on the  offline  USB stick. This machine will be used to generate GPG keys for all journalists with access to SecureDrop, as well as to decrypt and view submitted documents.  Since this machine will never touch the Internet or run an operating system other than Tails on a USB, it does not need a hard drive or network device. We recommend physically removing the drive and any networking cards (wireless, Bluetooth, etc.) from this machine.  This is also referred to as the \"airgapped computer,\" meaning there is a gap between it and a computer connected to the Internet.  Two-Factor Authenticator  There are several places in the SecureDrop architecture where two-factor authentication is used to protect access to sensitive information or systems. These instances use the standard TOTP and/or HOTP algorithms, and so a variety of devices can be used to provide two factor authentication for devices. We recommend using one of:   An Android or iOS device with  Google Authenticator  installed  A  YubiKey   Transfer Device  The  Transfer Device  is the physical media used to transfer encrypted documents from the  Journalist Workstation  to the  Secure Viewing Station . Examples: a dedicated USB stick, CD-R, DVD-R, or SD card.  If you use a USB stick for the transfer device, we recommend using a small one (4GB or less). You will want to securely wipe the entire device at times, and this process takes longer for larger devices.  Depending on your threat model, you may wish to only use one-time use media (such as CD-R or DVD-R) for transferring files to and from the SVS. While doing so is cumbersome, it reduces the risk of malware (that could be run simply by opening a malicious submission) exfiltrating sensitive data, such as the private key used to decrypt submissions or the content of decrypted submissions.  When we use the phrase \"sneakernet\" we mean physically moving documents on the Transfer Device from one computer to another.", 
            "title": "Terminology"
        }, 
        {
            "location": "/support/terminology/#hardware", 
            "text": "Computers   Application Server  Monitor Server  Admin Workstation (any spare computer that can be connected to the firewall and can run Tails)  Firewall   USBs/DVDs/CDs   CD, DVD, or USB to use when  installing Ubuntu on the Application Server and the Monitor Server .  CD, DVD, or USB to use when  setting up Tails Live with persistence .  Brand new USB, marked  transfer , to use as the  Transfer Device .   Additionally, you will need a minimum of 4 USB sticks which will become Tails Live USBs with persistence. You should mark two  offline , one  online , and one  admin . This is enough to set up a system with one admin and one journalist (note that the same person can perform both of these roles). To add more administrators or journalists, you will need more USB sticks.  Finally, each user, whether admin or journalist, will need a  Two-Factor Authenticator .  Each journalist will also need a  Transfer Device  for transferring files between the  Secure Viewing Station  and their  Journalist Workstation , and a personal GPG key. Make sure you  create GPG keys  for journalists who do not already have one.  The second  offline  Tails Live USB with persistence will be used as the encrypted offline backup. This device will be a copy of the main  SVS  Tails Live USB with persistence.", 
            "title": "Hardware"
        }, 
        {
            "location": "/support/terminology/#roles-and-passphrases", 
            "text": "There are several roles for SecureDrop and each requires knowing a unique set of passphrases.  Passphrases  A SecureDrop installation will require at least two roles, an admin and a journalist, and each role will require a number of strong, unique passphrases. The Secure Viewing Station, which will be used by the journalist, also requires secure and unique passphrases. The list below is meant to be an overview of the accounts, passphrases and two-factor secrets that are required by SecureDrop.  We have created a KeePassX password database template that both the admin and the journalist can use on Tails to ensure they not only generate strong passphrases, but also store them safely. By using KeePassX to generate strong, unique passphrases, you will be able to achieve excellent security while also maintaining usability, since you will only have to personally memorize a small number of strong passphrases. More information about using the password database template on Tails is included in the  Tails Setup Guide .  Admin  The admin will be using the  Admin Workstation  with Tails to connect to the App Server and the Monitor Server using Tor and SSH. The tasks performed by the admin will require the following set of passphrases:   A password for the persistent volume on the Admin Live USB.  A master password for the KeePassX password manager, which unlocks passphrases to:  The App Server and the Monitor Server (required to be the same).  The network firewall.  The SSH private key and, if set, the key's passphrase.  The GPG key that OSSEC will encrypt alerts to.  The admin's personal GPG key.  The credentials for the email account that OSSEC will send alerts to.  The Hidden Services values required to connect to the App and Monitor Server.     The admin will also need to have an Android or iOS device with the Google Authenticator app installed. This means the admin will also have the following two credentials:   The secret code for the App Server's two-factor authentication.  The secret code for the Monitor Server's two-factor authentication.   Journalist  The journalist will be using the  Journalist Workstation  with Tails to connect to the Document Interface. The tasks performed by the journalist will require the following set of passphrases:   A master password for the persistent volume on the Tails device.  A master password for the KeePassX password manager, which unlocks passphrases to:  The Hidden Service value required to connect to the Document Interface.  The Document Interface.  The journalist's personal GPG key.     The journalist will also need to have a two-factor authenticator, such as an Android or iOS device with Google Authenticator installed, or a YubiKey. This means the journalist will also have the following credential:   The secret code for the Document Interface's two-factor authentication.   Secure Viewing Station  The journalist will be using the  Secure Viewing Station  with Tails to decrypt and view submitted documents. The tasks performed by the journalist will require the following passphrases:   A master password for the persistent volume on the Tails device.   The backup that is created during the installation of SecureDrop is also encrypted with the application's GPG key. The backup is stored on the persistent volume of the Admin Live USB.", 
            "title": "Roles and Passphrases"
        }, 
        {
            "location": "/support/training_schedule/", 
            "text": "SecureDrop On-Site Training Schedule\n\n\nThis is a high level schedule for what happens for the 2 days during an on-site install.\n\n\nDay 1: Preparation and Install\n\n\nSetup and Introductions\n\n\nTime: 30min\n\n\nParticipants: all\n\n\nRequired: projector, WiFi access, pre-configured demo SecureDrop instance and 2 laptops to act as the Journalist Workstation and SVS\n\n\n\n\nThe demo instance has multiple sources to try and give a feel of what it will look like at 2 weeks past being public with sources in different states of the reply process\n\n\n\n\nOverview of SecureDrop\n\n\nTime: 2 hours\n\n\nParticipants: journalists, editors, SecureDrop admins, OSSEC alert recipients and anyone else interested\n\n\n\n\nGo over the SecureDrop \nFAQs\n\n\nGo over the SecureDrop environment diagrams\n\n\nImportance of the landing page security and Twitter feedback\n\n\nDemo the source submission process\n\n\nDemo the journalist's processes for checking the Document Interface\n\n\nDemo the journalist's processes for replies\n\n\nDemo working with submissions on the SVS\n\n\nDiscuss scrubbing submitted documents prior to publication\n\n\nOptions for distributing with other news organizations\n\n\nShow example of an OSSEC alert, briefly cover what it does\n\n\nShow example of 'is it up?' Nagios monitoring alerts for Source Interface\n\n\nExplain why the Document Interface does not have 'is it up?' monitoring\n\n\nDiscuss vanity onion URLs with \nShallot\n and \nScallion\n\n\nHow to brand the Source and Document Interface\n\n\nPhysical security of servers and SVS\n\n\nHow to securely publicize the organization's Source Interface Tor URL\n\n\nDistribute important info:\n\n\nThird-party security mailing lists to subscribe to\n\n\nhttps://freedom.press/about/staff\n\n\nhttps://freedom.press/securedrop\n\n\nHardware for SecureDrop\n\n\nSecureDrop Deployment Best Practices\n\n\nSource Best Practice Guide\n\n\nJournalist Best Practice Guide\n\n\nAnswering the client vs. server side crypto debate\n\n\nLink to security audits\n\n\nBunch of other in-progress docs are on securedrop.hackpad.com, many are still in draft form\n\n\n\n\nQuestions\n\n\nTime: 30 min\n\n\nInstalling SecureDrop\n\n\nTime: 6 hours\n\n\n\n\nFollow \nInstalling SecureDrop\n\n\n\n\nDay 2: Journalist and Admin Training\n\n\nJournalist Training\n\n\nTime: 2 separate sessions, about 2 hours each\n\n\nParticipants: journalists and admins\n\n\n\n\nCheck access to previously created Tails USB\n\n\nGenerate personnel GPG keys\n\n\nSetup KeyPassX manager (one for SVS, one for personnel Tails)\n\n\nOptions between YubiKey/Google Authenticator app for 2FA (SSH, Document Interface, FDE and password managers)\n\n\nSecure-deleting and difference between wipe and erase free space on Tails, and when to use each\n\n\nDisaster recovery for 2FA and password manager, personnel GPG keys\n\n\nUpdating Tails\n\n\nBacking up the SVS\n\n\nIf needed, process for distributing the Application's private GPG key to a distant journalist's air-gapped SVS\n\n\nDo complete journalist process walk through twice, either on different days or between morning/afternoon sessions\n\n\nUsing MAT\n\n\nWhat to do for unsupported formats\n\n\n\n\nAdmin training\n\n\nTime: 2 hours\n\n\nParticipants: admins\n\n\n\n\nCheck access to previously created Tails USB\n\n\nGenerate personnel GPG keys\n\n\nSetup KeyPassX manager (one for SVS, one for personnel Tails)\n\n\nOptions between YubiKey/Google Authenticator app for 2FA (SSH, Document Interface, FDE and password managers)\n\n\nSecure-deleting and difference between wipe and erase free space on Tails, and when to use each\n\n\nDisaster recovery for 2FA and password manager, personnel GPG keys\n\n\nUpdating Tails\n\n\nSetting up SSH aliases for the admin Tails workstation\n\n\nHow to use screen or tmux to help prevent being locked out of the system\n\n\nAdding packages to Tails\n\n\nGo over common OSSEC alerts for security updates and daily reports\n\n\nDisaster recovery for application, remote access and SVS\n\n\nCommon admin actions\n\n\nAdding/removing users\n\n\nEnabling logging\n\n\nSending logs to FPF\n\n\nGenerating new Tor hidden services\n\n\nUpdating application's GPG key\n\n\nRe-IP'ing\n\n\nBackups\n\n\nDisk space monitoring\n\n\nUpdating SMTP and OSSEC alert configs\n\n\nChanging passwords (for FDE, persistent volumes, 2FA, KeePass managers...)\n\n\nWhat will happen to local modifications to prod system after updates\n\n\nUpdating SecureDrop Application\n\n\nUnattended upgrades\n\n\nUpgrades that require admin intervention", 
            "title": "Training Schedule"
        }, 
        {
            "location": "/support/training_schedule/#securedrop-on-site-training-schedule", 
            "text": "This is a high level schedule for what happens for the 2 days during an on-site install.", 
            "title": "SecureDrop On-Site Training Schedule"
        }, 
        {
            "location": "/support/training_schedule/#day-1-preparation-and-install", 
            "text": "Setup and Introductions  Time: 30min  Participants: all  Required: projector, WiFi access, pre-configured demo SecureDrop instance and 2 laptops to act as the Journalist Workstation and SVS   The demo instance has multiple sources to try and give a feel of what it will look like at 2 weeks past being public with sources in different states of the reply process   Overview of SecureDrop  Time: 2 hours  Participants: journalists, editors, SecureDrop admins, OSSEC alert recipients and anyone else interested   Go over the SecureDrop  FAQs  Go over the SecureDrop environment diagrams  Importance of the landing page security and Twitter feedback  Demo the source submission process  Demo the journalist's processes for checking the Document Interface  Demo the journalist's processes for replies  Demo working with submissions on the SVS  Discuss scrubbing submitted documents prior to publication  Options for distributing with other news organizations  Show example of an OSSEC alert, briefly cover what it does  Show example of 'is it up?' Nagios monitoring alerts for Source Interface  Explain why the Document Interface does not have 'is it up?' monitoring  Discuss vanity onion URLs with  Shallot  and  Scallion  How to brand the Source and Document Interface  Physical security of servers and SVS  How to securely publicize the organization's Source Interface Tor URL  Distribute important info:  Third-party security mailing lists to subscribe to  https://freedom.press/about/staff  https://freedom.press/securedrop  Hardware for SecureDrop  SecureDrop Deployment Best Practices  Source Best Practice Guide  Journalist Best Practice Guide  Answering the client vs. server side crypto debate  Link to security audits  Bunch of other in-progress docs are on securedrop.hackpad.com, many are still in draft form   Questions  Time: 30 min  Installing SecureDrop  Time: 6 hours   Follow  Installing SecureDrop", 
            "title": "Day 1: Preparation and Install"
        }, 
        {
            "location": "/support/training_schedule/#day-2-journalist-and-admin-training", 
            "text": "Journalist Training  Time: 2 separate sessions, about 2 hours each  Participants: journalists and admins   Check access to previously created Tails USB  Generate personnel GPG keys  Setup KeyPassX manager (one for SVS, one for personnel Tails)  Options between YubiKey/Google Authenticator app for 2FA (SSH, Document Interface, FDE and password managers)  Secure-deleting and difference between wipe and erase free space on Tails, and when to use each  Disaster recovery for 2FA and password manager, personnel GPG keys  Updating Tails  Backing up the SVS  If needed, process for distributing the Application's private GPG key to a distant journalist's air-gapped SVS  Do complete journalist process walk through twice, either on different days or between morning/afternoon sessions  Using MAT  What to do for unsupported formats   Admin training  Time: 2 hours  Participants: admins   Check access to previously created Tails USB  Generate personnel GPG keys  Setup KeyPassX manager (one for SVS, one for personnel Tails)  Options between YubiKey/Google Authenticator app for 2FA (SSH, Document Interface, FDE and password managers)  Secure-deleting and difference between wipe and erase free space on Tails, and when to use each  Disaster recovery for 2FA and password manager, personnel GPG keys  Updating Tails  Setting up SSH aliases for the admin Tails workstation  How to use screen or tmux to help prevent being locked out of the system  Adding packages to Tails  Go over common OSSEC alerts for security updates and daily reports  Disaster recovery for application, remote access and SVS  Common admin actions  Adding/removing users  Enabling logging  Sending logs to FPF  Generating new Tor hidden services  Updating application's GPG key  Re-IP'ing  Backups  Disk space monitoring  Updating SMTP and OSSEC alert configs  Changing passwords (for FDE, persistent volumes, 2FA, KeePass managers...)  What will happen to local modifications to prod system after updates  Updating SecureDrop Application  Unattended upgrades  Upgrades that require admin intervention", 
            "title": "Day 2: Journalist and Admin Training"
        }, 
        {
            "location": "/technical_information/hardware/", 
            "text": "Hardware for SecureDrop\n\n\nThis document outlines requirements and recommended hardware for use with SecureDrop. If you have any questions, please contact securedrop@freedom.press.\n\n\nSecureDrop Infrastructure\n\n\nThe SecureDrop infrastructure consists of different components, all of which are listed below. We recommend you read through the whole document and figure out what makes the most sense for your organization.\n\n\nApp Server and Monitor Server\n\n\nThe \nApplication Server\n (or \nApp Server\n for short) runs the SecureDrop application. This server hosts both the website that sources access (\nSource Interface\n) and the website that journalists access (\nDocument Interface\n). The \nMonitor Server\n keeps track of the \nApp Server\n and sends out email alerts if something seems wrong. SecureDrop requires that you have:\n\n\n\n\n1 x physical server for the \nApplication Server\n, which will run the SecureDrop application.\n\n\n1 x physical server for the \nMonitor Server\n, which sends emails about issues with the \nApp Server\n.\n\n\n\n\nThe SecureDrop application requires a 64-bit operating system. You can repurpose old hardware if it is capable of running 64-bit Ubuntu. Otherwise, we recommend you get two \nIntel NUCs\n with power cords. Make sure you also get the cables required to connect the NUCs to a monitor. Additionally, you will need to get the following \ntwo 240 GB hard drives\n and a \n4 GB (2GBx2) memory kit\n.\n\n\nPotential BIOS issue\n\n\nThe previous release of SecureDrop (0.2.1) was based on Ubuntu 12.04.1 (precise). We encountered issues installing this version of SecureDrop on some types of Intel NUCs. The problem manifested after installing Ubuntu on the NUC. The installation would complete, but rebooting after installation would not succeed.\n\n\nWe have not encountered this or any similar problems in testing the current release (0.3) with the Intel NUCs. Since 0.3 is based on Ubuntu 14.04.1 (trusty), we believe the issue has been resolved by Ubuntu.\n\n\nIf you do encounter issues booting Ubuntu on the NUCs, try \nupdating the BIOS according to these instructions\n.\n\n\nSecure Viewing Station (SVS)\n\n\nThe \nSecure Viewing Station\n is a machine that is kept offline and only ever used together with the Tails operating system. This machine will be used to generate GPG keys for all journalists with access to SecureDrop, as well as decrypt and view submitted documents. Since this machine will never touch the Internet or run an operating system other than Tails, it does not need a hard drive or network device. We recommend the following:\n\n\n\n\n1 x laptop without a hard drive, network interface card or wireless units.\n\n\n1 x encrypted, external hard drive to store documents on while working on a story.\n\n\n1 x offline printer.\n\n\n\n\nWe recommend that you either buy or repurpose an old laptop. Another option is to buy an \nIntel NUC\n with a power cord and \n4 GB of memory\n, but note that you will also need to get a monitor and a wired keyboard and mouse.\n\n\nPrinters\n\n\nCareful consideration should be given to the printer used with the SVS. Most printers today have wireless functionality (WiFi or Bluetooth connectivity) which should be \navoided\n because it could be used to compromise the airgap.\n\n\nUnfortunately, it is difficult to find printers that work with Tails, and it is increasingly difficult to find non-wireless printers at all. To assist you, we have compiled the following partial list of airgap-safe printers that have been tested and are known to work with Tails:\n\n\n\n\n\n\n\n\nModel\n\n\nTesting Date\n\n\nTails Versions\n\n\nPrice (new)\n\n\nPrice (used)\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nHP LaserJet 400 M401n\n\n\n06/2015\n\n\n1.4\n\n\n$178.60 (Amazon)\n\n\n$115.00 (Amazon)\n\n\nMonochrome laser printer. Heavy (10 lbs.) When adding the printer in Tails, you need to set \"Make and model\" to \"HP LaserJet 400 CUPS+Gutenprint v5.2.9\".\n\n\n\n\n\n\nHP Deskjet 6940\n\n\n04/2015\n\n\n1.3.2\n\n\n$639.99 (Amazon)\n\n\n$196.99 (Amazon)\n\n\nMonochrome Inkjet printer\n\n\n\n\n\n\n\n\nIf you know of another model of printer that fits our requirements and works with Tails, please submit a pull request to add it to this list.\n\n\nTails and Transfer Devices\n\n\nThe \nTransfer Device\n is the physical media used to transfer encrypted documents from the \nJournalist Workstation\n to the \nSecure Viewing Station\n. Additional devices are needed to run Tails. We recommend the following:\n\n\n\n\n1 x physical media for the system administrator to run Tails on.\n\n\n1 x physical media for the system administrator to transfer files with.\n\n\n1 x physical media for the journalist to run Tails on.\n\n\n1 x physical media for the journalist to transfer files with.\n\n\n1 x physical media with Tails for the \nSecure Viewing Station\n.\n\n\n1 x physical media with Tails for the \nSecure Viewing Station\n (backup).\n\n\n\n\nWe recommend getting \n16 GB Leef Supra\n USB sticks to run Tails on, and \n4 GB Patriot\n USB sticks to use when transferring files. Each journalist should have two USB sticks. For the Secure Viewing Station and backup, we recommend getting \nCorsair 64 GB\n USB sticks.\n\n\nAnother alternative setup exists in which journalists do not transfer files on a USB stick, but instead use a CD-R or DVD-R. The encrypted documents are copied to the CD-R or DVD-R, then decrypted and read on the Secure Viewing Station. The disks are destroyed after first use. We recommend getting a \nSamsung model burner\n for this purpose.\n\n\nTwo-factor authentication device\n\n\nTwo-factor authentication is used when connecting to different parts of the SecureDrop system, including the \nDocument Interface\n. We recommend the following for each administrator or journalist with access to the system:\n\n\n\n\n1 x two-factor authentication device\n\n\n\n\nWe recommend using either a smartphone capable of running \nGoogle Authenticator\n or a \nYubiKey\n.\n\n\nNetwork firewall\n\n\nAn important part of SecureDrop's security model involves segmenting the infrastructure from the Internet and/or the corporate environment. For this reason, we recommend that you get:\n\n\n\n\n1 x firewall with pfSense and minimum three NICs.\n\n\n\n\nWe recommend getting a Netgate firewall with pfSense pre-installed, and you can choose from a firewall with \n2 GB of system memory\n or one with \n4 GB of system memory\n.\n\n\nNetwork Switch\n\n\nIf you firewall has fewer than \nfour\n NICs, you will need an additional Ethernet switch to perform installation and maintenance tasks with the Admin Workstation. This switch is generally useful because it allows you to connect to your firewall's LAN port without taking down either of the SecureDrop servers, which is useful if you want to perform maintenance tasks from the Admin Workstation on the SecureDrop installation or the firewall configuration. This is possible without the switch if your firewall has enough ports, but you will need to perform some additional initial firewall setup to get this to work.\n\n\nWe recommend getting a \n5-port Netgear ProSafe Ethernet Switch\n or similar.\n\n\nAppendix\n\n\nNotes on the NUCs\n\n\nThere are a variety of available NUCs, and each different model supports different hardware specs and peripheral connectors. For hardware testing, we have been using:\n\n\nD34010WYK\n\n\nAmazon link w/ picture\n\n\nWe have been using one for the Secure Viewing Station (SVS), which is air-gapped and never connected to the Internet, and one for the Admin Workstation, which is Internet-connected and is used to run the Ansible playbooks. You could also use an existing workstation, or a recycled machine, for this purpose, assuming you feel confident that this machine has not been physically compromised in any way.\n\n\nThis machine has USB 3.0, which is nice for booting live USBs quickly and for transferring large files. It has two available display connectors: Mini-HDMI and DisplayPort.\n\n\nDC3217IYE\n\n\nAmazon link w/ picture\n\n\nWe have been using two of these for the Application and Monitor servers (app and mon). They only have USB 2.0, which is not so bad because the Linux installation using live USB is a one-time process and you rarely transfer files directly from the servers. They also only have one available display connector: HDMI.", 
            "title": "Hardware Requirements"
        }, 
        {
            "location": "/technical_information/hardware/#hardware-for-securedrop", 
            "text": "This document outlines requirements and recommended hardware for use with SecureDrop. If you have any questions, please contact securedrop@freedom.press.", 
            "title": "Hardware for SecureDrop"
        }, 
        {
            "location": "/technical_information/hardware/#securedrop-infrastructure", 
            "text": "The SecureDrop infrastructure consists of different components, all of which are listed below. We recommend you read through the whole document and figure out what makes the most sense for your organization.  App Server and Monitor Server  The  Application Server  (or  App Server  for short) runs the SecureDrop application. This server hosts both the website that sources access ( Source Interface ) and the website that journalists access ( Document Interface ). The  Monitor Server  keeps track of the  App Server  and sends out email alerts if something seems wrong. SecureDrop requires that you have:   1 x physical server for the  Application Server , which will run the SecureDrop application.  1 x physical server for the  Monitor Server , which sends emails about issues with the  App Server .   The SecureDrop application requires a 64-bit operating system. You can repurpose old hardware if it is capable of running 64-bit Ubuntu. Otherwise, we recommend you get two  Intel NUCs  with power cords. Make sure you also get the cables required to connect the NUCs to a monitor. Additionally, you will need to get the following  two 240 GB hard drives  and a  4 GB (2GBx2) memory kit .  Potential BIOS issue  The previous release of SecureDrop (0.2.1) was based on Ubuntu 12.04.1 (precise). We encountered issues installing this version of SecureDrop on some types of Intel NUCs. The problem manifested after installing Ubuntu on the NUC. The installation would complete, but rebooting after installation would not succeed.  We have not encountered this or any similar problems in testing the current release (0.3) with the Intel NUCs. Since 0.3 is based on Ubuntu 14.04.1 (trusty), we believe the issue has been resolved by Ubuntu.  If you do encounter issues booting Ubuntu on the NUCs, try  updating the BIOS according to these instructions .  Secure Viewing Station (SVS)  The  Secure Viewing Station  is a machine that is kept offline and only ever used together with the Tails operating system. This machine will be used to generate GPG keys for all journalists with access to SecureDrop, as well as decrypt and view submitted documents. Since this machine will never touch the Internet or run an operating system other than Tails, it does not need a hard drive or network device. We recommend the following:   1 x laptop without a hard drive, network interface card or wireless units.  1 x encrypted, external hard drive to store documents on while working on a story.  1 x offline printer.   We recommend that you either buy or repurpose an old laptop. Another option is to buy an  Intel NUC  with a power cord and  4 GB of memory , but note that you will also need to get a monitor and a wired keyboard and mouse.  Printers  Careful consideration should be given to the printer used with the SVS. Most printers today have wireless functionality (WiFi or Bluetooth connectivity) which should be  avoided  because it could be used to compromise the airgap.  Unfortunately, it is difficult to find printers that work with Tails, and it is increasingly difficult to find non-wireless printers at all. To assist you, we have compiled the following partial list of airgap-safe printers that have been tested and are known to work with Tails:     Model  Testing Date  Tails Versions  Price (new)  Price (used)  Notes      HP LaserJet 400 M401n  06/2015  1.4  $178.60 (Amazon)  $115.00 (Amazon)  Monochrome laser printer. Heavy (10 lbs.) When adding the printer in Tails, you need to set \"Make and model\" to \"HP LaserJet 400 CUPS+Gutenprint v5.2.9\".    HP Deskjet 6940  04/2015  1.3.2  $639.99 (Amazon)  $196.99 (Amazon)  Monochrome Inkjet printer     If you know of another model of printer that fits our requirements and works with Tails, please submit a pull request to add it to this list.  Tails and Transfer Devices  The  Transfer Device  is the physical media used to transfer encrypted documents from the  Journalist Workstation  to the  Secure Viewing Station . Additional devices are needed to run Tails. We recommend the following:   1 x physical media for the system administrator to run Tails on.  1 x physical media for the system administrator to transfer files with.  1 x physical media for the journalist to run Tails on.  1 x physical media for the journalist to transfer files with.  1 x physical media with Tails for the  Secure Viewing Station .  1 x physical media with Tails for the  Secure Viewing Station  (backup).   We recommend getting  16 GB Leef Supra  USB sticks to run Tails on, and  4 GB Patriot  USB sticks to use when transferring files. Each journalist should have two USB sticks. For the Secure Viewing Station and backup, we recommend getting  Corsair 64 GB  USB sticks.  Another alternative setup exists in which journalists do not transfer files on a USB stick, but instead use a CD-R or DVD-R. The encrypted documents are copied to the CD-R or DVD-R, then decrypted and read on the Secure Viewing Station. The disks are destroyed after first use. We recommend getting a  Samsung model burner  for this purpose.  Two-factor authentication device  Two-factor authentication is used when connecting to different parts of the SecureDrop system, including the  Document Interface . We recommend the following for each administrator or journalist with access to the system:   1 x two-factor authentication device   We recommend using either a smartphone capable of running  Google Authenticator  or a  YubiKey .  Network firewall  An important part of SecureDrop's security model involves segmenting the infrastructure from the Internet and/or the corporate environment. For this reason, we recommend that you get:   1 x firewall with pfSense and minimum three NICs.   We recommend getting a Netgate firewall with pfSense pre-installed, and you can choose from a firewall with  2 GB of system memory  or one with  4 GB of system memory .  Network Switch  If you firewall has fewer than  four  NICs, you will need an additional Ethernet switch to perform installation and maintenance tasks with the Admin Workstation. This switch is generally useful because it allows you to connect to your firewall's LAN port without taking down either of the SecureDrop servers, which is useful if you want to perform maintenance tasks from the Admin Workstation on the SecureDrop installation or the firewall configuration. This is possible without the switch if your firewall has enough ports, but you will need to perform some additional initial firewall setup to get this to work.  We recommend getting a  5-port Netgear ProSafe Ethernet Switch  or similar.", 
            "title": "SecureDrop Infrastructure"
        }, 
        {
            "location": "/technical_information/hardware/#appendix", 
            "text": "Notes on the NUCs  There are a variety of available NUCs, and each different model supports different hardware specs and peripheral connectors. For hardware testing, we have been using:  D34010WYK  Amazon link w/ picture  We have been using one for the Secure Viewing Station (SVS), which is air-gapped and never connected to the Internet, and one for the Admin Workstation, which is Internet-connected and is used to run the Ansible playbooks. You could also use an existing workstation, or a recycled machine, for this purpose, assuming you feel confident that this machine has not been physically compromised in any way.  This machine has USB 3.0, which is nice for booting live USBs quickly and for transferring large files. It has two available display connectors: Mini-HDMI and DisplayPort.  DC3217IYE  Amazon link w/ picture  We have been using two of these for the Application and Monitor servers (app and mon). They only have USB 2.0, which is not so bad because the Linux installation using live USB is a one-time process and you rarely transfer files directly from the servers. They also only have one available display connector: HDMI.", 
            "title": "Appendix"
        }, 
        {
            "location": "/technical_information/deployment_practices/", 
            "text": "SecureDrop Deployment Best Practices\n\n\nSecureDrop is only as secure as the environment that surrounds it. To keep sources safe, the news organization's website must employ a set of basic security best practices or else you risk losing any source protection provided by SecureDrop.\n\n\nWhile SecureDrop itself is located on a Tor hidden service, news organizations also need to create a SecureDrop landing page that will explain how SecureDrop works, give sources instructions on how to access the Tor hidden service, and disclose the risks.\n\n\nIt is important to keep in mind that implementing SecureDrop will bring more attention to your organization by security researchers, hackers, and other like-minded people. If the landing page minimum requirements are not implemented, these people will be sure to loudly point this out on Twitter and other blogs as a #SecurityFail. This will discourage potential sources from using your instance of SecureDrop. However, it can easily be avoided by following the below best practices.\n\n\nFreedom of the Press Foundation eventually plans to \nlist all of those SecureDrop onion URLs\n as \"verified\" on its website that meet the minimum requirements for deployment best practices. If your organization cannot follow the minimum guidelines we cannot recommend to users that your SecureDrop instance is safe to use.\n\n\nIn addition to implementing the below best practices, it is strongly recommended that you have a reputable security firm perform a security review of your organization's public website prior to launching an instance of SecureDrop. Upon request, we can help put you in touch with a few security firms if you need more assistance.\n\n\nLanding Page\n\n\nURL and location\n\n\nIdeally you would not use a separate subdomain, but would use a path at your top-level domain, e.g. organization.com/securedrop. This is because TLS does not encrypt the hostname, so a SecureDrop user whose connection is being monitored would be trivially discovered.\n\n\nHTTPS only (no mixed content)\n\n\nMost news organizations, \nin fact almost all\n, do not use HTTPS encryption by default. This is the number one minimum requirement for the SecureDrop landing page on your website. Without HTTPS, a source can easily be exposed as a visitor to your site.\n\n\nThis may be difficult if your website serves advertisements or utilizes a legacy content delivery network. You should make sure the SecureDrop landing page does not serve ads of any kind, even if the rest of your site does.\n\n\nIf you do not serve ads on any of your site, you should also consider switching your whole site over to HTTPS by default immediately. If you do serve ads, consider pressuring your ad networks to enable you to switch to HTTPS for your entire website in the future.\n\n\nIf your website needs to operate in both HTTPS and HTTP mode, use protocol-relative URLs for resources such as ../images, CSS and JavaScript in common templates to ensure your page does not end up in a mixed HTTPS/HTTP state.\n\n\nConsider submitting your domain to be included in the \nChrome HSTS preload list\n if you can meet all of the requirements. This will tell web browsers that the site is only ever to be reached over HTTPS.\n\n\nPerfect Forward Secrecy\n\n\nPerfect Forward Secrecy (PFS) is a property of encryption protocols that ensures each SSL session has a unique key, meaning that if the key is compromised in the future it can't be used to decrypt previously recorded SSL sessions. You may need to talk to your CA (certificate authority) and CDN (content delivery network) for this, although our recommended configuration below provides forward secrecy.\n\n\nSSL certificate recommendations\n\n\nRegardless of where you choose to purchase your SSL cert and which CA issues it, you'll often be asked to generate the private key and a CSR (certificate signing request).\n\n\nWhen you do this, it's imperative that you use SHA-2 as the hashing algorithm instead of SHA-1, which is \nbeing phased out\n. You should also choose a key size of \nat least\n 2048 bits. These parameters will help ensure that the encryption used on your landing page is sufficiently strong. The following example OpenSSL command will create a private key and CSR with a 4096-bit key length and a SHA-256 signature:\n\n\nopenssl req -new -newkey rsa:4096 -nodes -sha256 -keyout domain.com.key -out domain.com.csr\n\n\n\nDon't load any resources (scripts, web fonts, etc.) from 3rd parties (e.g. Google Web Fonts)\n\n\nThis will potentially leak information about sources to third parties, which can more easily be accessed by law enforcement agencies. Simply copy them to your server and serve them yourself to avoid this problem.\n\n\nDon't use 3rd party analytics, tracking, or advertising\n\n\nMost news websites, even those that are non-profits, use 3rd-party analytics tools or tracking bugs on their websites. It is vital that these are disabled for the SecureDrop landing page.\n\n\nBoth the New Yorker and Forbes were heavily criticized when launching their version of SecureDrop because their landing page contained trackers. They were claiming they were going to great lengths to protect source's anonymity, but by having trackers on their landing page, also opened up multiple avenues for third parties to collect information on those sources. This information can potentially be accessed by law enforcement or intelligence agencies and could unduly expose a source.\n\n\nApply applicable security headers\n\n\nSecurity headers give instructions to the web browser on how to handle requests from the web application. These headers set strict rules for the browser and help mitigate against potential attacks. Given the browser is a main avenue for attack, it is important these headers are as strict as possible.\n\n\nYou can use the site \nsecurityheaders.com\n to easily test your website's security headers.\n\n\nIf you use Apache, you can use these:\n\n\nHeader set Cache-Control \"max-age=0, no-cache, no-store, must-revalidate\"\nHeader edit Set-Cookie ^(.*)$ $;HttpOnly\nHeader set Pragma \"no-cache\"\nHeader set Expires \"-1\"\nHeader always append X-Frame-Options: DENY\nHeader set X-XSS-Protection: \"1; mode=block\"\nHeader set X-Content-Type-Options: nosniff\nHeader set X-Content-Security-Policy: \"default-src 'self'\"\nHeader set X-Download-Options: noopen\nHeader set X-Permitted-Cross-Domain-Policies: master-only\nHeader set Content-Security-Policy: \"default-src 'self'\"\n\n\n\nAdditional Apache configuration\n\n\nTo enforce HTTPS/SSL always, you need to set up redirection within the HTTP (port 80) virtual host:\n\n\nRewriteEngine On\nRewriteCond %{HTTPS} off\nRewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}\n\n\n\nIn your SSL (port 443) virtual host, set up HSTS and use these settings to give preference to the most secure cipher suites:\n\n\nHeader set Strict-Transport-Security \"max-age=16070400; includeSubDomains\"\nSSLProtocol all -SSLv2 -SSLv3\nSSLHonorCipherOrder on\nSSLCompression off\nSSLCipherSuite EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5\n\n\n\nYou'll need to run \na2enmod headers ssl rewrite\n for all these to work. You should also set \nServerSignature Off\n and \nServerTokens Prod\n, typically in /etc/apache2/conf.d/security.\n\n\nIf you use Nginx, \nyou can follow this link\n and use the configuration file provided by ProPublica.\n\n\nChange detection monitoring for the web application configuration and landing page content\n\n\nOSSEC is a free and open source host-based intrusion detection suite that includes a file integrity monitor. More information can be found \nhere.\n\n\nDon't log access to the landing page in the webserver\n\n\nHere's an Apache example that would exclude the landing page from logging:\n\n\nSetEnvIf Request_URI \"^/securedrop$\" dontlog\nCustomLog logs/access_log common env=!dontlog\n\n\n\nSecurity suggestions\n\n\nTo guard your landing page against being modified by an attacker and directing sources to a rogue SecureDrop instance, you will need good security practices applying to the machine where it is hosted. Whether it's a VPS in the cloud or dedicated server in your office, you should consider the following:\n\n\n\n\nBrute force login protection (see sshguard or fail2ban)\n\n\nDisable root SSH login\n\n\nUse SSH keys instead of passwords\n\n\nUse long, random and complex passwords\n\n\nFirewall rules to restrict accessible ports (see iptables or ufw)\n\n\nAppArmor, grsecurity, SELINUX, modsecurity\n\n\nIntrusion and/or integrity monitoring (see Logwatch, OSSEC, Snort, rkhunter, chkrootkit)\n\n\nDowntime alerts (Nagios or Pingdom)\n\n\nTwo-factor authentication (see libpam-google-authenticator, libpam-yubico)\n\n\n\n\nIt's preferable for the landing page to have its own segmented environment instead of hosting it alongside other sites running potentially vulnerable software or content management systems. Check that user and group file permissions are locked down and that modules or gateway interfaces for dynamic scripting languages are not enabled. You don't want any unnecessary code or services running as this increases the attack surface.\n\n\nMinimum requirements for the SecureDrop environment\n\n\n\n\nThe Application and Monitor servers should be dedicated physical machines, not virtual machines.\n\n\nA trusted location to host the servers. The servers should be hosted in a location that is owned or occupied by the organization to ensure that their legal can not be bypassed with gag orders.\n\n\nThe SecureDrop servers should be on a separate internet connection or completely segmented from corporate network.\n\n\nAll traffic from the corporate network should be blocked at the SecureDrop's point of demarcation.\n\n\nVideo monitoring should be recorded of the server area and the organizations safe.\n\n\nJournalist should ensure that while using the air-gapped viewing station they are in an area without video cameras.\n\n\nAn established monitoring plan and incident response plan. Who will receive the OSSEC alerts and what their response plan will be? These should cover technical outages and a compromised environment plan.\n\n\n\n\nSuggested\n\n\n\n\nFor publicly advertised SecureDrop instances display the Source Interface's hidden service onion address on all of the organization public pages.\n\n\nMirror the Tor Browser and Tails so sources do not have to visit \ntorproject.org\n to download it.\n\n\n\n\nWhole Site Changes\n\n\nIdeally, some or all of the following changes are made to improve the overall security of the path to the landing page and obfuscate traffic analysis.\n\n\n\n\nMake the entire site available under 'ssl.washingtonpost.com' (ideally without the '.ssl' prefix).\n\n\nThat way, the domain won't be as suspicious as it is right now. I suspect that this is more or less the only content hosted on the domain.\n\n\nInclude an iframe for all (or a random subset of) visitors, loading this particular URL (hidden).\n\n\nBy artificially generating traffic to the endpoint it will be harder to distinguish these from other, 'real' requests.\n\n\nUse a random delay for adding the iframe (otherwise the 'pairing' with the initial HTTP request may distinguish this traffic).\n\n\nPrint the link, URL and info block on the dead trees (the paper), as others have suggested.\n\n\nAdd \nHSTS headers\n.", 
            "title": "Deployment Practices"
        }, 
        {
            "location": "/technical_information/deployment_practices/#securedrop-deployment-best-practices", 
            "text": "SecureDrop is only as secure as the environment that surrounds it. To keep sources safe, the news organization's website must employ a set of basic security best practices or else you risk losing any source protection provided by SecureDrop.  While SecureDrop itself is located on a Tor hidden service, news organizations also need to create a SecureDrop landing page that will explain how SecureDrop works, give sources instructions on how to access the Tor hidden service, and disclose the risks.  It is important to keep in mind that implementing SecureDrop will bring more attention to your organization by security researchers, hackers, and other like-minded people. If the landing page minimum requirements are not implemented, these people will be sure to loudly point this out on Twitter and other blogs as a #SecurityFail. This will discourage potential sources from using your instance of SecureDrop. However, it can easily be avoided by following the below best practices.  Freedom of the Press Foundation eventually plans to  list all of those SecureDrop onion URLs  as \"verified\" on its website that meet the minimum requirements for deployment best practices. If your organization cannot follow the minimum guidelines we cannot recommend to users that your SecureDrop instance is safe to use.  In addition to implementing the below best practices, it is strongly recommended that you have a reputable security firm perform a security review of your organization's public website prior to launching an instance of SecureDrop. Upon request, we can help put you in touch with a few security firms if you need more assistance.  Landing Page  URL and location  Ideally you would not use a separate subdomain, but would use a path at your top-level domain, e.g. organization.com/securedrop. This is because TLS does not encrypt the hostname, so a SecureDrop user whose connection is being monitored would be trivially discovered.  HTTPS only (no mixed content)  Most news organizations,  in fact almost all , do not use HTTPS encryption by default. This is the number one minimum requirement for the SecureDrop landing page on your website. Without HTTPS, a source can easily be exposed as a visitor to your site.  This may be difficult if your website serves advertisements or utilizes a legacy content delivery network. You should make sure the SecureDrop landing page does not serve ads of any kind, even if the rest of your site does.  If you do not serve ads on any of your site, you should also consider switching your whole site over to HTTPS by default immediately. If you do serve ads, consider pressuring your ad networks to enable you to switch to HTTPS for your entire website in the future.  If your website needs to operate in both HTTPS and HTTP mode, use protocol-relative URLs for resources such as ../images, CSS and JavaScript in common templates to ensure your page does not end up in a mixed HTTPS/HTTP state.  Consider submitting your domain to be included in the  Chrome HSTS preload list  if you can meet all of the requirements. This will tell web browsers that the site is only ever to be reached over HTTPS.  Perfect Forward Secrecy  Perfect Forward Secrecy (PFS) is a property of encryption protocols that ensures each SSL session has a unique key, meaning that if the key is compromised in the future it can't be used to decrypt previously recorded SSL sessions. You may need to talk to your CA (certificate authority) and CDN (content delivery network) for this, although our recommended configuration below provides forward secrecy.  SSL certificate recommendations  Regardless of where you choose to purchase your SSL cert and which CA issues it, you'll often be asked to generate the private key and a CSR (certificate signing request).  When you do this, it's imperative that you use SHA-2 as the hashing algorithm instead of SHA-1, which is  being phased out . You should also choose a key size of  at least  2048 bits. These parameters will help ensure that the encryption used on your landing page is sufficiently strong. The following example OpenSSL command will create a private key and CSR with a 4096-bit key length and a SHA-256 signature:  openssl req -new -newkey rsa:4096 -nodes -sha256 -keyout domain.com.key -out domain.com.csr  Don't load any resources (scripts, web fonts, etc.) from 3rd parties (e.g. Google Web Fonts)  This will potentially leak information about sources to third parties, which can more easily be accessed by law enforcement agencies. Simply copy them to your server and serve them yourself to avoid this problem.  Don't use 3rd party analytics, tracking, or advertising  Most news websites, even those that are non-profits, use 3rd-party analytics tools or tracking bugs on their websites. It is vital that these are disabled for the SecureDrop landing page.  Both the New Yorker and Forbes were heavily criticized when launching their version of SecureDrop because their landing page contained trackers. They were claiming they were going to great lengths to protect source's anonymity, but by having trackers on their landing page, also opened up multiple avenues for third parties to collect information on those sources. This information can potentially be accessed by law enforcement or intelligence agencies and could unduly expose a source.  Apply applicable security headers  Security headers give instructions to the web browser on how to handle requests from the web application. These headers set strict rules for the browser and help mitigate against potential attacks. Given the browser is a main avenue for attack, it is important these headers are as strict as possible.  You can use the site  securityheaders.com  to easily test your website's security headers.  If you use Apache, you can use these:  Header set Cache-Control \"max-age=0, no-cache, no-store, must-revalidate\"\nHeader edit Set-Cookie ^(.*)$ $;HttpOnly\nHeader set Pragma \"no-cache\"\nHeader set Expires \"-1\"\nHeader always append X-Frame-Options: DENY\nHeader set X-XSS-Protection: \"1; mode=block\"\nHeader set X-Content-Type-Options: nosniff\nHeader set X-Content-Security-Policy: \"default-src 'self'\"\nHeader set X-Download-Options: noopen\nHeader set X-Permitted-Cross-Domain-Policies: master-only\nHeader set Content-Security-Policy: \"default-src 'self'\"  Additional Apache configuration  To enforce HTTPS/SSL always, you need to set up redirection within the HTTP (port 80) virtual host:  RewriteEngine On\nRewriteCond %{HTTPS} off\nRewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}  In your SSL (port 443) virtual host, set up HSTS and use these settings to give preference to the most secure cipher suites:  Header set Strict-Transport-Security \"max-age=16070400; includeSubDomains\"\nSSLProtocol all -SSLv2 -SSLv3\nSSLHonorCipherOrder on\nSSLCompression off\nSSLCipherSuite EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5  You'll need to run  a2enmod headers ssl rewrite  for all these to work. You should also set  ServerSignature Off  and  ServerTokens Prod , typically in /etc/apache2/conf.d/security.  If you use Nginx,  you can follow this link  and use the configuration file provided by ProPublica.  Change detection monitoring for the web application configuration and landing page content  OSSEC is a free and open source host-based intrusion detection suite that includes a file integrity monitor. More information can be found  here.  Don't log access to the landing page in the webserver  Here's an Apache example that would exclude the landing page from logging:  SetEnvIf Request_URI \"^/securedrop$\" dontlog\nCustomLog logs/access_log common env=!dontlog  Security suggestions  To guard your landing page against being modified by an attacker and directing sources to a rogue SecureDrop instance, you will need good security practices applying to the machine where it is hosted. Whether it's a VPS in the cloud or dedicated server in your office, you should consider the following:   Brute force login protection (see sshguard or fail2ban)  Disable root SSH login  Use SSH keys instead of passwords  Use long, random and complex passwords  Firewall rules to restrict accessible ports (see iptables or ufw)  AppArmor, grsecurity, SELINUX, modsecurity  Intrusion and/or integrity monitoring (see Logwatch, OSSEC, Snort, rkhunter, chkrootkit)  Downtime alerts (Nagios or Pingdom)  Two-factor authentication (see libpam-google-authenticator, libpam-yubico)   It's preferable for the landing page to have its own segmented environment instead of hosting it alongside other sites running potentially vulnerable software or content management systems. Check that user and group file permissions are locked down and that modules or gateway interfaces for dynamic scripting languages are not enabled. You don't want any unnecessary code or services running as this increases the attack surface.  Minimum requirements for the SecureDrop environment   The Application and Monitor servers should be dedicated physical machines, not virtual machines.  A trusted location to host the servers. The servers should be hosted in a location that is owned or occupied by the organization to ensure that their legal can not be bypassed with gag orders.  The SecureDrop servers should be on a separate internet connection or completely segmented from corporate network.  All traffic from the corporate network should be blocked at the SecureDrop's point of demarcation.  Video monitoring should be recorded of the server area and the organizations safe.  Journalist should ensure that while using the air-gapped viewing station they are in an area without video cameras.  An established monitoring plan and incident response plan. Who will receive the OSSEC alerts and what their response plan will be? These should cover technical outages and a compromised environment plan.   Suggested   For publicly advertised SecureDrop instances display the Source Interface's hidden service onion address on all of the organization public pages.  Mirror the Tor Browser and Tails so sources do not have to visit  torproject.org  to download it.", 
            "title": "SecureDrop Deployment Best Practices"
        }, 
        {
            "location": "/technical_information/deployment_practices/#whole-site-changes", 
            "text": "Ideally, some or all of the following changes are made to improve the overall security of the path to the landing page and obfuscate traffic analysis.   Make the entire site available under 'ssl.washingtonpost.com' (ideally without the '.ssl' prefix).  That way, the domain won't be as suspicious as it is right now. I suspect that this is more or less the only content hosted on the domain.  Include an iframe for all (or a random subset of) visitors, loading this particular URL (hidden).  By artificially generating traffic to the endpoint it will be harder to distinguish these from other, 'real' requests.  Use a random delay for adding the iframe (otherwise the 'pairing' with the initial HTTP request may distinguish this traffic).  Print the link, URL and info block on the dead trees (the paper), as others have suggested.  Add  HSTS headers .", 
            "title": "Whole Site Changes"
        }, 
        {
            "location": "/technical_information/ossec_alerts/", 
            "text": "OSSEC Guide\n\n\nSetting up OSSEC alerts\n\n\nOSSEC is an open source host-based intrusion detection system (IDS) that we use to perform log analysis, file integrity checking, policy monitoring, rootkit detection and real-time alerting. It is installed on the Monitor Server and constitutes that machine's main function. OSSEC works in a server-agent scheme, that is, the OSSEC server extends its existing functions to the App Server through an agent installed on that server, covering monitoring for both machines.\n\n\nIn order to receive email alerts from OSSEC, you need to supply several settings to Ansible in the playbook for your environment. If you don't already have a working mail server or don't know what to do, then see the section below about using Gmail as a fallback option. We assume that you're working out of the 'securedrop' directory you cloned the code into, and editing install_files/ansible-base/prod-specific.yml prior to installing SecureDrop.\n\n\nWhat you need:\n\n The GPG key that OSSEC will encrypt alerts to\n\n The email address that will receive alerts from OSSEC\n\n Information for your SMTP server or relay (hostname, port) and the fingerprint of its TLS certificate\n\n Credentials for the email address that OSSEC will send alerts from\n\n\nReceiving email alerts from OSSEC requires that you have an SMTP relay to route the emails. You can use an SMTP relay hosted internally, if one is available to you, or you can use a third-party SMTP relay such as Gmail. The SMTP relay does not have to be on the same domain as the destination email address, i.e. smtp.gmail.com can be the SMTP relay and the destination address can be securedrop@freedom.press.\n\n\nWhile there are risks involved with receiving these alerts, such as information leakage through metadata, we feel the benefit of knowing how the SecureDrop servers are functioning is worth it. If a third-party SMTP relay is used, that relay will be able to learn information such as the IP address the alerts were sent from, the subject of the alerts, and the destination email address the alerts were sent to. Only the body of an alert email is encrypted with the recipient's GPG key. A third-party SMTP relay could also prevent you from receiving any or specific alerts.\n\n\nThe SMTP relay that you use should support SASL authentication and SMTP TLS protocols TLSv1.2, TLSv1.1, and TLSv1. Most enterprise email solutions should be able to meet those requirements.\n\n\nThese are the values you must specify in \nprod-specific.yml\n:\n\n\n\n\nGPG public key used to encrypt OSSEC alerts: \nossec_alert_gpg_public_key\n\n\nFingerprint of key used when encrypting OSSEC alerts: \nossec_gpg_fpr\n\n\nThe email address that will receive alerts from OSSEC: \nossec_alert_email\n\n\nThe reachable hostname of your SMTP relay: \nsmtp_relay\n\n\nThe secure SMTP port of your SMTP relay: \nsmtp_relay_port\n\n   (typically 25, 587, or 465. must support TLS encryption)\n\n\nEmail username to authenticate to the SMTP relay: \nsasl_username\n\n\nDomain name of the email used to send OSSEC alerts: \nsasl_domain\n\n\nPassword of the email used to send OSSEC alerts: \nsasl_password\n\n\nThe fingerprint of your SMTP relay: \nsmtp_relay_fingerprint\n\n\n\n\nIf you don't know what value to enter for one of these, please ask your organization's email administrator for the full configuration before proceeding. It is better to get these right the first time rather than changing them after SecureDrop is installed. If you're not sure of the correct \nsmtp_relay_port\n number, you can use a simple mail client such as Thunderbird to test different settings or a port scanning tool such as nmap to see what's open. You could also use telnet to make sure you can connect to an SMTP server, which will always transmit a reply code of 220 meaning \"Service ready\" upon a successful connection.\n\n\nThe \nsmtp_relay\n mail server hostname is often, but not always, different from the \nsasl_domain\n, e.g. smtp.gmail.com and gmail.com.\n\n\nIn some cases, authentication or transport encryption mechanisms will vary and you may require later edits to the Postfix configuration (mainly /etc/postfix/main.cf) on the Monitor Server in order to get alerts to work. You can consult \nPostfix's official documentation\n for help, although we've described some common scenarios in the \ntroubleshooting section\n of this document.\n\n\nIf you have your GPG public key handy, copy it to install_files/ansible-base and then specify the filename in the \nossec_alert_gpg_public_key\n line of prod-specific.yml.\n\n\nIf you don't have your GPG key ready, you can run GnuPG on the command line in order to find, import and export your public key. It's best to copy the key from a trusted and verified source, but you can also request it from keyservers using the known longid. Looking it up by email address could cause you to obtain a wrong, malicious or expired key. Just replace the key ID in the following example with yours:\n\n\nDownload your key and import it into the local keyring:\n\n\ngpg --recv-keys 0xFD720AD9EBA34B1C\n\n\n\nExport the key to a file:\n\n\ngpg --export -a 0xFD720AD9EBA34B1C \n ossec.pub\n\n\n\nCopy the key to a directory where it's accessible by the SecureDrop installation:\n\n\ncp ossec.pub install_files/ansible-base/\n\n\n\nThe fingerprint is a unique identifier for an encryption key that is longer than, but contains both the shortid and longid. The value for \nossec_gpg_fpr\n must be the full 40-character GPG fingerprint for this same key, with all capital letters and no spaces.  Here's a series of commands that will retrieve and format the fingerprint per our requirements:\n\n\ngpg --with-colons --fingerprint 0xFD720AD9EBA34B1C | grep \"^fpr\" | cut -d: -f10\n\n\n\nNext you specify the e-mail that you'll be sending alerts to, as \nossec_alert_email\n. This could be your work email, or an alias for a group of IT administrators at your organization. It helps for your mail client to have the ability to filter the numerous messages from OSSEC into a separate folder.\n\n\nNow you can move on to the SMTP and SASL settings, which are straightforward. These correspond to the outgoing e-mail address used to send the alerts instead of where you're receiving them. If that e-mail is ossec@news-org.com, the \nsasl_username\n would be ossec and \nsasl_domain\n would be news-org.com.\n\n\nThe Postfix configuration enforces certificate verification, and requires a fingerprint to be set. You can retrieve the fingerprint of your SMTP relay by running the command below (all on one line). Please note that you will need to replace \nsmtp.gmail.com\n and \n587\n with the correct domain and port for your SMTP relay.\n\n\nopenssl s_client -connect smtp.gmail.com:587 -starttls smtp \n /dev/null 2\n/dev/null | openssl x509 -fingerprint -noout -in /dev/stdin | cut -d'=' -f2\n\n\n\nIf you are using Tails, you will not be able to connect directly with \nopenssl s_client\n due to the default firewall rules. To get around this, proxy the requests over Tor by adding \ntorify\n at the beginning of the command.\n\n\nThe output of the command above should look like the following (\nlast updated Tue Jul 21 17:46:42 UTC 2015\n):\n\n\n6D:87:EE:CB:D0:37:2F:88:B8:29:06:FB:35:F4:65:00:7F:FD:84:29\n\n\n\nFinally, enter the result as \nsmtp_relay_fingerprint\n. Save \nprod-specific.yml\n, exit the editor and \nproceed with the installation\n by running the playbooks.\n\n\nUsing Gmail for OSSEC alerts\n\n\nIt's easy to get SecureDrop to use Google's servers to deliver the alerts, but it's not ideal from a security perspective. This option should be regarded as a backup plan. Keep in mind that you're leaking metadata about the timing of alerts to a third party \u2014 the alerts are encrypted and only readable to you, however that timing may prove useful to an attacker.\n\n\nFirst you should \nsign up for a new account\n. You may use an existing Gmail account, but it's best to compartmentalize these alerts from any of your other activities. Choose a strong and random passphrase. Skip the creation of a Google+ profile and continue straight to Gmail. Once the account is created you can log out and provide the values for \nsasl_username\n as your new Gmail username (without the domain), \nsasl_domain\n, which is typically gmail.com (or your custom Google Apps domain), and \nsasl_passwd\n for the password. The \nsmtp_relay\n is smtp.gmail.com, \nsmtp_relay_port\n is 587 and \nsmtp_relay_fingerprint\n is noted in the example above.\n\n\nFor enhanced security we recommend enabling \nGoogle's 2-Step Verification\n for any Gmail account that is dedicated to sending the alert emails. With 2-Step Verification enabled, you won't use the normal account password in this configuration \u2014 it will not work; instead you must navigate (using the settings in the top right) to Account \n Signing in \n App passwords, and generate a new App password which you will use as the \nsasl_passwd\n.\n\n\nTroubleshooting\n\n\nSome OSSEC alerts should begin to arrive as soon as the installation has finished.\n\n\nThe easiest way to test that OSSEC is working is to SSH to the Monitor Server and run \nservice ossec restart\n. This will trigger an Alert level 3 saying: \"Ossec server started.\"\n\n\nSo you've finished installing SecureDrop, but you haven't received any OSSEC alerts. First, check your spam/junk folder. If they're not in there, then most likely there is a problem with the email configuration. In order to find out what's wrong, you'll have to SSH to the Monitor Server and take a look at the logs. To examine the mail log created by Postfix, run the following command:\n\n\ntail /var/log/mail.log\n\n\n\nThe output will show you attempts to send the alerts and provide hints as to what went wrong. Here's a few possibilities and how to fix them:\n\n\n\n\n\n\n\n\nProblem\n\n\nSolution\n\n\n\n\n\n\n\n\n\n\nConnection timed out\n\n\nCheck that the hostname and port is correct in the relayhost line of /etc/postfix/main.cf\n\n\n\n\n\n\nServer certificate not verified\n\n\nCheck that smtp_tls_fingerprint_cert_match in /etc/postfix/main.cf is correct\n\n\n\n\n\n\nAuthentication failure\n\n\nEdit /etc/postfix/sasl_passwd and make sure the username, domain and password are correct. Run \npostmap /etc/postfix/sasl_passwd\n to update when finished.\n\n\n\n\n\n\n\n\nAfter making changes to the Postfix configuration, you should run \nservice postfix reload\n and test the new settings by restarting the OSSEC service.\n\n\nNote that if you change the SMTP relay port after installation for any reason, you must update not only the relayhost in main.cf and contents of sasl_passwd, but also the iptables firewall rules applying to outbound SMTP which are in \n/etc/network/iptables/rules_v4\n. We recommend modifying and re-running the Ansible playbook instead of doing things like this.\n\n\nOther log files that may contain useful information:\n\n\n\n\n\n\n/var/log/procmail.log - there will be lines in this for every alert that gets triggered\n\n\n\n\n\n\n/var/ossec/logs/ossec.log - OSSEC's general operation is covered here\n\n\n\n\n\n\n/var/ossec/logs/alerts/alerts.log - contains details of every recent OSSEC alert\n\n\n\n\n\n\n/var/log/syslog - messages related to grsecurity, AppArmor and iptables\n\n\n\n\n\n\nAnalyzing the Alerts\n\n\nUnderstanding the contents of the OSSEC alerts requires a background and knowledge in Linux systems administration. They may be confusing, and at first it will be hard to tell between a genuine problem and a fluke. You should examine these alerts regularly to ensure that the SecureDrop environment has not been compromised in any way, and follow up on any particularly concerning messages with direct investigation.\n\n\nIf you believe that the system is behaving abnormally, you should contact us at support@freedom.press for help.", 
            "title": "OSSEC Alerts"
        }, 
        {
            "location": "/technical_information/ossec_alerts/#ossec-guide", 
            "text": "", 
            "title": "OSSEC Guide"
        }, 
        {
            "location": "/technical_information/ossec_alerts/#setting-up-ossec-alerts", 
            "text": "OSSEC is an open source host-based intrusion detection system (IDS) that we use to perform log analysis, file integrity checking, policy monitoring, rootkit detection and real-time alerting. It is installed on the Monitor Server and constitutes that machine's main function. OSSEC works in a server-agent scheme, that is, the OSSEC server extends its existing functions to the App Server through an agent installed on that server, covering monitoring for both machines.  In order to receive email alerts from OSSEC, you need to supply several settings to Ansible in the playbook for your environment. If you don't already have a working mail server or don't know what to do, then see the section below about using Gmail as a fallback option. We assume that you're working out of the 'securedrop' directory you cloned the code into, and editing install_files/ansible-base/prod-specific.yml prior to installing SecureDrop.  What you need:  The GPG key that OSSEC will encrypt alerts to  The email address that will receive alerts from OSSEC  Information for your SMTP server or relay (hostname, port) and the fingerprint of its TLS certificate  Credentials for the email address that OSSEC will send alerts from  Receiving email alerts from OSSEC requires that you have an SMTP relay to route the emails. You can use an SMTP relay hosted internally, if one is available to you, or you can use a third-party SMTP relay such as Gmail. The SMTP relay does not have to be on the same domain as the destination email address, i.e. smtp.gmail.com can be the SMTP relay and the destination address can be securedrop@freedom.press.  While there are risks involved with receiving these alerts, such as information leakage through metadata, we feel the benefit of knowing how the SecureDrop servers are functioning is worth it. If a third-party SMTP relay is used, that relay will be able to learn information such as the IP address the alerts were sent from, the subject of the alerts, and the destination email address the alerts were sent to. Only the body of an alert email is encrypted with the recipient's GPG key. A third-party SMTP relay could also prevent you from receiving any or specific alerts.  The SMTP relay that you use should support SASL authentication and SMTP TLS protocols TLSv1.2, TLSv1.1, and TLSv1. Most enterprise email solutions should be able to meet those requirements.  These are the values you must specify in  prod-specific.yml :   GPG public key used to encrypt OSSEC alerts:  ossec_alert_gpg_public_key  Fingerprint of key used when encrypting OSSEC alerts:  ossec_gpg_fpr  The email address that will receive alerts from OSSEC:  ossec_alert_email  The reachable hostname of your SMTP relay:  smtp_relay  The secure SMTP port of your SMTP relay:  smtp_relay_port \n   (typically 25, 587, or 465. must support TLS encryption)  Email username to authenticate to the SMTP relay:  sasl_username  Domain name of the email used to send OSSEC alerts:  sasl_domain  Password of the email used to send OSSEC alerts:  sasl_password  The fingerprint of your SMTP relay:  smtp_relay_fingerprint   If you don't know what value to enter for one of these, please ask your organization's email administrator for the full configuration before proceeding. It is better to get these right the first time rather than changing them after SecureDrop is installed. If you're not sure of the correct  smtp_relay_port  number, you can use a simple mail client such as Thunderbird to test different settings or a port scanning tool such as nmap to see what's open. You could also use telnet to make sure you can connect to an SMTP server, which will always transmit a reply code of 220 meaning \"Service ready\" upon a successful connection.  The  smtp_relay  mail server hostname is often, but not always, different from the  sasl_domain , e.g. smtp.gmail.com and gmail.com.  In some cases, authentication or transport encryption mechanisms will vary and you may require later edits to the Postfix configuration (mainly /etc/postfix/main.cf) on the Monitor Server in order to get alerts to work. You can consult  Postfix's official documentation  for help, although we've described some common scenarios in the  troubleshooting section  of this document.  If you have your GPG public key handy, copy it to install_files/ansible-base and then specify the filename in the  ossec_alert_gpg_public_key  line of prod-specific.yml.  If you don't have your GPG key ready, you can run GnuPG on the command line in order to find, import and export your public key. It's best to copy the key from a trusted and verified source, but you can also request it from keyservers using the known longid. Looking it up by email address could cause you to obtain a wrong, malicious or expired key. Just replace the key ID in the following example with yours:  Download your key and import it into the local keyring:  gpg --recv-keys 0xFD720AD9EBA34B1C  Export the key to a file:  gpg --export -a 0xFD720AD9EBA34B1C   ossec.pub  Copy the key to a directory where it's accessible by the SecureDrop installation:  cp ossec.pub install_files/ansible-base/  The fingerprint is a unique identifier for an encryption key that is longer than, but contains both the shortid and longid. The value for  ossec_gpg_fpr  must be the full 40-character GPG fingerprint for this same key, with all capital letters and no spaces.  Here's a series of commands that will retrieve and format the fingerprint per our requirements:  gpg --with-colons --fingerprint 0xFD720AD9EBA34B1C | grep \"^fpr\" | cut -d: -f10  Next you specify the e-mail that you'll be sending alerts to, as  ossec_alert_email . This could be your work email, or an alias for a group of IT administrators at your organization. It helps for your mail client to have the ability to filter the numerous messages from OSSEC into a separate folder.  Now you can move on to the SMTP and SASL settings, which are straightforward. These correspond to the outgoing e-mail address used to send the alerts instead of where you're receiving them. If that e-mail is ossec@news-org.com, the  sasl_username  would be ossec and  sasl_domain  would be news-org.com.  The Postfix configuration enforces certificate verification, and requires a fingerprint to be set. You can retrieve the fingerprint of your SMTP relay by running the command below (all on one line). Please note that you will need to replace  smtp.gmail.com  and  587  with the correct domain and port for your SMTP relay.  openssl s_client -connect smtp.gmail.com:587 -starttls smtp   /dev/null 2 /dev/null | openssl x509 -fingerprint -noout -in /dev/stdin | cut -d'=' -f2  If you are using Tails, you will not be able to connect directly with  openssl s_client  due to the default firewall rules. To get around this, proxy the requests over Tor by adding  torify  at the beginning of the command.  The output of the command above should look like the following ( last updated Tue Jul 21 17:46:42 UTC 2015 ):  6D:87:EE:CB:D0:37:2F:88:B8:29:06:FB:35:F4:65:00:7F:FD:84:29  Finally, enter the result as  smtp_relay_fingerprint . Save  prod-specific.yml , exit the editor and  proceed with the installation  by running the playbooks.  Using Gmail for OSSEC alerts  It's easy to get SecureDrop to use Google's servers to deliver the alerts, but it's not ideal from a security perspective. This option should be regarded as a backup plan. Keep in mind that you're leaking metadata about the timing of alerts to a third party \u2014 the alerts are encrypted and only readable to you, however that timing may prove useful to an attacker.  First you should  sign up for a new account . You may use an existing Gmail account, but it's best to compartmentalize these alerts from any of your other activities. Choose a strong and random passphrase. Skip the creation of a Google+ profile and continue straight to Gmail. Once the account is created you can log out and provide the values for  sasl_username  as your new Gmail username (without the domain),  sasl_domain , which is typically gmail.com (or your custom Google Apps domain), and  sasl_passwd  for the password. The  smtp_relay  is smtp.gmail.com,  smtp_relay_port  is 587 and  smtp_relay_fingerprint  is noted in the example above.  For enhanced security we recommend enabling  Google's 2-Step Verification  for any Gmail account that is dedicated to sending the alert emails. With 2-Step Verification enabled, you won't use the normal account password in this configuration \u2014 it will not work; instead you must navigate (using the settings in the top right) to Account   Signing in   App passwords, and generate a new App password which you will use as the  sasl_passwd .", 
            "title": "Setting up OSSEC alerts"
        }, 
        {
            "location": "/technical_information/ossec_alerts/#troubleshooting", 
            "text": "Some OSSEC alerts should begin to arrive as soon as the installation has finished.  The easiest way to test that OSSEC is working is to SSH to the Monitor Server and run  service ossec restart . This will trigger an Alert level 3 saying: \"Ossec server started.\"  So you've finished installing SecureDrop, but you haven't received any OSSEC alerts. First, check your spam/junk folder. If they're not in there, then most likely there is a problem with the email configuration. In order to find out what's wrong, you'll have to SSH to the Monitor Server and take a look at the logs. To examine the mail log created by Postfix, run the following command:  tail /var/log/mail.log  The output will show you attempts to send the alerts and provide hints as to what went wrong. Here's a few possibilities and how to fix them:     Problem  Solution      Connection timed out  Check that the hostname and port is correct in the relayhost line of /etc/postfix/main.cf    Server certificate not verified  Check that smtp_tls_fingerprint_cert_match in /etc/postfix/main.cf is correct    Authentication failure  Edit /etc/postfix/sasl_passwd and make sure the username, domain and password are correct. Run  postmap /etc/postfix/sasl_passwd  to update when finished.     After making changes to the Postfix configuration, you should run  service postfix reload  and test the new settings by restarting the OSSEC service.  Note that if you change the SMTP relay port after installation for any reason, you must update not only the relayhost in main.cf and contents of sasl_passwd, but also the iptables firewall rules applying to outbound SMTP which are in  /etc/network/iptables/rules_v4 . We recommend modifying and re-running the Ansible playbook instead of doing things like this.  Other log files that may contain useful information:    /var/log/procmail.log - there will be lines in this for every alert that gets triggered    /var/ossec/logs/ossec.log - OSSEC's general operation is covered here    /var/ossec/logs/alerts/alerts.log - contains details of every recent OSSEC alert    /var/log/syslog - messages related to grsecurity, AppArmor and iptables", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/technical_information/ossec_alerts/#analyzing-the-alerts", 
            "text": "Understanding the contents of the OSSEC alerts requires a background and knowledge in Linux systems administration. They may be confusing, and at first it will be hard to tell between a genuine problem and a fluke. You should examine these alerts regularly to ensure that the SecureDrop environment has not been compromised in any way, and follow up on any particularly concerning messages with direct investigation.  If you believe that the system is behaving abnormally, you should contact us at support@freedom.press for help.", 
            "title": "Analyzing the Alerts"
        }, 
        {
            "location": "/technical_information/yubikey_setup/", 
            "text": "Using YubiKey with the Document Interface\n\n\nThis is a quick and dirty guide to using YubiKey for two-factor authentication on the Document Interface.\n\n\nDownload the YubiKey personalization tool\n\n\nYubiKeys are modifiable using the YubiKey personalization tool, which is available for Windows/Mac/Linux and can be downloaded here: https://www.yubico.com/products/services-software/personalization-tools/use/. If you wish to use Tails, install the YubiKey personalization tool on the command line with \napt-get install yubikey-personalization-gui\n.\n\n\nOnce you have downloaded and installed the personalization program, insert your YubiKey and launch the program. If you are running Tails, you need to launch the program as the root user.\n\n\nSet up OATH-HOTP\n\n\nWhen you first launch the program, you will see the heading \"Personalize your YubiKey in:\" following by a list of configuration options. The SecureDrop admin interface uses \"OATH-HOTP mode\", so click that entry in the list.\n\n\nThe next window will have the heading \"Program in OATH-HOTP mode\" and will offer you a choice between \"Quick\" or \"Advanced\" configuration. Choose \"Quick\".\n\n\nFirst choose the configuration slot for this token. Unless you already use the YubiKey for something else, you should choose Configuration Slot 1. If you already using the first slot, choose Configuration Slot 2. Note that you will have to press and hold for several seconds to use the token from Slot 2 instead of the one in Slot 1. See the \nYubiKey manual\n for more information.\n\n\nIn the section title \"OATH-HOTP parameters\", you will need to change the default settings. First, \nuncheck\n the checkbox for \"OATH Token Identifier (6 bytes)\". Also uncheck the box for \"Hide secret\". This will display the data in the \"Secret Key (20 bytes hex)\" field. This data cannot be copied unless the \"Hide secret\" box is unchecked.\n\n\n\n\nNow that you have chosen the correct configuration options for use with SecureDrop, click the \"Write Configuration\" button. Click through the warning about overwriting Configuration Slot 1 and choose a location to save the log file.\n\n\nWhen the configuration has been successfully written, you should see green text saying \"YubiKey successfully configured\" at the top of the window.\n\n\nSet up a user with the OATH-HOTP secret key\n\n\nNow you will have to set up a new user for the Document Interface with the secret key from the \"Secret Key (20 bytes hex)\" field.\n\n\nmanage.py\n\n\nIf you have just installed SecureDrop, you will need to add the first admin user to the Document Interface with \nmanage.py\n. \ncd\n to the \nSECUREDROP_ROOT\n, which is \n/vagrant/securedrop\n in development and \n/var/www/securedrop\n in production. Run \n./manage.py add_admin\n. Fill in the username and password prompts. When it asks \"Is this admin using a YubiKey [HOTP]? (y/N)\", type \"y\", then enter. At the \"Please configure your YubiKey and enter the secret:\" prompt, enter the Secret Key value and hit enter. Note that the spaces are optional. When you are done, you should see a message saying \"Admin '(your username)' successfully added\".\n\n\nAdmin Interface\n\n\nIf you already have an admin user configured, use the \"Add user\" page in the admin interface to add new users. If they want to use YubiKey for two-factor, just check the \"I'm using a YubiKey [HOTP]\" checkbox and enter the Secret Key in the \"HOTP secret\" field.", 
            "title": "Yubikey Setup"
        }, 
        {
            "location": "/technical_information/yubikey_setup/#using-yubikey-with-the-document-interface", 
            "text": "This is a quick and dirty guide to using YubiKey for two-factor authentication on the Document Interface.", 
            "title": "Using YubiKey with the Document Interface"
        }, 
        {
            "location": "/technical_information/yubikey_setup/#download-the-yubikey-personalization-tool", 
            "text": "YubiKeys are modifiable using the YubiKey personalization tool, which is available for Windows/Mac/Linux and can be downloaded here: https://www.yubico.com/products/services-software/personalization-tools/use/. If you wish to use Tails, install the YubiKey personalization tool on the command line with  apt-get install yubikey-personalization-gui .  Once you have downloaded and installed the personalization program, insert your YubiKey and launch the program. If you are running Tails, you need to launch the program as the root user.", 
            "title": "Download the YubiKey personalization tool"
        }, 
        {
            "location": "/technical_information/yubikey_setup/#set-up-oath-hotp", 
            "text": "When you first launch the program, you will see the heading \"Personalize your YubiKey in:\" following by a list of configuration options. The SecureDrop admin interface uses \"OATH-HOTP mode\", so click that entry in the list.  The next window will have the heading \"Program in OATH-HOTP mode\" and will offer you a choice between \"Quick\" or \"Advanced\" configuration. Choose \"Quick\".  First choose the configuration slot for this token. Unless you already use the YubiKey for something else, you should choose Configuration Slot 1. If you already using the first slot, choose Configuration Slot 2. Note that you will have to press and hold for several seconds to use the token from Slot 2 instead of the one in Slot 1. See the  YubiKey manual  for more information.  In the section title \"OATH-HOTP parameters\", you will need to change the default settings. First,  uncheck  the checkbox for \"OATH Token Identifier (6 bytes)\". Also uncheck the box for \"Hide secret\". This will display the data in the \"Secret Key (20 bytes hex)\" field. This data cannot be copied unless the \"Hide secret\" box is unchecked.   Now that you have chosen the correct configuration options for use with SecureDrop, click the \"Write Configuration\" button. Click through the warning about overwriting Configuration Slot 1 and choose a location to save the log file.  When the configuration has been successfully written, you should see green text saying \"YubiKey successfully configured\" at the top of the window.", 
            "title": "Set up OATH-HOTP"
        }, 
        {
            "location": "/technical_information/yubikey_setup/#set-up-a-user-with-the-oath-hotp-secret-key", 
            "text": "Now you will have to set up a new user for the Document Interface with the secret key from the \"Secret Key (20 bytes hex)\" field.  manage.py  If you have just installed SecureDrop, you will need to add the first admin user to the Document Interface with  manage.py .  cd  to the  SECUREDROP_ROOT , which is  /vagrant/securedrop  in development and  /var/www/securedrop  in production. Run  ./manage.py add_admin . Fill in the username and password prompts. When it asks \"Is this admin using a YubiKey [HOTP]? (y/N)\", type \"y\", then enter. At the \"Please configure your YubiKey and enter the secret:\" prompt, enter the Secret Key value and hit enter. Note that the spaces are optional. When you are done, you should see a message saying \"Admin '(your username)' successfully added\".  Admin Interface  If you already have an admin user configured, use the \"Add user\" page in the admin interface to add new users. If they want to use YubiKey for two-factor, just check the \"I'm using a YubiKey [HOTP]\" checkbox and enter the Secret Key in the \"HOTP secret\" field.", 
            "title": "Set up a user with the OATH-HOTP secret key"
        }, 
        {
            "location": "/technical_information/threat_model/", 
            "text": "SecureDrop Threat Model\n\n\nThis document outlines the threat model for SecureDrop 0.3 and is inspired by the \nthreat model document Adam Langley wrote for Pond\n. The threat model is defined in terms of what each possible adversary can achieve. This document is still a work in progress. If you have questions or comments, please open an issue on GitHub or send an email to securedrop@freedom.press.\n\n\nAssumptions\n\n\nAssumptions about the source\n\n\n\n\nThe source acts reasonably and in good faith, e.g. if the user were to give their codename or private key material to the attacker that would be unreasonable.\n\n\nThe source would like to remain anonymous, even against a forensic attacker.\n\n\nThe source obtains an authentic copy of Tails or the Tor Browser.\n\n\nThe source follows our \nguidelines\n for using SecureDrop.\n\n\nThe source is accessing an authentic SecureDrop site.\n\n\n\n\nAssumptions about the admin and the journalist\n\n\n\n\nThe admin and the journalist act reasonably and in good faith, e.g. if either of them were to give their credentials or private key material to the attacker that would be unreasonable.\n\n\nThe admin and the journalist obtain authentic copies of Tails.\n\n\nThe journalist follows our \nguidelines\n for using SecureDrop and working with submitted documents.\n\n\n\n\nAssumptions about the person installing SecureDrop, usually the admin\n\n\n\n\nThe person acts reasonably and in good faith, e.g. if he or she were to give the attacker system-level access that would be unreasonable.\n\n\nThe person obtains an authentic copy of SecureDrop and its dependencies.\n\n\nThe person follows our guidelines for \ndeploying the system, setting up the landing page for the organization\n, and for \ninstalling SecureDrop\n.\n\n\n\n\nAssumptions about the source's computer\n\n\n\n\nThe computer correctly executes Tails or the Tor Browser.\n\n\nThe computer is not compromised by malware.\n\n\n\n\nAssumptions about the Admin Workstation and the Journalist Workstation\n\n\n\n\nThe computer correctly executes Tails.\n\n\nThe computer and the Tails device are not compromised by malware.\n\n\nThe two-factor authentication device used with the workstation are not compromised by malware.\n\n\n\n\nAssumptions about the Secure Viewing Station\n\n\n\n\nThe computer is airgapped.\n\n\nThe computer correctly executes Tails.\n\n\nThe computer and the Tails device are not compromised by malware.\n\n\n\n\nAssumptions about the SecureDrop hardware\n\n\n\n\nThe servers correctly execute Ubuntu, SecureDrop and its dependencies.\n\n\nThe servers, network firewall, and physical media are not compromised by malware.\n\n\n\n\nAssumptions about the organization hosting SecureDrop\n\n\n\n\nThe organization wants to preserve the anonymity of its sources.\n\n\nThe organization acts in the interest of allowing sources to submit documents, regardless of the contents of these documents.\n\n\nThe users of the system, and those with physical access to the servers, can be trusted to uphold the previous assumptions unless the entire organization has been compromised.\n\n\nThe organization is prepared to push back on any and all requests to compromise the integrity of the system and its users, including requests to deanonymize sources, block document submissions, or hand over encrypted or decrypted submissions.\n\n\n\n\nAssumptions about the world\n\n\n\n\nThe security assumptions of RSA (4096-bit GPG and SSH keys) are valid.\n\n\nThe security assumptions of scrypt with randomly-generated salts are valid.\n\n\nThe security/anonymity assumptions of Tor and the Hidden Service protocol are valid.\n\n\nThe security assumptions of the Tails operating system are valid.\n\n\n\n\nAttack Scenarios\n\n\nWhat the Application Server can achieve\n\n\n\n\nThe server sees the plaintext codename, used as the login identifier, of every source.\n\n\nThe server sees all HTTP requests made by the source, the admin, and the journalist.\n\n\nThe server sees the plaintext submissions of every source.\n\n\nThe server sees the plaintext communication between journalists and their sources.\n\n\nThe server stores hashes of codenames, created with scrypt and randomly-generated salts.\n\n\nThe server stores only encrypted submissions and communication on disk.\n\n\nThe server stores a GPG key for each source, with the source's codename as the passphrase.\n\n\nThe server may \nstore plaintext submissions in memory for at most 24 hours\n.\n\n\nThe server stores sanitized Tor logs, created using the \nSafeLogging option\n, for the Source Interface, the Document Interface, and SSH.\n\n\nThe server stores both access and error logs for the Document Interface.\n\n\nThe server stores connection history and audit logs for the admin.\n\n\nThe server can connect to the Monitor server using an SSH key and a passphrase.\n\n\n\n\nWhat the Monitor Server can achieve\n\n\n\n\nThe server stores the plaintext alerts on disk, data may also reside in RAM.\n\n\nThe server stores the GPG public key the OSSEC alerts are encrypted to.\n\n\nThe server stores plaintext credentials for the SMTP relay used to send OSSEC alerts.\n\n\nThe server stores the email address the encrypted OSSEC alerts are sent to.\n\n\nThe server stores sanitized Tor logs, created using the \nSafeLogging option\n, for SSH.\n\n\nThe server stores connection history and audit logs for the admin.\n\n\nThe server stores OSSEC and Procmail logs on disk.\n\n\nThe server can connect to the Application Server using an SSH key and a passphrase.\n\n\n\n\nWhat the Workstations can achieve\n\n\n\n\nThe \nAdmin Workstation\n requires Tails with a persistent volume, which stores information such as GPG and SSH keys, as well as a \ndatabase with passphrases\n for the Application Server, the Monitor Server, and the GPG key the Monitor Server will encrypt OSSEC alerts to.\n\n\nThe \nJournalist Workstation\n requires Tails with a persistent volume, which stores information such as the Hidden Service value required to connect to the Document Interface, as well as a \ndatabase with passphrases\n for the Document Interface and the journalist's personal GPG key.\n\n\nThe \nSecure Viewing Station\n requires Tails with a persistent volume, which stores information such as the SecureDrop application's GPG key, as well as a \ndatabase with the passphrase\n for that key.\n\n\n\n\nWhat a compromise of the source's property can achieve\n\n\n\n\nUse of \nthe Tor Browser will leave traces\n that can be discovered through a forensic analysis of the source's property following either a compromise or physical seizure. Unless the compromise or seizure happens while the source is submitting documents to SecureDrop, the traces will not include information about sites visited or actions performed in the browser.\n\n\nUse of Tails with a persistent volume will leave traces on the device the operating system was installed on. Unless the compromise or seizure happens while the source is submitting documents to SecureDrop, or using the persistent volume, the traces will not include information about sites visited or actions performed in the browser or on the system.\n\n\nSecureDrop 0.3 encourages sources to protect their codenames by memorizing them. If a source cannot memorize the codename right away, we recommend writing it down and keeping it in a safe place at first, and gradually working to memorize it over time. Once the source has memorized it, he or she should destroy the written copy. If the source does write down the codename, a compromise or physical seizure of the source's property may result in the attacker obtaining the source's codename.\n\n\nAn attacker with access to the \nsource's codename\n can:\n\n\nShow that the source has visited the SecureDrop site, but not necessarily submitted anything.\n\n\nUpload new documents or submit messages.\n\n\nCommunicate with the journalist as that source.\n\n\nSee any replies from journalists that the source has not yet deleted.\n\n\n\n\n\n\n\n\nWhat a physical seizure of the source's property can achieve\n\n\n\n\nDocument use of Tor or Tails, but not necessarily research into SecureDrop\n\n\nPrevent the source from submitting documents by taking the device the documents are stored on.\n\n\nIf the property is seized while powered on, the attacker can also analyze any plaintext information that resides in RAM.\n\n\nTamper with the hardware.\n\n\n\n\nA physical seizure of, and access to, the source's codename will allow the attacker to access the Source Interface as that source.\n\n\n\n\n\n\nA physical seizure of the admin's property will allow the attacker to:\n\n\n\n\nPrevent the admin from working on SecureDrop for some period of time.\n\n\nAccess any stored, decrypted documents taken off the Secure Viewing Station.\n\n\nIf the property is seized while powered on, the attacker can also analyze any plaintext information that resides in RAM.\n\n\n\n\n\n\nA physical seizure of, and access to, the admin's Tails persistent volume, password database, and two-factor authentication device will allow the attacker to access both servers and the Document Interface.\n\n\n\n\nWhat a compromise of the admin's property can achieve\n\n\n\n\nTo access the Document Interface, the Application Server, or the Monitor Server, the attacker needs to obtain the admin's login credentials and the admin's two-factor authentication device. Unless the attacker has physical access to the servers, the attacker will also need to obtain the Hidden Service values for the Interface and the servers. This information is stored in a password-protected database in a persistent volume on the admin's Tails device. The volume is protected by a passphrase. If the admin's two-factor authentication device is a mobile phone, this will also be protected by a passphrase.\n\n\nAn attacker with access to the \nadmin's computer\n can:\n\n\nAccess any stored, decrypted documents taken off the Secure Viewing Station.\n\n\n\n\n\n\nAn attacker with access to the \npersistent volume\n on the admin's Tails device can:\n\n\nAdd, modify, and delete files on the volume.\n\n\nAccess the Hidden Service values used by the Interfaces and the servers.\n\n\nAccess SSH keys and passphrases for the Application Server and the Monitor Server.\n\n\nAccess the GPG key and passphrase for the encrypted OSSEC email alerts.\n\n\nAccess the credentials for the account the encrypt alerts are sent to.\n\n\nAccess the admin's personal GPG key.\n\n\n\n\n\n\nAn attacker with admin access to the \nDocument Interface\n can:\n\n\nAdd, modify, and delete journalist users.\n\n\nChange the codenames associated with sources within the Interface.\n\n\nDownload, but not decrypt, submissions.\n\n\nCommunicate with sources.\n\n\nDelete one or more submissions.\n\n\nDelete one or more sources, which destroys all communication with that source and prevents the source from ever logging back in with that codename.\n\n\n\n\n\n\nAn attacker with admin access to the \nApplication Server\n can:\n\n\nAdd, modify, and delete software, configurations, and other files.\n\n\nSee all HTTP requests made by the source, the admin, and the journalist.\n\n\nSee the plaintext codename of a source as he or she is logging in.\n\n\nSee the plaintext communication between a source and a journalist as it happens.\n\n\nSee the stored list of hashed codenames.\n\n\nAccess the GPG public key used to encrypt communications between a journalist and a source.\n\n\nDownload stored, encrypted submissions and replies from the journalists.\n\n\nDecrypt replies from the journalists if the source's codename, and thus the passphrase, is known.\n\n\nAnalyze any plaintext information that resides in RAM, which may include plaintext of submissions made within the past 24 hours.\n\n\nReview logs stored on the system.\n\n\nAccess the Monitor Server.\n\n\n\n\n\n\nAn attacker with admin access to the \nMonitor Server\n can:\n\n\nAdd, modify, and delete software, configurations, and other files.\n\n\nChange the SMTP relay, email address, and GPG key used for OSSEC alerts.\n\n\nAnalyze any plaintext information that resides in RAM.\n\n\nReview logs stored on the system.\n\n\nTrigger arbitrary commands to be executed by the OSSEC agent user, which, assuming the attacker is able to escalate privileges, may affect the Application Server.\n\n\n\n\n\n\n\n\nWhat a physical seizure of the admin's property can achieve\n\n\n\n\nTamper with the hardware.\n\n\nPrevent the admin from working on SecureDrop for some period of time.\n\n\nAccess any stored, decrypted documents taken off the Secure Viewing Station.\n\n\nIf the property is seized while powered on, the attacker can also analyze any plaintext information that resides in RAM.\n\n\nA physical seizure of, and access to, the admin's Tails persistent volume, password database, and two-factor authentication device will allow the attacker to access both servers and the Document Interface.\n\n\n\n\nWhat a compromise of the journalist's property can achieve\n\n\n\n\nTo access the Document Interface, the attacker needs to obtain the journalist's login credentials and the journalist's two-factor authentication device. Unless the attacker has physical access to the server, the attacker will also need to obtain the Hidden Service value for the Interface. This information is stored in a password-protected database in a persistent volume on the journalist's Tails device. The volume is protected by a passphrase. If the journalist's two-factor authentication device is a mobile phone, this will also be protected by a passphrase.\n\n\nAn attacker with access to the \njournalist's computer\n can:\n\n\nAccess any stored, decrypted documents taken off the Secure Viewing Station.\n\n\n\n\n\n\nAn attacker with access to the \npersistent volume\n on the journalist's Tails device can:\n\n\nAdd, modify, and delete files on the volume.\n\n\nAccess the Hidden Service values used by the Document Interface.\n\n\nAccess SSH keys and passphrases for the Application Server and the Monitor Server.\n\n\nAccess the journalist's personal GPG key.\n\n\n\n\n\n\nAn attacker with journalist access to the \nDocument Interface\n can:\n\n\nChange the codenames associated with sources within the Interface.\n\n\nDownload, but not decrypt, submissions.\n\n\nDelete one or more submissions.\n\n\nCommunicate with sources.\n\n\n\n\n\n\n\n\nWhat a physical seizure of the journalist's property can achieve\n\n\n\n\nTamper with the hardware.\n\n\nPrevent the journalist from working on SecureDrop for some period of time.\n\n\nAccess any stored, decrypted documents taken off the Secure Viewing Station.\n\n\nIf the property is seized while powered on, the attacker can also analyze any plaintext information that resides in RAM.\n\n\nA physical seizure of, and access to, the journalist's Tails persistent volume, password database, and two-factor authentication device will allow the attacker to access the Document Interface.\n\n\n\n\nWhat a compromise of the Application Server can achieve\n\n\n\n\nIf the Application Server is compromised, the system user the attacker has control over defines what kind of information the attacker will be able to view and what kind of actions the attacker can perform.\n\n\nAn attacker with access to the \ndebian-tor\n user can:\n\n\nView, modify, and delete all files owned by this user. This includes sanitized Tor logs, created using the \nSafeLogging option\n, for SSH, the Source Interface and the Document Interface.\n\n\nView, modify, and delete the Tor configuration file, root is required to reload the config.\n\n\n\n\n\n\nAn attacker with access to the \nossec\n user can:\n\n\nAdd, view, modify, and delete the log files, and in doing so send inaccurate information to the Monitor Server and the admin.\n\n\n\n\n\n\nAn attacker with access to the \nwww-data\n user can:\n\n\nView, modify, and delete all files owned by this user. This includes all files in use by the SecureDrop application, such as text, code, the database containing encrypted submissions and communications. The attacker needs root access to reload configuration files.\n\n\nView, modify, and delete both access and error logs for the Document Interface.\n\n\nView any HTTP requests made by the source, the admin, and the journalist in that moment. This includes seeing plaintext codenames, submissions, and communications.\n\n\nAdd and delete communications between a journalist and a source by writing to the database.\n\n\n\n\n\n\nAn attacker with access to the \nroot\n user can:\n\n\nDo anything the \nwww-data\n user can do in terms of the SecureDrop application, this user is in full control of the server and can view, modify, and delete anything at will. This user is not able to decrypt submissions or communications, unless the attacker has access to the encryption key required to do so.\n\n\n\n\n\n\n\n\nWhat a physical seizure of the Application Server can achieve\n\n\n\n\nIf the Application Server is seized, the attacker will be able to view any and all unencrypted files on the server. This includes all files in use by the SecureDrop Application. If the server is seized while it is powered on, the attacker can also analyze any plaintext information that resides in RAM. The attacker can also tamper with the hardware.\n\n\n\n\nWhat a compromise of the Monitor Server can achieve\n\n\n\n\nIf the Monitor Server is compromised, the system user the attacker has control over defines what kind of information the attacker will be able to view and what kind of actions the attacker can perform.\n\n\nAn attacker with access to the \ndebian-tor\n user can:\n\n\nView, modify, and delete all files owned by this user. This includes sanitized Tor logs, created using the \nSafeLogging option\n, for SSH.\n\n\nView, modify, and delete the Tor configuration file, root is required to reload the config.\n\n\n\n\n\n\nAn attacker with access to the \nossec\n user can:\n\n\n???\n\n\n\n\n\n\nAn attacker with access to the \nroot\n user can:\n\n\nDo anything the \nossec\n user can do in terms of the SecureDrop application, this user is in full control of the server and can view, modify, and delete anything at will. This user is not able to decrypt encrypted email alerts, unless the attacker has access to the encryption key required to do so.\n\n\n\n\n\n\n\n\nWhat a physical seizure of the Monitor Server can achieve\n\n\n\n\nIf the Monitor Server is seized, the attacker will be able to view any and all unencrypted files on the server. This includes all files in use by OSSEC. If the server is seized while it is powered on, the attacker can also analyze any plaintext information that resides in RAM. The attacker can also tamper with the hardware.\n\n\n\n\nWhat a compromise of the Secure Viewing Station can achieve\n\n\n\n\nThe Secure Viewing Station is only useful to an attacker while powered on and with the Tails persistent volume mounted. The attacker may learn more if the Transfer device is in use at the time of compromise or seizure. A physical seizure of this machine, the Tails device or the Transfer device will also achieve nothing, assuming that Tails' implementation of full-disk encryption works as expected.\n\n\nA compromise of the Secure Viewing Station allows the attacker to:\n\n\nRun commands as the \namnesia\n user.\n\n\nView, modify, and delete files owned by the \namnesia\n user. This includes the GPG private key used to encrypt and decrypt submitted documents.\n\n\nView, modify, and delete encrypted--and possibly also decrypted submissions--if the Transfer device is in use.\n\n\n\n\n\n\n\n\nWhat a physical seizure of the Secure Viewing Station can achieve\n\n\n\n\nThe Secure Viewing Station is only useful to an attacker while powered on and with the Tails persistent volume mounted. The attacker may learn more if the Transfer device is in use at the time of compromise or seizure. A physical seizure of this machine, the Tails device or the Transfer device will also achieve nothing, assuming that Tails' implementation of full-disk encryption works as expected.\n\n\nA physical seizure of the Secure Viewing Station, while on and with the persistent volume decrypted and mounted, allows the attacker to:\n\n\nTamper with the hardware.\n\n\nRun commands as the \namnesia\n user.\n\n\nView, modify, and delete the GPG private key used to encrypt and decrypt submitted documents.\n\n\nView, modify, and delete encrypted--and possibly also decrypted submissions--if the Transfer device is in use.\n\n\n\n\n\n\n\n\nWhat a local network attacker can achieve against the source, admin, or journalist:\n\n\n\n\nA local network can observe when they are using Tor.\n\n\nA local network can block Tor and prevent them from accessing SecureDrop.\n\n\nA local network may be able to deduce use of SecureDrop by looking at request sizes, plaintext uploads and encrypted downloads, although \nresearch suggests this is very difficult\n.\n\n\n\n\nWhat a global adversary can achieve against the source, admin, or journalist:\n\n\n\n\nA global adversary capable of observing all Internet traffic may have more luck than the local network attacker in deducing use of SecureDrop by looking at request sizes, plaintext uploads and encrypted downloads.\n\n\nA global adversary may be able to link a source to a specific SecureDrop server.\n\n\nA global adversary may be able to link a source to a specific journalist.\n\n\nA global adversary may be able to correlate data points during a leak investigation, including looking at who has read up on SecureDrop and who has used Tor.\n\n\nA global adversary may be able to forge an SSL certificate and use it to spoof an organization's HTTPS landing page, thereby tricking the source into visiting a fake SecureDrop site.\n\n\n\n\nWhat a random person on the Internet can achieve\n\n\n\n\nA random person can attempt to DoS the SecureDrop server and overwhelm the journalists by generating a high number of codenames and uploading many large documents.\n\n\nA random person can submit empty, forged, or inaccurate documents.\n\n\nA random person can submit malicious documents, e.g. malware that will attempt to compromise the Secure Viewing Station.\n\n\nA random person can attempt to get sensitive information from a SecureDrop user's browser session, such as the source's codename.\n\n\nA random person can attempt to compromise the SecureDrop server by attacking the exposed attack surface, including the kernel network stack, Tor, Apache, the SecureDrop web interfaces, Python, OpenSSH, and the TLS implementation.", 
            "title": "Threat Model"
        }, 
        {
            "location": "/technical_information/threat_model/#securedrop-threat-model", 
            "text": "This document outlines the threat model for SecureDrop 0.3 and is inspired by the  threat model document Adam Langley wrote for Pond . The threat model is defined in terms of what each possible adversary can achieve. This document is still a work in progress. If you have questions or comments, please open an issue on GitHub or send an email to securedrop@freedom.press.", 
            "title": "SecureDrop Threat Model"
        }, 
        {
            "location": "/technical_information/threat_model/#assumptions", 
            "text": "Assumptions about the source   The source acts reasonably and in good faith, e.g. if the user were to give their codename or private key material to the attacker that would be unreasonable.  The source would like to remain anonymous, even against a forensic attacker.  The source obtains an authentic copy of Tails or the Tor Browser.  The source follows our  guidelines  for using SecureDrop.  The source is accessing an authentic SecureDrop site.   Assumptions about the admin and the journalist   The admin and the journalist act reasonably and in good faith, e.g. if either of them were to give their credentials or private key material to the attacker that would be unreasonable.  The admin and the journalist obtain authentic copies of Tails.  The journalist follows our  guidelines  for using SecureDrop and working with submitted documents.   Assumptions about the person installing SecureDrop, usually the admin   The person acts reasonably and in good faith, e.g. if he or she were to give the attacker system-level access that would be unreasonable.  The person obtains an authentic copy of SecureDrop and its dependencies.  The person follows our guidelines for  deploying the system, setting up the landing page for the organization , and for  installing SecureDrop .   Assumptions about the source's computer   The computer correctly executes Tails or the Tor Browser.  The computer is not compromised by malware.   Assumptions about the Admin Workstation and the Journalist Workstation   The computer correctly executes Tails.  The computer and the Tails device are not compromised by malware.  The two-factor authentication device used with the workstation are not compromised by malware.   Assumptions about the Secure Viewing Station   The computer is airgapped.  The computer correctly executes Tails.  The computer and the Tails device are not compromised by malware.   Assumptions about the SecureDrop hardware   The servers correctly execute Ubuntu, SecureDrop and its dependencies.  The servers, network firewall, and physical media are not compromised by malware.   Assumptions about the organization hosting SecureDrop   The organization wants to preserve the anonymity of its sources.  The organization acts in the interest of allowing sources to submit documents, regardless of the contents of these documents.  The users of the system, and those with physical access to the servers, can be trusted to uphold the previous assumptions unless the entire organization has been compromised.  The organization is prepared to push back on any and all requests to compromise the integrity of the system and its users, including requests to deanonymize sources, block document submissions, or hand over encrypted or decrypted submissions.   Assumptions about the world   The security assumptions of RSA (4096-bit GPG and SSH keys) are valid.  The security assumptions of scrypt with randomly-generated salts are valid.  The security/anonymity assumptions of Tor and the Hidden Service protocol are valid.  The security assumptions of the Tails operating system are valid.", 
            "title": "Assumptions"
        }, 
        {
            "location": "/technical_information/threat_model/#attack-scenarios", 
            "text": "What the Application Server can achieve   The server sees the plaintext codename, used as the login identifier, of every source.  The server sees all HTTP requests made by the source, the admin, and the journalist.  The server sees the plaintext submissions of every source.  The server sees the plaintext communication between journalists and their sources.  The server stores hashes of codenames, created with scrypt and randomly-generated salts.  The server stores only encrypted submissions and communication on disk.  The server stores a GPG key for each source, with the source's codename as the passphrase.  The server may  store plaintext submissions in memory for at most 24 hours .  The server stores sanitized Tor logs, created using the  SafeLogging option , for the Source Interface, the Document Interface, and SSH.  The server stores both access and error logs for the Document Interface.  The server stores connection history and audit logs for the admin.  The server can connect to the Monitor server using an SSH key and a passphrase.   What the Monitor Server can achieve   The server stores the plaintext alerts on disk, data may also reside in RAM.  The server stores the GPG public key the OSSEC alerts are encrypted to.  The server stores plaintext credentials for the SMTP relay used to send OSSEC alerts.  The server stores the email address the encrypted OSSEC alerts are sent to.  The server stores sanitized Tor logs, created using the  SafeLogging option , for SSH.  The server stores connection history and audit logs for the admin.  The server stores OSSEC and Procmail logs on disk.  The server can connect to the Application Server using an SSH key and a passphrase.   What the Workstations can achieve   The  Admin Workstation  requires Tails with a persistent volume, which stores information such as GPG and SSH keys, as well as a  database with passphrases  for the Application Server, the Monitor Server, and the GPG key the Monitor Server will encrypt OSSEC alerts to.  The  Journalist Workstation  requires Tails with a persistent volume, which stores information such as the Hidden Service value required to connect to the Document Interface, as well as a  database with passphrases  for the Document Interface and the journalist's personal GPG key.  The  Secure Viewing Station  requires Tails with a persistent volume, which stores information such as the SecureDrop application's GPG key, as well as a  database with the passphrase  for that key.   What a compromise of the source's property can achieve   Use of  the Tor Browser will leave traces  that can be discovered through a forensic analysis of the source's property following either a compromise or physical seizure. Unless the compromise or seizure happens while the source is submitting documents to SecureDrop, the traces will not include information about sites visited or actions performed in the browser.  Use of Tails with a persistent volume will leave traces on the device the operating system was installed on. Unless the compromise or seizure happens while the source is submitting documents to SecureDrop, or using the persistent volume, the traces will not include information about sites visited or actions performed in the browser or on the system.  SecureDrop 0.3 encourages sources to protect their codenames by memorizing them. If a source cannot memorize the codename right away, we recommend writing it down and keeping it in a safe place at first, and gradually working to memorize it over time. Once the source has memorized it, he or she should destroy the written copy. If the source does write down the codename, a compromise or physical seizure of the source's property may result in the attacker obtaining the source's codename.  An attacker with access to the  source's codename  can:  Show that the source has visited the SecureDrop site, but not necessarily submitted anything.  Upload new documents or submit messages.  Communicate with the journalist as that source.  See any replies from journalists that the source has not yet deleted.     What a physical seizure of the source's property can achieve   Document use of Tor or Tails, but not necessarily research into SecureDrop  Prevent the source from submitting documents by taking the device the documents are stored on.  If the property is seized while powered on, the attacker can also analyze any plaintext information that resides in RAM.  Tamper with the hardware.   A physical seizure of, and access to, the source's codename will allow the attacker to access the Source Interface as that source.    A physical seizure of the admin's property will allow the attacker to:   Prevent the admin from working on SecureDrop for some period of time.  Access any stored, decrypted documents taken off the Secure Viewing Station.  If the property is seized while powered on, the attacker can also analyze any plaintext information that resides in RAM.    A physical seizure of, and access to, the admin's Tails persistent volume, password database, and two-factor authentication device will allow the attacker to access both servers and the Document Interface.   What a compromise of the admin's property can achieve   To access the Document Interface, the Application Server, or the Monitor Server, the attacker needs to obtain the admin's login credentials and the admin's two-factor authentication device. Unless the attacker has physical access to the servers, the attacker will also need to obtain the Hidden Service values for the Interface and the servers. This information is stored in a password-protected database in a persistent volume on the admin's Tails device. The volume is protected by a passphrase. If the admin's two-factor authentication device is a mobile phone, this will also be protected by a passphrase.  An attacker with access to the  admin's computer  can:  Access any stored, decrypted documents taken off the Secure Viewing Station.    An attacker with access to the  persistent volume  on the admin's Tails device can:  Add, modify, and delete files on the volume.  Access the Hidden Service values used by the Interfaces and the servers.  Access SSH keys and passphrases for the Application Server and the Monitor Server.  Access the GPG key and passphrase for the encrypted OSSEC email alerts.  Access the credentials for the account the encrypt alerts are sent to.  Access the admin's personal GPG key.    An attacker with admin access to the  Document Interface  can:  Add, modify, and delete journalist users.  Change the codenames associated with sources within the Interface.  Download, but not decrypt, submissions.  Communicate with sources.  Delete one or more submissions.  Delete one or more sources, which destroys all communication with that source and prevents the source from ever logging back in with that codename.    An attacker with admin access to the  Application Server  can:  Add, modify, and delete software, configurations, and other files.  See all HTTP requests made by the source, the admin, and the journalist.  See the plaintext codename of a source as he or she is logging in.  See the plaintext communication between a source and a journalist as it happens.  See the stored list of hashed codenames.  Access the GPG public key used to encrypt communications between a journalist and a source.  Download stored, encrypted submissions and replies from the journalists.  Decrypt replies from the journalists if the source's codename, and thus the passphrase, is known.  Analyze any plaintext information that resides in RAM, which may include plaintext of submissions made within the past 24 hours.  Review logs stored on the system.  Access the Monitor Server.    An attacker with admin access to the  Monitor Server  can:  Add, modify, and delete software, configurations, and other files.  Change the SMTP relay, email address, and GPG key used for OSSEC alerts.  Analyze any plaintext information that resides in RAM.  Review logs stored on the system.  Trigger arbitrary commands to be executed by the OSSEC agent user, which, assuming the attacker is able to escalate privileges, may affect the Application Server.     What a physical seizure of the admin's property can achieve   Tamper with the hardware.  Prevent the admin from working on SecureDrop for some period of time.  Access any stored, decrypted documents taken off the Secure Viewing Station.  If the property is seized while powered on, the attacker can also analyze any plaintext information that resides in RAM.  A physical seizure of, and access to, the admin's Tails persistent volume, password database, and two-factor authentication device will allow the attacker to access both servers and the Document Interface.   What a compromise of the journalist's property can achieve   To access the Document Interface, the attacker needs to obtain the journalist's login credentials and the journalist's two-factor authentication device. Unless the attacker has physical access to the server, the attacker will also need to obtain the Hidden Service value for the Interface. This information is stored in a password-protected database in a persistent volume on the journalist's Tails device. The volume is protected by a passphrase. If the journalist's two-factor authentication device is a mobile phone, this will also be protected by a passphrase.  An attacker with access to the  journalist's computer  can:  Access any stored, decrypted documents taken off the Secure Viewing Station.    An attacker with access to the  persistent volume  on the journalist's Tails device can:  Add, modify, and delete files on the volume.  Access the Hidden Service values used by the Document Interface.  Access SSH keys and passphrases for the Application Server and the Monitor Server.  Access the journalist's personal GPG key.    An attacker with journalist access to the  Document Interface  can:  Change the codenames associated with sources within the Interface.  Download, but not decrypt, submissions.  Delete one or more submissions.  Communicate with sources.     What a physical seizure of the journalist's property can achieve   Tamper with the hardware.  Prevent the journalist from working on SecureDrop for some period of time.  Access any stored, decrypted documents taken off the Secure Viewing Station.  If the property is seized while powered on, the attacker can also analyze any plaintext information that resides in RAM.  A physical seizure of, and access to, the journalist's Tails persistent volume, password database, and two-factor authentication device will allow the attacker to access the Document Interface.   What a compromise of the Application Server can achieve   If the Application Server is compromised, the system user the attacker has control over defines what kind of information the attacker will be able to view and what kind of actions the attacker can perform.  An attacker with access to the  debian-tor  user can:  View, modify, and delete all files owned by this user. This includes sanitized Tor logs, created using the  SafeLogging option , for SSH, the Source Interface and the Document Interface.  View, modify, and delete the Tor configuration file, root is required to reload the config.    An attacker with access to the  ossec  user can:  Add, view, modify, and delete the log files, and in doing so send inaccurate information to the Monitor Server and the admin.    An attacker with access to the  www-data  user can:  View, modify, and delete all files owned by this user. This includes all files in use by the SecureDrop application, such as text, code, the database containing encrypted submissions and communications. The attacker needs root access to reload configuration files.  View, modify, and delete both access and error logs for the Document Interface.  View any HTTP requests made by the source, the admin, and the journalist in that moment. This includes seeing plaintext codenames, submissions, and communications.  Add and delete communications between a journalist and a source by writing to the database.    An attacker with access to the  root  user can:  Do anything the  www-data  user can do in terms of the SecureDrop application, this user is in full control of the server and can view, modify, and delete anything at will. This user is not able to decrypt submissions or communications, unless the attacker has access to the encryption key required to do so.     What a physical seizure of the Application Server can achieve   If the Application Server is seized, the attacker will be able to view any and all unencrypted files on the server. This includes all files in use by the SecureDrop Application. If the server is seized while it is powered on, the attacker can also analyze any plaintext information that resides in RAM. The attacker can also tamper with the hardware.   What a compromise of the Monitor Server can achieve   If the Monitor Server is compromised, the system user the attacker has control over defines what kind of information the attacker will be able to view and what kind of actions the attacker can perform.  An attacker with access to the  debian-tor  user can:  View, modify, and delete all files owned by this user. This includes sanitized Tor logs, created using the  SafeLogging option , for SSH.  View, modify, and delete the Tor configuration file, root is required to reload the config.    An attacker with access to the  ossec  user can:  ???    An attacker with access to the  root  user can:  Do anything the  ossec  user can do in terms of the SecureDrop application, this user is in full control of the server and can view, modify, and delete anything at will. This user is not able to decrypt encrypted email alerts, unless the attacker has access to the encryption key required to do so.     What a physical seizure of the Monitor Server can achieve   If the Monitor Server is seized, the attacker will be able to view any and all unencrypted files on the server. This includes all files in use by OSSEC. If the server is seized while it is powered on, the attacker can also analyze any plaintext information that resides in RAM. The attacker can also tamper with the hardware.   What a compromise of the Secure Viewing Station can achieve   The Secure Viewing Station is only useful to an attacker while powered on and with the Tails persistent volume mounted. The attacker may learn more if the Transfer device is in use at the time of compromise or seizure. A physical seizure of this machine, the Tails device or the Transfer device will also achieve nothing, assuming that Tails' implementation of full-disk encryption works as expected.  A compromise of the Secure Viewing Station allows the attacker to:  Run commands as the  amnesia  user.  View, modify, and delete files owned by the  amnesia  user. This includes the GPG private key used to encrypt and decrypt submitted documents.  View, modify, and delete encrypted--and possibly also decrypted submissions--if the Transfer device is in use.     What a physical seizure of the Secure Viewing Station can achieve   The Secure Viewing Station is only useful to an attacker while powered on and with the Tails persistent volume mounted. The attacker may learn more if the Transfer device is in use at the time of compromise or seizure. A physical seizure of this machine, the Tails device or the Transfer device will also achieve nothing, assuming that Tails' implementation of full-disk encryption works as expected.  A physical seizure of the Secure Viewing Station, while on and with the persistent volume decrypted and mounted, allows the attacker to:  Tamper with the hardware.  Run commands as the  amnesia  user.  View, modify, and delete the GPG private key used to encrypt and decrypt submitted documents.  View, modify, and delete encrypted--and possibly also decrypted submissions--if the Transfer device is in use.     What a local network attacker can achieve against the source, admin, or journalist:   A local network can observe when they are using Tor.  A local network can block Tor and prevent them from accessing SecureDrop.  A local network may be able to deduce use of SecureDrop by looking at request sizes, plaintext uploads and encrypted downloads, although  research suggests this is very difficult .   What a global adversary can achieve against the source, admin, or journalist:   A global adversary capable of observing all Internet traffic may have more luck than the local network attacker in deducing use of SecureDrop by looking at request sizes, plaintext uploads and encrypted downloads.  A global adversary may be able to link a source to a specific SecureDrop server.  A global adversary may be able to link a source to a specific journalist.  A global adversary may be able to correlate data points during a leak investigation, including looking at who has read up on SecureDrop and who has used Tor.  A global adversary may be able to forge an SSL certificate and use it to spoof an organization's HTTPS landing page, thereby tricking the source into visiting a fake SecureDrop site.   What a random person on the Internet can achieve   A random person can attempt to DoS the SecureDrop server and overwhelm the journalists by generating a high number of codenames and uploading many large documents.  A random person can submit empty, forged, or inaccurate documents.  A random person can submit malicious documents, e.g. malware that will attempt to compromise the Secure Viewing Station.  A random person can attempt to get sensitive information from a SecureDrop user's browser session, such as the source's codename.  A random person can attempt to compromise the SecureDrop server by attacking the exposed attack surface, including the kernel network stack, Tor, Apache, the SecureDrop web interfaces, Python, OpenSSH, and the TLS implementation.", 
            "title": "Attack Scenarios"
        }, 
        {
            "location": "/technical_information/google_authenticator/", 
            "text": "Set up Google Authenticator for the App and Monitor Servers\n\n\nAs part of the SecureDrop installation process, you will need to set up two\nfactor authentication using the Google Authenticator app for both the App and\nMonitor Servers.\n\n\nConnect to each of the servers using \nssh\n and run \ngoogle-authenticator\n.\nFollow the prompts, saying \"yes\" when prompted for a \"yes/no\" response. When\nyou've finished, open the Google Authenticator app on your smartphone and\nfollow the steps below for either iOS or Android.  Once you've properly set up\nthe first server, repeat these steps again on the other.\n\n\niOS instructions:\n\n\n\n\nSelect the pencil in the top-right corner\n\n\nSelect the plus sign at the bottom to add a new entry\n\n\nSelect \nScan Barcode\n\n\nScan the barcode using your phone's camera\n\n\n\n\nA new entry will automatically be added to the list. If you wish to edit this entry and give it a new name, do the following:\n\n\n\n\nSelect the pencil in the top-right corner\n\n\nSelect the pencil next to the entry you wish to edit\n\n\nSelect the checkmark in the top-right corner to save\n\n\n\n\nTo complete the setup process, say \ny\n to each prompt presented by \ngoogle-authenticator\n.\n\n\nAndroid instructions:\n\n\n\n\nSelect the menu bar in the top-right corner\n\n\nSelect \nSet up account\n\n\nSelect \nScan a barcode\n\n\nScan the barcode using your phone's camera\n\n\n\n\nA new entry will automatically be added to the list. If you wish to edit this entry and give it a new name, do the following:\n\n\n\n\nHighlight the entry with a long press\n\n\nSelect the pencil in the top-right corner\n\n\nEdit the entry's name and press Save\n\n\n\n\nTo complete the setup process, say \ny\n to each prompt presented by \ngoogle-authenticator\n.", 
            "title": "Google Authenticator"
        }, 
        {
            "location": "/contributing/develop/", 
            "text": "Development Guide\n\n\nPrerequisites\n\n\nSecureDrop is a multi-machine design. To make development and testing easy, we provide a set of virtual environments, each tailored for a specific type of development task. We use Vagrant and Virtualbox to conveniently develop with a set of virtual environments, and our Ansible playbooks can provison these environments on either virtual machines or physical hardware.\n\n\nTo get started, you will need to install Vagrant, Virtualbox, and Ansible.\n\n\nUbuntu/Debian\n\n\nTested: Ubuntu 14.04\n\n\nsudo apt-get install -y dpkg-dev virtualbox-dkms linux-headers-$(uname -r) build-essential git\n\n\n\n\nWe recommend using the latest stable version of Vagrant (\n1.7.2\n at the time of\nthis writing), which is newer than what is in the Ubuntu repositories at the\ntime of this writing.  Download the current version from\nhttps://www.vagrantup.com/downloads.html. We \ndo not\n recommend using the\nversion of Vagrant available from Ubuntu's package repositories (1.5.4), which\nis significantly out of date and does not work with SecureDrop\n(\ncontext\n).\n\n\nsudo dpkg -i vagrant.deb\nsudo dpkg-reconfigure virtualbox-dkms\n\n\n\n\nFinally, install Ansible so it can be used with Vagrant to automatically\nprovision VMs. We recommend installing Ansible with pip to ensure you have the\nlatest stable version.\n\n\nsudo apt-get install python-pip\nsudo pip install -U ansible\n\n\n\n\nIf you're using Ubuntu, you can install a sufficiently recent version of Ansible from backports (if you prefer): \nsudo apt-get install ansible/trusty-backports\n\n\nTested: Ansible 1.8.4\n\n\nWarning: for now, we do not recommend installing vagrant-cachier.\n It destroys apt's state unless the VMs are always shut down/rebooted with Vagrant, which conflicts with the tasks in the Ansible playbooks. The instructions in Vagrantfile that would enable vagrant-cachier are currently commented out.\n\n\nMac OS X\n\n\nInstall the requirements:\n\n\n\n\nVagrant\n\n\nVirtualBox\n\n\nAnsible\n. There are several\n      ways to install Ansible on a Mac. We recommend using pip so you will get\n      the latest stable version. To install Ansible via pip, \nsudo easy_install\n      pip \n sudo pip install -U ansible\n.\n\n\n\n\nClone the repository\n\n\nOnce you've installed the prerequisites for the development environment, use git to clone the SecureDrop repo: \ngit clone https://github.com/freedomofpress/securedrop.git\n. SecureDrop uses a branching model based on \ngit-flow\n. The \nmaster\n branch always points to the latest stable release. Use this branch if you are interested in installing or auditing SecureDrop. Development for the upcoming release of SecureDrop takes place on \ndevelop\n, which is the default branch. If you want to contribute, you should branch from and submit pull requests to \ndevelop\n.\n\n\nPick a development environment\n\n\nThere are several predefined virtual environments in the Vagrantfile: development, staging, and prod (production).\n\n\n\n\ndevelopment\n: for working on the application code\n\n\nSource Interface: localhost:8080\n\n\nDocument Interface: localhost:8081\n\n\n\n\n\n\napp-staging\n: for working on the environment and hardening\n\n\nSource Interface: localhost:8082\n\n\nDocument Interface: localhost:8083\n\n\nThe interfaces and SSH are also available over Tor.\n\n\nA copy of the the onion URLs for source, document and SSH access are written to the Vagrant host's ansible-base directory. The files will be named: app-source-ths, app-document-aths, app-ssh-aths\n\n\n\n\n\n\nmon-staging\n: for working on the environment and hardening\n\n\nOSSEC alert configuration is in install_files/ansible-base/staging-specific.yml\n\n\n\n\n\n\napp-prod\n: This is like a production installation with all of the hardening applied but virtualized\n\n\nA copy of the the onion URLs for source, document and SSH access are written to the Vagrant host's ansible-base directory. The files will be named: app-source-ths, app-document-aths, app-ssh-aths\n\n\nPutting the AppArmor profiles in complain mode (default) or enforce mode can be done with the Ansible tags apparmor-complain or apparmor-enforce.\n\n\n\n\n\n\nmon-prod\n: This is like a production installation with all of the hardening applied but virtualized\n\n\n\n\nIf you plan to alter the configuration of any of these machines,\nmake sure to review the \nDevelopment Guide for Serverspec Tests\n.\n\n\nDevelopment\n\n\nThis VM is intended for rapid development on the SecureDrop web application. It\nsyncs the \n/vagrant\n directory on the VM to the top level of the SecureDrop\nrepo, which means you can use your favorite editor on your host machine to edit\nthe code. This machine has no security hardening or monitoring.\n\n\nThis is the \"default\" VM, so you don't need to specify the \ndevelopment\n machine\nname when running commands like \nvagrant up\n and \nvagrant ssh\n. Of course, you\ncan specify the name if you want to.\n\n\nvagrant up\nvagrant ssh\ncd /vagrant/securedrop\n./manage.py run         # run development servers\n./manage.py test        # run the unit and functional tests\n./manage.py reset       # resets the state of the development instance\n./manage.py add_admin   # create a user to use when logging in to the Document Interface\n\n\n\n\nSecureDrop consists of two separate web appications (the Source Interface and\nthe Document Interface) that run concurrently. The development servers will\ndetect code changes when they are saved and automatically reload.\n\n\nStaging\n\n\nThe staging environment is almost identical to the production, but the security\nhardening is weakened slightly to allow direct access (without Tor) to SSH and\nthe web server. This is a convenient environment to test how changes work across\nthe full stack.\n\n\nIf you want to receive OSSEC alerts or change any other settings, you will need\nto fill out your local copy of\n\nsecuredrop/install_files/ansible_base/staging-specific.yml\n.\n\n\nvagrant up /staging$/\nvagrant ssh app-staging\nsudo su\ncd /var/www/securedrop\n./manage.py add_admin\n./manage.py test\n\n\n\n\nProd\n\n\nYou will need to fill out the configuration file \nsecuredrop/install_files/ansible_base/prod-specific.yml\n.\nPart of the production playbook validates that staging values\nare not used in production. One of the values it verifies is that the user\nAnsible runs as is not \nvagrant\n To be able to run this playbook in a virtualized\nenvironment for testing, you will need to disable the \nvalidate\n role, which you can\ndo by running \nexport SECUREDROP_PROD_SKIP_TAGS=validate\n before provisioning.\n\n\nTo create only the prod servers, run:\n\n\nvagrant up /prod$/\nvagrant ssh app-prod\nsudo su\ncd /var/www/securedrop/\n./manage.py add_admin\n\n\n\n\nIn order to access the servers after the install is completed you will need to install\nand configure a proxy tool to proxy your SSH connection over Tor.\nTorify and connect-proxy are two tools that can be used to proxy SSH connections over Tor.\n\n\nconnect-proxy (Ubuntu only)\n\n\nUbuntu: \nsudo apt-get install connect-proxy\n\n\nNote: you used to be able to install connect-proxy\non Mac OS X with Homebrew, but it was not available last we checked (Wed Oct 15 21:15:17 PDT 2014).\n\n\nAfter installing connect-proxy via apt-get and appending the tor config options\nto your local config, you can export the environment variable \nSECUREDROP_SSH_OVER_TOR=1\n\nin order to use \nvagrant ssh\n commands to access the prod instances. Here is an example\nof how that works:\n\n\n$ vagrant up --provision /prod/     # restricts SSH to Tor after final reboot\n$ vagrant ssh-config app-prod       # will show incorrect info due to lack of env var\nHost app-prod\n  HostName 127.0.0.1\n  User vagrant\n  Port 2201\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /home/conor/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n$ vagrant ssh app-prod -c 'echo hello'   # will fail due to incorrect ssh-config\nssh_exchange_identification: read: Connection reset by peer\n$ export SECUREDROP_SSH_OVER_TOR=1       # instruct Vagrant to use Tor for SSH\n$ vagrant ssh-config app-prod            # will show correct info, with ProxyCommand\nHost app-prod\n  HostName l57xhqhltlu323vi.onion\n  User vagrant\n  Port 22\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /home/conor/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n  ProxyCommand connect -R remote -5 -S 127.0.0.1:9050 %h %p\n$ # ensure ATHS values are active in local Tor config:\n$ cat *-aths | sudo tee -a /etc/tor/torrc \n /dev/null \n sudo service tor reload\n$ vagrant ssh app-prod -c 'echo hello'   # works\nhello\nConnection to l57xhqhltlu323vi.onion closed.\n\n\n\n\nIf \nSECUREDROP_SSH_OVER_TOR\n is declared, Vagrant will look up the ATHS URLs\nand \nHidServAuth\n values for each server by examining the contents of \napp-ssh-aths\n\nand \nmon-ssh-aths\n in \n./install_files/ansible-base\n. You can manually inspect\nthese files to append values to your local \ntorrc\n, as in the \ncat\n example above.\nNote that the \ncat\n example above will also add the ATHS info for the\nDocument Interface, as well, which is useful for testing.\n\n\ntorify (Ubuntu and Mac OS X)\n\n\nUbuntu: torsocks should be installed by the tor package. If it is not installed, make sure you are using tor from the \nTor Project's repo\n, and not Ubuntu's package.\nMac OS X (Homebrew): \nbrew install torsocks\n\n\nIf you have torify on your system (\n$ which torify\n) and you're Tor running in the background, simply prepend it to the SSH command:\n\n\ntorify ssh admin@examplenxu7x5ifm.onion\n\n\n\n\nTips \n Tricks\n\n\nUsing Tor Browser with the development environment\n\n\nWe strongly encourage sources to use the Tor Browser when they access the Source Interface. Tor Browser is the easiest way for the average person to use Tor without making potentially catastrophic mistakes, makes disable Javascript easy via the handy NoScript icon in the toolbar, and prevents state about the source's browsing habits (including their use of SecureDrop) from being persisted to disk.\n\n\nSince Tor Browser is based on an older version of Firefox (usually the current ESR release), it does not always render HTML/CSS the same as other browsers (especially more recent versions of browsers). Therefore, we recommend testing all changes to the web application in the Tor Browser instead of whatever browser you normally use for web development. Unfortunately, it is not possible to access the local development servers by default, due to Tor Browser's proxy configuration.\n\n\nTo test the development environment in Tor Browser, you need to add an exception to allow Tor Browser to access localhost:\n\n\n\n\nOpen the \"Tor Browser\" menu and click \"Preferences...\"\n\n\nChoose the \"Advanced\" section and the \"Network\" subtab under it\n\n\nIn the \"Connection\" section, click \"Settings...\"\n\n\nIn the text box labeled \"No Proxy for:\", enter \n127.0.0.1\n\n\nNote: for some reason, \nlocalhost\n doesn't work here.\n\n\n\n\n\n\nClick \"Ok\" and close the Preferences window\n\n\n\n\nYou should now be able to access the development server in the Tor Browser by navigating to \n127.0.0.1:8080\n and \n127.0.0.1:8081\n.\n\n\nVersion Notes\n\n\nThis documentation has been tested and confirmed to work on:\n\n\nvagrant --version\nVagrant 1.7.2\n\n\n\n\nvagrant-hostmanager (1.5.0)\nvagrant-login (1.0.1, system)\nvagrant-share (1.1.3, system)\n\n\n\n\nansible --version\nansible 1.8.4", 
            "title": "Development Environment"
        }, 
        {
            "location": "/contributing/develop/#development-guide", 
            "text": "", 
            "title": "Development Guide"
        }, 
        {
            "location": "/contributing/develop/#prerequisites", 
            "text": "SecureDrop is a multi-machine design. To make development and testing easy, we provide a set of virtual environments, each tailored for a specific type of development task. We use Vagrant and Virtualbox to conveniently develop with a set of virtual environments, and our Ansible playbooks can provison these environments on either virtual machines or physical hardware.  To get started, you will need to install Vagrant, Virtualbox, and Ansible.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/contributing/develop/#ubuntudebian", 
            "text": "Tested: Ubuntu 14.04  sudo apt-get install -y dpkg-dev virtualbox-dkms linux-headers-$(uname -r) build-essential git  We recommend using the latest stable version of Vagrant ( 1.7.2  at the time of\nthis writing), which is newer than what is in the Ubuntu repositories at the\ntime of this writing.  Download the current version from\nhttps://www.vagrantup.com/downloads.html. We  do not  recommend using the\nversion of Vagrant available from Ubuntu's package repositories (1.5.4), which\nis significantly out of date and does not work with SecureDrop\n( context ).  sudo dpkg -i vagrant.deb\nsudo dpkg-reconfigure virtualbox-dkms  Finally, install Ansible so it can be used with Vagrant to automatically\nprovision VMs. We recommend installing Ansible with pip to ensure you have the\nlatest stable version.  sudo apt-get install python-pip\nsudo pip install -U ansible  If you're using Ubuntu, you can install a sufficiently recent version of Ansible from backports (if you prefer):  sudo apt-get install ansible/trusty-backports  Tested: Ansible 1.8.4  Warning: for now, we do not recommend installing vagrant-cachier.  It destroys apt's state unless the VMs are always shut down/rebooted with Vagrant, which conflicts with the tasks in the Ansible playbooks. The instructions in Vagrantfile that would enable vagrant-cachier are currently commented out.", 
            "title": "Ubuntu/Debian"
        }, 
        {
            "location": "/contributing/develop/#mac-os-x", 
            "text": "Install the requirements:   Vagrant  VirtualBox  Ansible . There are several\n      ways to install Ansible on a Mac. We recommend using pip so you will get\n      the latest stable version. To install Ansible via pip,  sudo easy_install\n      pip   sudo pip install -U ansible .", 
            "title": "Mac OS X"
        }, 
        {
            "location": "/contributing/develop/#clone-the-repository", 
            "text": "Once you've installed the prerequisites for the development environment, use git to clone the SecureDrop repo:  git clone https://github.com/freedomofpress/securedrop.git . SecureDrop uses a branching model based on  git-flow . The  master  branch always points to the latest stable release. Use this branch if you are interested in installing or auditing SecureDrop. Development for the upcoming release of SecureDrop takes place on  develop , which is the default branch. If you want to contribute, you should branch from and submit pull requests to  develop .", 
            "title": "Clone the repository"
        }, 
        {
            "location": "/contributing/develop/#pick-a-development-environment", 
            "text": "There are several predefined virtual environments in the Vagrantfile: development, staging, and prod (production).   development : for working on the application code  Source Interface: localhost:8080  Document Interface: localhost:8081    app-staging : for working on the environment and hardening  Source Interface: localhost:8082  Document Interface: localhost:8083  The interfaces and SSH are also available over Tor.  A copy of the the onion URLs for source, document and SSH access are written to the Vagrant host's ansible-base directory. The files will be named: app-source-ths, app-document-aths, app-ssh-aths    mon-staging : for working on the environment and hardening  OSSEC alert configuration is in install_files/ansible-base/staging-specific.yml    app-prod : This is like a production installation with all of the hardening applied but virtualized  A copy of the the onion URLs for source, document and SSH access are written to the Vagrant host's ansible-base directory. The files will be named: app-source-ths, app-document-aths, app-ssh-aths  Putting the AppArmor profiles in complain mode (default) or enforce mode can be done with the Ansible tags apparmor-complain or apparmor-enforce.    mon-prod : This is like a production installation with all of the hardening applied but virtualized   If you plan to alter the configuration of any of these machines,\nmake sure to review the  Development Guide for Serverspec Tests .", 
            "title": "Pick a development environment"
        }, 
        {
            "location": "/contributing/develop/#development", 
            "text": "This VM is intended for rapid development on the SecureDrop web application. It\nsyncs the  /vagrant  directory on the VM to the top level of the SecureDrop\nrepo, which means you can use your favorite editor on your host machine to edit\nthe code. This machine has no security hardening or monitoring.  This is the \"default\" VM, so you don't need to specify the  development  machine\nname when running commands like  vagrant up  and  vagrant ssh . Of course, you\ncan specify the name if you want to.  vagrant up\nvagrant ssh\ncd /vagrant/securedrop\n./manage.py run         # run development servers\n./manage.py test        # run the unit and functional tests\n./manage.py reset       # resets the state of the development instance\n./manage.py add_admin   # create a user to use when logging in to the Document Interface  SecureDrop consists of two separate web appications (the Source Interface and\nthe Document Interface) that run concurrently. The development servers will\ndetect code changes when they are saved and automatically reload.", 
            "title": "Development"
        }, 
        {
            "location": "/contributing/develop/#staging", 
            "text": "The staging environment is almost identical to the production, but the security\nhardening is weakened slightly to allow direct access (without Tor) to SSH and\nthe web server. This is a convenient environment to test how changes work across\nthe full stack.  If you want to receive OSSEC alerts or change any other settings, you will need\nto fill out your local copy of securedrop/install_files/ansible_base/staging-specific.yml .  vagrant up /staging$/\nvagrant ssh app-staging\nsudo su\ncd /var/www/securedrop\n./manage.py add_admin\n./manage.py test", 
            "title": "Staging"
        }, 
        {
            "location": "/contributing/develop/#prod", 
            "text": "You will need to fill out the configuration file  securedrop/install_files/ansible_base/prod-specific.yml .\nPart of the production playbook validates that staging values\nare not used in production. One of the values it verifies is that the user\nAnsible runs as is not  vagrant  To be able to run this playbook in a virtualized\nenvironment for testing, you will need to disable the  validate  role, which you can\ndo by running  export SECUREDROP_PROD_SKIP_TAGS=validate  before provisioning.  To create only the prod servers, run:  vagrant up /prod$/\nvagrant ssh app-prod\nsudo su\ncd /var/www/securedrop/\n./manage.py add_admin  In order to access the servers after the install is completed you will need to install\nand configure a proxy tool to proxy your SSH connection over Tor.\nTorify and connect-proxy are two tools that can be used to proxy SSH connections over Tor.  connect-proxy (Ubuntu only)  Ubuntu:  sudo apt-get install connect-proxy  Note: you used to be able to install connect-proxy\non Mac OS X with Homebrew, but it was not available last we checked (Wed Oct 15 21:15:17 PDT 2014).  After installing connect-proxy via apt-get and appending the tor config options\nto your local config, you can export the environment variable  SECUREDROP_SSH_OVER_TOR=1 \nin order to use  vagrant ssh  commands to access the prod instances. Here is an example\nof how that works:  $ vagrant up --provision /prod/     # restricts SSH to Tor after final reboot\n$ vagrant ssh-config app-prod       # will show incorrect info due to lack of env var\nHost app-prod\n  HostName 127.0.0.1\n  User vagrant\n  Port 2201\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /home/conor/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n$ vagrant ssh app-prod -c 'echo hello'   # will fail due to incorrect ssh-config\nssh_exchange_identification: read: Connection reset by peer\n$ export SECUREDROP_SSH_OVER_TOR=1       # instruct Vagrant to use Tor for SSH\n$ vagrant ssh-config app-prod            # will show correct info, with ProxyCommand\nHost app-prod\n  HostName l57xhqhltlu323vi.onion\n  User vagrant\n  Port 22\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /home/conor/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n  ProxyCommand connect -R remote -5 -S 127.0.0.1:9050 %h %p\n$ # ensure ATHS values are active in local Tor config:\n$ cat *-aths | sudo tee -a /etc/tor/torrc   /dev/null   sudo service tor reload\n$ vagrant ssh app-prod -c 'echo hello'   # works\nhello\nConnection to l57xhqhltlu323vi.onion closed.  If  SECUREDROP_SSH_OVER_TOR  is declared, Vagrant will look up the ATHS URLs\nand  HidServAuth  values for each server by examining the contents of  app-ssh-aths \nand  mon-ssh-aths  in  ./install_files/ansible-base . You can manually inspect\nthese files to append values to your local  torrc , as in the  cat  example above.\nNote that the  cat  example above will also add the ATHS info for the\nDocument Interface, as well, which is useful for testing.  torify (Ubuntu and Mac OS X)  Ubuntu: torsocks should be installed by the tor package. If it is not installed, make sure you are using tor from the  Tor Project's repo , and not Ubuntu's package.\nMac OS X (Homebrew):  brew install torsocks  If you have torify on your system ( $ which torify ) and you're Tor running in the background, simply prepend it to the SSH command:  torify ssh admin@examplenxu7x5ifm.onion", 
            "title": "Prod"
        }, 
        {
            "location": "/contributing/develop/#tips-tricks", 
            "text": "", 
            "title": "Tips &amp; Tricks"
        }, 
        {
            "location": "/contributing/develop/#using-tor-browser-with-the-development-environment", 
            "text": "We strongly encourage sources to use the Tor Browser when they access the Source Interface. Tor Browser is the easiest way for the average person to use Tor without making potentially catastrophic mistakes, makes disable Javascript easy via the handy NoScript icon in the toolbar, and prevents state about the source's browsing habits (including their use of SecureDrop) from being persisted to disk.  Since Tor Browser is based on an older version of Firefox (usually the current ESR release), it does not always render HTML/CSS the same as other browsers (especially more recent versions of browsers). Therefore, we recommend testing all changes to the web application in the Tor Browser instead of whatever browser you normally use for web development. Unfortunately, it is not possible to access the local development servers by default, due to Tor Browser's proxy configuration.  To test the development environment in Tor Browser, you need to add an exception to allow Tor Browser to access localhost:   Open the \"Tor Browser\" menu and click \"Preferences...\"  Choose the \"Advanced\" section and the \"Network\" subtab under it  In the \"Connection\" section, click \"Settings...\"  In the text box labeled \"No Proxy for:\", enter  127.0.0.1  Note: for some reason,  localhost  doesn't work here.    Click \"Ok\" and close the Preferences window   You should now be able to access the development server in the Tor Browser by navigating to  127.0.0.1:8080  and  127.0.0.1:8081 .", 
            "title": "Using Tor Browser with the development environment"
        }, 
        {
            "location": "/contributing/develop/#version-notes", 
            "text": "This documentation has been tested and confirmed to work on:  vagrant --version\nVagrant 1.7.2  vagrant-hostmanager (1.5.0)\nvagrant-login (1.0.1, system)\nvagrant-share (1.1.3, system)  ansible --version\nansible 1.8.4", 
            "title": "Version Notes"
        }, 
        {
            "location": "/contributing/spec_tests/", 
            "text": "Serverspec tests\n\n\nserverspec\n tests verify the end state of the vagrant machines. \nAny changes to the Ansible configuration should have a corresponding spectest.\n\n\nInstall directions (Ubuntu)\n\n\napt-get install bundler\ncd spec_tests/\nbundle update\n\n\n\n\nRunning the tests\n\n\ncd spec_tests/\nbundle exec rake spec\n\n\n\n\nThis will run the tests against all configured hosts, specifically: \n\n development\n\n app-staging\n\n mon-staging\n\n build\n\n\nIn order to run the tests, each VM will be created and provisioned, if necessary.\nRunning all VMs concurrently may cause performance problems if you have less\nthan 8GB of RAM. You can isolate specific machines for faster testing:\n\n\ncd spec_tests\nbundle exec rake --tasks # check output for desired machine\nbundle exec rake spec:development\n\n\n\n\nUpdating the tests\n\n\nChanges to the ansible config should result in failing spectests, but\nonly if an existing task was modified. If you add a new task, make sure \nto add a corresponding spectest to validate that state after a new provisioning run.\nTests import variables from separate YAML files than the Ansible playbooks:\n\n\nspec_tests/spec/vars\n\u251c\u2500\u2500 development.yml\n\u2514\u2500\u2500 staging.yml\n\n\n\n\nAny variable changes in the Ansible config should have a corresponding entry \nin these vars files. These vars are dynamically loaded for each host via the\n\nspec_helper.rb\n file. Make sure to add your tests to relevant location \nfor the host you plan to test:\n\n\nspec_tests/spec/app-staging\n\u251c\u2500\u2500 apache_spec.rb\n\u251c\u2500\u2500 apparmor_spec.rb\n\u251c\u2500\u2500 iptables_spec.rb\n\u251c\u2500\u2500 ossec_agent_spec.rb\n\u251c\u2500\u2500 securedrop_app_spec.rb\n\u251c\u2500\u2500 securedrop_app_test_spec.rb\n\u2514\u2500\u2500 tor_spec.rb\n\n\n\n\nIn the example above, to add a new test for the \napp-staging\n host,\nadd a new file to the \nspec_tests/spec/app-staging\n directory.\n\n\nSpectest layout\n\n\nThe serverspec tests are mostly broken up according to\nmachines in the Vagrantfile:\n\n\nspec_tests/spec\n\u251c\u2500\u2500 app-staging\n\u251c\u2500\u2500 build\n\u251c\u2500\u2500 common-development\n\u251c\u2500\u2500 common-staging\n\u251c\u2500\u2500 development\n\u251c\u2500\u2500 mon-staging\n\u2514\u2500\u2500 vars\n\n\n\n\nThere are a few exceptions:\n\n\n\n\ncommon-development\n shares tests between \ndevelopment\n and \napp-staging\n\n\ncommon-staging\n shares tests between \napp-staging\n and \nmon-staging\n\n\n\n\nIdeally the serverspec tests would be broken up according to roles, mirroring\nthe Ansible configuration. Prior to the reorganization of the Ansible\nlayout, the tests are rather tightly coupled to hosts. The layout \nof spectests is therefore subject to change.", 
            "title": "Serverspec Tests"
        }, 
        {
            "location": "/contributing/spec_tests/#serverspec-tests", 
            "text": "serverspec  tests verify the end state of the vagrant machines. \nAny changes to the Ansible configuration should have a corresponding spectest.", 
            "title": "Serverspec tests"
        }, 
        {
            "location": "/contributing/spec_tests/#install-directions-ubuntu", 
            "text": "apt-get install bundler\ncd spec_tests/\nbundle update  Running the tests  cd spec_tests/\nbundle exec rake spec  This will run the tests against all configured hosts, specifically:   development  app-staging  mon-staging  build  In order to run the tests, each VM will be created and provisioned, if necessary.\nRunning all VMs concurrently may cause performance problems if you have less\nthan 8GB of RAM. You can isolate specific machines for faster testing:  cd spec_tests\nbundle exec rake --tasks # check output for desired machine\nbundle exec rake spec:development  Updating the tests  Changes to the ansible config should result in failing spectests, but\nonly if an existing task was modified. If you add a new task, make sure \nto add a corresponding spectest to validate that state after a new provisioning run.\nTests import variables from separate YAML files than the Ansible playbooks:  spec_tests/spec/vars\n\u251c\u2500\u2500 development.yml\n\u2514\u2500\u2500 staging.yml  Any variable changes in the Ansible config should have a corresponding entry \nin these vars files. These vars are dynamically loaded for each host via the spec_helper.rb  file. Make sure to add your tests to relevant location \nfor the host you plan to test:  spec_tests/spec/app-staging\n\u251c\u2500\u2500 apache_spec.rb\n\u251c\u2500\u2500 apparmor_spec.rb\n\u251c\u2500\u2500 iptables_spec.rb\n\u251c\u2500\u2500 ossec_agent_spec.rb\n\u251c\u2500\u2500 securedrop_app_spec.rb\n\u251c\u2500\u2500 securedrop_app_test_spec.rb\n\u2514\u2500\u2500 tor_spec.rb  In the example above, to add a new test for the  app-staging  host,\nadd a new file to the  spec_tests/spec/app-staging  directory.", 
            "title": "Install directions (Ubuntu)"
        }, 
        {
            "location": "/contributing/spec_tests/#spectest-layout", 
            "text": "The serverspec tests are mostly broken up according to\nmachines in the Vagrantfile:  spec_tests/spec\n\u251c\u2500\u2500 app-staging\n\u251c\u2500\u2500 build\n\u251c\u2500\u2500 common-development\n\u251c\u2500\u2500 common-staging\n\u251c\u2500\u2500 development\n\u251c\u2500\u2500 mon-staging\n\u2514\u2500\u2500 vars  There are a few exceptions:   common-development  shares tests between  development  and  app-staging  common-staging  shares tests between  app-staging  and  mon-staging   Ideally the serverspec tests would be broken up according to roles, mirroring\nthe Ansible configuration. Prior to the reorganization of the Ansible\nlayout, the tests are rather tightly coupled to hosts. The layout \nof spectests is therefore subject to change.", 
            "title": "Spectest layout"
        }, 
        {
            "location": "/contributing/snap_ci/", 
            "text": "running notes on setting up snap-ci + vagrant + digital ocean provider + ansible provisioner\n\n\nTo speed up testing times, prebuilt images that already contain the packages needed for each stage are used.\nThe prebuilt images are snapshots of the default VPS Ubuntu 14.04 x64 images with the stage specific deb packages installed.\nAfter the stage specific packages are installed a snapshot is taken of the image with the stage name and date.\n\n\nTo test a clean install there is a manual gate to run the snap-ci tests without the prebuilt images\n\n\n(This should be migrated to Packer)\n\n\nDevelopment\n\n\ngit clone https://github.com/freedomofpress/securedrop\nsudo apt-get install gnupg2 haveged python python-pip secure-delete sqlite libssl-dev python-dev python-pip firefox xvfb redis-server\nsudo pip install -r securedrop/requirements/securedrop-requirements.txt\nsudo pip install -r securedrop/requirements/test-requirements.txt\n\n\nApp-staging\n\n\ngit clone https://github.com/freedomofpress/securedrop\nsudo apt-get install apache2-mpm-worker libapache2-mod-xsendfile libapache2-mod-wsgi apparmor-utils gnupg2 haveged python python-pip secure-delete sqlite libssl-dev python-dev python-pip firefox xvfb tar unzip inotify-tools libssl-dev redis-server\nsudo pip install -r securedrop/requirements/securedrop-requirements.txt\n\n\nmon-staging\n\n\nIn Snap-CI", 
            "title": "Automated CI Tests"
        }, 
        {
            "location": "/contributing/snap_ci/#running-notes-on-setting-up-snap-ci-vagrant-digital-ocean-provider-ansible-provisioner", 
            "text": "To speed up testing times, prebuilt images that already contain the packages needed for each stage are used.\nThe prebuilt images are snapshots of the default VPS Ubuntu 14.04 x64 images with the stage specific deb packages installed.\nAfter the stage specific packages are installed a snapshot is taken of the image with the stage name and date.  To test a clean install there is a manual gate to run the snap-ci tests without the prebuilt images  (This should be migrated to Packer)", 
            "title": "running notes on setting up snap-ci + vagrant + digital ocean provider + ansible provisioner"
        }, 
        {
            "location": "/contributing/snap_ci/#development", 
            "text": "git clone https://github.com/freedomofpress/securedrop\nsudo apt-get install gnupg2 haveged python python-pip secure-delete sqlite libssl-dev python-dev python-pip firefox xvfb redis-server\nsudo pip install -r securedrop/requirements/securedrop-requirements.txt\nsudo pip install -r securedrop/requirements/test-requirements.txt", 
            "title": "Development"
        }, 
        {
            "location": "/contributing/snap_ci/#app-staging", 
            "text": "git clone https://github.com/freedomofpress/securedrop\nsudo apt-get install apache2-mpm-worker libapache2-mod-xsendfile libapache2-mod-wsgi apparmor-utils gnupg2 haveged python python-pip secure-delete sqlite libssl-dev python-dev python-pip firefox xvfb tar unzip inotify-tools libssl-dev redis-server\nsudo pip install -r securedrop/requirements/securedrop-requirements.txt", 
            "title": "App-staging"
        }, 
        {
            "location": "/contributing/snap_ci/#mon-staging", 
            "text": "", 
            "title": "mon-staging"
        }, 
        {
            "location": "/contributing/snap_ci/#in-snap-ci", 
            "text": "", 
            "title": "In Snap-CI"
        }, 
        {
            "location": "/contributing/apparmor_profiles/", 
            "text": "Generating AppArmor profiles for Tor and Apache\n\n\nvagrant up /staging$/\nvagrant ssh app-staging\nsudo su\ncd /var/www/securedrop\n\n\n\n\n(run tests, use the application, restart service, power off power on)\n\n\naa-logprof\n\n\n(follow prompts and save at the end)\n\n\naa-complain /etc/apparmor.d/PROFILE_NAME\n\n\n(run tests, use the application, restart service, power off power on)\n\n\naa-logprof\n\n\nRepeat.\n\n\nThe AppArmor profiles are saved in \n/etc/apparmor.d/\n\nThere are two profiles:\n - usr.sbin.tor\n - usr.sbin.apache2\n\n\nAfter running \naa-logprof\n you will need to copy the modified profile back to your host machine.\n\n\ncp /etc/apparmor.d/usr.sbin.apache2 /vagrant/install_files/ansible-base\ncp /etc/apparmor.d/usr.sbin.tor /vagrant/install_files/ansible-base\n\n\nThe AppArmor profiles are packaged with the securedrop-app-code.\nThe securedrop-app-code postinst puts the AppArmor profiles in enforce mode.\nThe \napp-test\n Ansible module (which is run as part of staging but not prod) puts the AppArmor profiles in enforce mode.", 
            "title": "AppArmor Profiles"
        }, 
        {
            "location": "/contributing/apparmor_profiles/#generating-apparmor-profiles-for-tor-and-apache", 
            "text": "vagrant up /staging$/\nvagrant ssh app-staging\nsudo su\ncd /var/www/securedrop  (run tests, use the application, restart service, power off power on)  aa-logprof  (follow prompts and save at the end)  aa-complain /etc/apparmor.d/PROFILE_NAME  (run tests, use the application, restart service, power off power on)  aa-logprof  Repeat.  The AppArmor profiles are saved in  /etc/apparmor.d/ \nThere are two profiles:\n - usr.sbin.tor\n - usr.sbin.apache2  After running  aa-logprof  you will need to copy the modified profile back to your host machine.  cp /etc/apparmor.d/usr.sbin.apache2 /vagrant/install_files/ansible-base\ncp /etc/apparmor.d/usr.sbin.tor /vagrant/install_files/ansible-base  The AppArmor profiles are packaged with the securedrop-app-code.\nThe securedrop-app-code postinst puts the AppArmor profiles in enforce mode.\nThe  app-test  Ansible module (which is run as part of staging but not prod) puts the AppArmor profiles in enforce mode.", 
            "title": "Generating AppArmor profiles for Tor and Apache"
        }, 
        {
            "location": "/contributing/creating_deb/", 
            "text": "Creating the deb packages for SecureDrop\n\n\nGathering OSSEC files\n\n\nOSSEC can be downloaded from their website or cloned from git.\nhttps://www.ossec.net\n\n\nThe installed files are different for both the agent and server.\n\n\nInstall the OSSEC server\n\n\nroot@dmon:~/ossec-hids# ls\nactive-response  CONFIG   CONTRIBUTORS  etc      install.sh  README.md\nBUGS             contrib  doc           INSTALL  LICENSE     src\nroot@dmon:~/ossec-hids# ./install.sh\n\n  ** Para instala????o em portugu??s, escolha [br].\n  ** ???????????????????????????, ????????? [cn].\n  ** Fur eine deutsche Installation wohlen Sie [de].\n  ** ?????? ?????????????????????? ?????? ????????????????, ???????????????? [el].\n  ** For installation in English, choose [en].\n  ** Para instalar en Espa??ol , eliga [es].\n  ** Pour une installation en fran??ais, choisissez [fr]\n  ** A Magyar nyelv?? telep??t??shez v??lassza [hu].\n  ** Per l'installazione in Italiano, scegli [it].\n  ** ???????????????????????????????????????????????????????????????jp].\n  ** Voor installatie in het Nederlands, kies [nl].\n  ** Aby instalowa?? w j??zyku Polskim, wybierz [pl].\n  ** ????????????????????????? ???? ?????????????????? ???? ?????????????? ,?????????????? [ru].\n  ** Za instalaciju na srpskom, izaberi [sr].\n  ** T??rk??e kurulum i??in se??in [tr].\n  (en/br/cn/de/el/es/fr/hu/it/jp/nl/pl/ru/sr/tr) [en]:\n\n\n OSSEC HIDS v2.8 Installation Script - http://www.ossec.net\n\n You are about to start the installation process of the OSSEC HIDS.\n You must have a C compiler pre-installed in your system.\n If you have any questions or comments, please send an e-mail\n to dcid@ossec.net (or daniel.cid@gmail.com).\n\n  - System: Linux dmon 3.13.0-32-generic\n  - User: root\n  - Host: dmon\n\n\n  -- Press ENTER to continue or Ctrl-C to abort. --\n\n\n1- What kind of installation do you want (server, agent, local, hybrid or help)? server\n\n  - Server installation chosen.\n\n2- Setting up the installation environment.\n\n - Choose where to install the OSSEC HIDS [/var/ossec]:\n\n    - Installation will be made at  /var/ossec .\n\n3- Configuring the OSSEC HIDS.\n\n  3.1- Do you want e-mail notification? (y/n) [y]:\n   - What's your e-mail address? securedrop@freedom.press\n\n   - We found your SMTP server as: smtp.electricembers.net.\n   - Do you want to use it? (y/n) [y]: y\n\n   --- Using SMTP server:  smtp.electricembers.net.\n\n  3.2- Do you want to run the integrity check daemon? (y/n) [y]: y\n\n   - Running syscheck (integrity check daemon).\n\n  3.3- Do you want to run the rootkit detection engine? (y/n) [y]: y\n\n   - Running rootcheck (rootkit detection).\n\n  3.4- Active response allows you to execute a specific\n       command based on the events received. For example,\n       you can block an IP address or disable access for\n       a specific user.\n       More information at:\n       http://www.ossec.net/en/manual.html#active-response\n\n   - Do you want to enable active response? (y/n) [y]: n\n\n     - Active response disabled.\n\n  3.5- Do you want to enable remote syslog (port 514 udp)? (y/n) [y]: n\n\n   --- Remote syslog disabled.\n\n  3.6- Setting the configuration to analyze the following logs:\n    -- /var/log/auth.log\n    -- /var/log/syslog\n    -- /var/log/dpkg.log\n\n - If you want to monitor any other file, just change\n   the ossec.conf and add a new localfile entry.\n   Any questions about the configuration can be answered\n   by visiting us online at http://www.ossec.net .\n\n\n   --- Press ENTER to continue ---\n\n\n\n\nCreate the zipped files for the OSSEC server files\n\n\nroot@dmon:~/ossec-hids# mkdir ../monitor-ossec\nroot@dmon:~/ossec-hids# mkdir ../monitor-ossec/etc\nroot@dmon:~/ossec-hids# cp /etc/ossec-init.conf ../monitor-ossec/etc/\nroot@dmon:~/ossec-hids# mkdir ../monitor-ossec/var/\nroot@dmon:~/ossec-hids# cp -R /var/ossec/ ../monitor-ossec/var/\nroot@dmon:~/ossec-hids# mkdir ../monitor-ossec/etc/init.d\nroot@dmon:~/ossec-hids# cp /etc/init.d/ossec ../monitor-ossec/etc/init.d/\nroot@dmon:~/ossec-hids# rm ../monitor-ossec/var/ossec/etc/ossec.conf\n\n\n\n\nInstall OSSEC agent\n\n\nroot@dapp:~/ossec-hids# ./install.sh\n\n  ** Para instala????o em portugu??s, escolha [br].\n  ** ???????????????????????????, ????????? [cn].\n  ** Fur eine deutsche Installation wohlen Sie [de].\n  ** ?????? ?????????????????????? ?????? ????????????????, ???????????????? [el].\n  ** For installation in English, choose [en].\n  ** Para instalar en Espa??ol , eliga [es].\n  ** Pour une installation en fran??ais, choisissez [fr]\n  ** A Magyar nyelv?? telep??t??shez v??lassza [hu].\n  ** Per l'installazione in Italiano, scegli [it].\n  ** ???????????????????????????????????????????????????????????????jp].\n  ** Voor installatie in het Nederlands, kies [nl].\n  ** Aby instalowa?? w j??zyku Polskim, wybierz [pl].\n  ** ????????????????????????? ???? ?????????????????? ???? ?????????????? ,?????????????? [ru].\n  ** Za instalaciju na srpskom, izaberi [sr].\n  ** T??rk??e kurulum i??in se??in [tr].\n  (en/br/cn/de/el/es/fr/hu/it/jp/nl/pl/ru/sr/tr) [en]:\n\n\n OSSEC HIDS v2.8 Installation Script - http://www.ossec.net\n\n You are about to start the installation process of the OSSEC HIDS.\n You must have a C compiler pre-installed in your system.\n If you have any questions or comments, please send an e-mail\n to dcid@ossec.net (or daniel.cid@gmail.com).\n\n  - System: Linux dmon 3.13.0-32-generic\n  - User: root\n  - Host: dmon\n\n\n  -- Press ENTER to continue or Ctrl-C to abort. --\n\n\n1- What kind of installation do you want (server, agent, local, hybrid or help)? agent\n\n  - Agent(client) installation chosen.\n\n2- Setting up the installation environment.\n\n - Choose where to install the OSSEC HIDS [/var/ossec]:\n\n    - Installation will be made at  /var/ossec .\n\n3- Configuring the OSSEC HIDS.\n\n  3.1- What's the IP Address or hostname of the OSSEC HIDS server?: 192.168.2.2\n\n   - Adding Server IP 192.168.2.2\n\n  3.2- Do you want to run the integrity check daemon? (y/n) [y]:\n\n   - Running syscheck (integrity check daemon).\n\n  3.3- Do you want to run the rootkit detection engine? (y/n) [y]:\n\n   - Running rootcheck (rootkit detection).\n\n  3.4 - Do you want to enable active response? (y/n) [y]: n\n\n   - Active response disabled.\n\n  3.5- Setting the configuration to analyze the following logs:\n    -- /var/log/auth.log\n    -- /var/log/syslog\n    -- /var/log/dpkg.log\n\n - If you want to monitor any other file, just change\n   the ossec.conf and add a new localfile entry.\n   Any questions about the configuration can be answered\n   by visiting us online at http://www.ossec.net .\n\n\n   --- Press ENTER to continue ---\n\n\n\n\nCreate the zipped files for the OSSEC agent files\n\n\nroot@dapp:~/ossec-hids# mkdir ../ossec-agent\nroot@dapp:~/ossec-hids# mkdir -p ../ossec-agent/etc/init.d\nroot@dapp:~/ossec-hids# mkdir -p ../ossec-agent/var\nroot@dapp:~/ossec-hids# cp -R /var/ossec/ ../ossec-agent/var/\nroot@dapp:~/ossec-hids# cp /etc/ossec-init.conf ../ossec-agent/etc/\nroot@dapp:~/ossec-hids# cp /etc/init.d/ossec ../ossec-agent/etc/init.d/\nstrip ../ossec-agent/var/ossec/bin/*", 
            "title": "Building .deb packages"
        }, 
        {
            "location": "/contributing/creating_deb/#creating-the-deb-packages-for-securedrop", 
            "text": "", 
            "title": "Creating the deb packages for SecureDrop"
        }, 
        {
            "location": "/contributing/creating_deb/#gathering-ossec-files", 
            "text": "OSSEC can be downloaded from their website or cloned from git.\nhttps://www.ossec.net  The installed files are different for both the agent and server.  Install the OSSEC server  root@dmon:~/ossec-hids# ls\nactive-response  CONFIG   CONTRIBUTORS  etc      install.sh  README.md\nBUGS             contrib  doc           INSTALL  LICENSE     src\nroot@dmon:~/ossec-hids# ./install.sh\n\n  ** Para instala????o em portugu??s, escolha [br].\n  ** ???????????????????????????, ????????? [cn].\n  ** Fur eine deutsche Installation wohlen Sie [de].\n  ** ?????? ?????????????????????? ?????? ????????????????, ???????????????? [el].\n  ** For installation in English, choose [en].\n  ** Para instalar en Espa??ol , eliga [es].\n  ** Pour une installation en fran??ais, choisissez [fr]\n  ** A Magyar nyelv?? telep??t??shez v??lassza [hu].\n  ** Per l'installazione in Italiano, scegli [it].\n  ** ???????????????????????????????????????????????????????????????jp].\n  ** Voor installatie in het Nederlands, kies [nl].\n  ** Aby instalowa?? w j??zyku Polskim, wybierz [pl].\n  ** ????????????????????????? ???? ?????????????????? ???? ?????????????? ,?????????????? [ru].\n  ** Za instalaciju na srpskom, izaberi [sr].\n  ** T??rk??e kurulum i??in se??in [tr].\n  (en/br/cn/de/el/es/fr/hu/it/jp/nl/pl/ru/sr/tr) [en]:\n\n\n OSSEC HIDS v2.8 Installation Script - http://www.ossec.net\n\n You are about to start the installation process of the OSSEC HIDS.\n You must have a C compiler pre-installed in your system.\n If you have any questions or comments, please send an e-mail\n to dcid@ossec.net (or daniel.cid@gmail.com).\n\n  - System: Linux dmon 3.13.0-32-generic\n  - User: root\n  - Host: dmon\n\n\n  -- Press ENTER to continue or Ctrl-C to abort. --\n\n\n1- What kind of installation do you want (server, agent, local, hybrid or help)? server\n\n  - Server installation chosen.\n\n2- Setting up the installation environment.\n\n - Choose where to install the OSSEC HIDS [/var/ossec]:\n\n    - Installation will be made at  /var/ossec .\n\n3- Configuring the OSSEC HIDS.\n\n  3.1- Do you want e-mail notification? (y/n) [y]:\n   - What's your e-mail address? securedrop@freedom.press\n\n   - We found your SMTP server as: smtp.electricembers.net.\n   - Do you want to use it? (y/n) [y]: y\n\n   --- Using SMTP server:  smtp.electricembers.net.\n\n  3.2- Do you want to run the integrity check daemon? (y/n) [y]: y\n\n   - Running syscheck (integrity check daemon).\n\n  3.3- Do you want to run the rootkit detection engine? (y/n) [y]: y\n\n   - Running rootcheck (rootkit detection).\n\n  3.4- Active response allows you to execute a specific\n       command based on the events received. For example,\n       you can block an IP address or disable access for\n       a specific user.\n       More information at:\n       http://www.ossec.net/en/manual.html#active-response\n\n   - Do you want to enable active response? (y/n) [y]: n\n\n     - Active response disabled.\n\n  3.5- Do you want to enable remote syslog (port 514 udp)? (y/n) [y]: n\n\n   --- Remote syslog disabled.\n\n  3.6- Setting the configuration to analyze the following logs:\n    -- /var/log/auth.log\n    -- /var/log/syslog\n    -- /var/log/dpkg.log\n\n - If you want to monitor any other file, just change\n   the ossec.conf and add a new localfile entry.\n   Any questions about the configuration can be answered\n   by visiting us online at http://www.ossec.net .\n\n\n   --- Press ENTER to continue ---  Create the zipped files for the OSSEC server files  root@dmon:~/ossec-hids# mkdir ../monitor-ossec\nroot@dmon:~/ossec-hids# mkdir ../monitor-ossec/etc\nroot@dmon:~/ossec-hids# cp /etc/ossec-init.conf ../monitor-ossec/etc/\nroot@dmon:~/ossec-hids# mkdir ../monitor-ossec/var/\nroot@dmon:~/ossec-hids# cp -R /var/ossec/ ../monitor-ossec/var/\nroot@dmon:~/ossec-hids# mkdir ../monitor-ossec/etc/init.d\nroot@dmon:~/ossec-hids# cp /etc/init.d/ossec ../monitor-ossec/etc/init.d/\nroot@dmon:~/ossec-hids# rm ../monitor-ossec/var/ossec/etc/ossec.conf  Install OSSEC agent  root@dapp:~/ossec-hids# ./install.sh\n\n  ** Para instala????o em portugu??s, escolha [br].\n  ** ???????????????????????????, ????????? [cn].\n  ** Fur eine deutsche Installation wohlen Sie [de].\n  ** ?????? ?????????????????????? ?????? ????????????????, ???????????????? [el].\n  ** For installation in English, choose [en].\n  ** Para instalar en Espa??ol , eliga [es].\n  ** Pour une installation en fran??ais, choisissez [fr]\n  ** A Magyar nyelv?? telep??t??shez v??lassza [hu].\n  ** Per l'installazione in Italiano, scegli [it].\n  ** ???????????????????????????????????????????????????????????????jp].\n  ** Voor installatie in het Nederlands, kies [nl].\n  ** Aby instalowa?? w j??zyku Polskim, wybierz [pl].\n  ** ????????????????????????? ???? ?????????????????? ???? ?????????????? ,?????????????? [ru].\n  ** Za instalaciju na srpskom, izaberi [sr].\n  ** T??rk??e kurulum i??in se??in [tr].\n  (en/br/cn/de/el/es/fr/hu/it/jp/nl/pl/ru/sr/tr) [en]:\n\n\n OSSEC HIDS v2.8 Installation Script - http://www.ossec.net\n\n You are about to start the installation process of the OSSEC HIDS.\n You must have a C compiler pre-installed in your system.\n If you have any questions or comments, please send an e-mail\n to dcid@ossec.net (or daniel.cid@gmail.com).\n\n  - System: Linux dmon 3.13.0-32-generic\n  - User: root\n  - Host: dmon\n\n\n  -- Press ENTER to continue or Ctrl-C to abort. --\n\n\n1- What kind of installation do you want (server, agent, local, hybrid or help)? agent\n\n  - Agent(client) installation chosen.\n\n2- Setting up the installation environment.\n\n - Choose where to install the OSSEC HIDS [/var/ossec]:\n\n    - Installation will be made at  /var/ossec .\n\n3- Configuring the OSSEC HIDS.\n\n  3.1- What's the IP Address or hostname of the OSSEC HIDS server?: 192.168.2.2\n\n   - Adding Server IP 192.168.2.2\n\n  3.2- Do you want to run the integrity check daemon? (y/n) [y]:\n\n   - Running syscheck (integrity check daemon).\n\n  3.3- Do you want to run the rootkit detection engine? (y/n) [y]:\n\n   - Running rootcheck (rootkit detection).\n\n  3.4 - Do you want to enable active response? (y/n) [y]: n\n\n   - Active response disabled.\n\n  3.5- Setting the configuration to analyze the following logs:\n    -- /var/log/auth.log\n    -- /var/log/syslog\n    -- /var/log/dpkg.log\n\n - If you want to monitor any other file, just change\n   the ossec.conf and add a new localfile entry.\n   Any questions about the configuration can be answered\n   by visiting us online at http://www.ossec.net .\n\n\n   --- Press ENTER to continue ---  Create the zipped files for the OSSEC agent files  root@dapp:~/ossec-hids# mkdir ../ossec-agent\nroot@dapp:~/ossec-hids# mkdir -p ../ossec-agent/etc/init.d\nroot@dapp:~/ossec-hids# mkdir -p ../ossec-agent/var\nroot@dapp:~/ossec-hids# cp -R /var/ossec/ ../ossec-agent/var/\nroot@dapp:~/ossec-hids# cp /etc/ossec-init.conf ../ossec-agent/etc/\nroot@dapp:~/ossec-hids# cp /etc/init.d/ossec ../ossec-agent/etc/init.d/\nstrip ../ossec-agent/var/ossec/bin/*", 
            "title": "Gathering OSSEC files"
        }
    ]
}